<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Alan Franzoni</title><link>http://www.pyvideo.org/speaker/555/alan-franzoni/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/555/alan-franzoni/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 06 Jul 2012 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Language alone won't pay your bills</title><link>http://www.pyvideo.org/video/1272/language-alone-wont-pay-your-bills</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2012] Alan Franzoni - 5 JULY 2012 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
What’s Python like? Is it ready for the “enterprise”? Does it scale well in
the “cloud”? How does it stand against its old, bearded enemies like Java, or
new threats like Ruby? A lot of work on Python is focused on the language
itself, making it quite pleasant to read and write, and catering hordes of
language lovers that swear by it. Nowadays, though, we don’t just choose a
language: we pick a platform - which includes a runtime, APIs, and a lot of
tools - along with its strengths and weaknesses, and many factors should be
considered before doing so - mostly because we don’t usually have a “best
choice ever” and we must face some sort of tradeoff with each design choice.
Java is ubiquitous in the “enterprise software” world despite its
cumbersomeness - why? Is it really just a matter of slow adoption rate, or
does it still stand strong in some fields? We’ll explore where Python already
works well and where it falls beyond others, not just in terms of language
beauty, but in terms of tools and team productivity. We won’t be able to go
really deep into each aspect since time is limited, but questions are welcome.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alan Franzoni</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1272/language-alone-wont-pay-your-bills</guid><enclosure url="http://www.youtube.com/watch?v=JlNYO4zUDAQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/JlNYO4zUDAQ/hqdefault.jpg"></media:thumbnail></item><item><title>Dependency injection is your friend</title><link>http://www.pyvideo.org/video/1156/dependency-injection-is-your-friend</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Alan Franzoni - 24 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Dependency injection is a technique that has been around since long, and it's
widely used in many programming languages and environments, but it's not that
widespread in the Python world.

Many think that using dependency injection will force writing large-and-
complex xml blobs, break encapsulation, or reduce code readability, or just
that it's unneeded in an highly expressive language like Python is.

On the contrary, I'll show you that DI: - doesn't require any library or
framework; - encourages peer role identification; - helps keeping a class
focused and cohesive; - encourages separation between wiring from applicative
code; - makes your code more reusable, expressive and testable; - doesn't
break encapsulation; - turns part of your coding efforts into configuration

Large applications, by the way, might just get a great maintenance boost by
using a real DI container, hence I'll briefly cover Pydenji, the Python(ic)
dependency injection toolkit, and what it can do for your application.

A basic knowledge of object oriented design and SOLID principles is required
in order to fully appreciate the content of this talk.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alan Franzoni</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1156/dependency-injection-is-your-friend</guid><enclosure url="http://www.youtube.com/watch?v=PSeSWINJ5YM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/PSeSWINJ5YM/hqdefault.jpg"></media:thumbnail></item></channel></rss>
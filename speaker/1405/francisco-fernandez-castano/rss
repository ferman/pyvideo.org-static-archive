<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Francisco Fernández Castaño</title><link>http://www.pyvideo.org/speaker/1405/francisco-fernandez-castano/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1405/francisco-fernandez-castano/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 29 May 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Extending Python</title><link>http://www.pyvideo.org/video/3629/extending-python</link><description>&lt;p&gt;Description&lt;/p&gt;
Python is a great language, but there are occasions where we need access to low level operations or connect with some database driver written in C or we need to overcome to some speed boottleneck in Python due to some limitation in the language, like NumPy or Scikit-learn do, using extensions.
With the FFI(Foreign function interface) we can connect Python with other languages like C, C++ and even Rust or Fortran. There are some alternatives to achieve this goal, Native Extensions, Ctypes and CFFI. We’ll compare this three ways of extending Python and we’ll study pros and cons of each approach.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francisco Fernández Castaño</dc:creator><pubDate>Fri, 29 May 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3629/extending-python</guid><enclosure url="https://www.youtube.com/watch?v=5qiw_FGcr1k" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/5qiw_FGcr1k/maxresdefault.jpg"></media:thumbnail></item><item><title>Graph Databases, a little connected tour</title><link>http://www.pyvideo.org/video/3599/graph-databases-a-little-connected-tour-0</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francisco Fernández Castaño</dc:creator><pubDate>Fri, 29 May 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3599/graph-databases-a-little-connected-tour-0</guid><enclosure url="https://www.youtube.com/watch?v=ukV5sPSOtiE" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/ukV5sPSOtiE/maxresdefault.jpg"></media:thumbnail></item><item><title>Knowing your Garbage collector</title><link>http://www.pyvideo.org/video/3620/knowing-your-garbage-collector</link><description>&lt;p&gt;Description&lt;/p&gt;
As Python programmers we’re used to program without taking care about allocating memory for our objects and later on freeing them, Python garbage collector takes care of this task automatically for us.
Garbage collection is one of the most challenging topics in computer science, there are a lot of research around the topic and different ways to tackle the problem.
Knowing how our language does this process give us a better understanding of underlying interpreter and allow us to know why problems like cycles can happen in CPython interpreters.
So, this talk aims to be and introduction to the topic and a walkaround through different approaches followed in CPython and PyPy:

Generational Reference counting with cycles detector on CPython.
Incremental version of the MiniMark GC on PyPy.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francisco Fernández Castaño</dc:creator><pubDate>Fri, 29 May 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3620/knowing-your-garbage-collector</guid><enclosure url="https://www.youtube.com/watch?v=MaeS8VI_nvk" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/MaeS8VI_nvk/maxresdefault.jpg"></media:thumbnail></item><item><title>Graph Databases, a little connected tour</title><link>http://www.pyvideo.org/video/2991/graph-databases-a-little-connected-tour</link><description>&lt;p&gt;Abstract&lt;/p&gt;
There are many kinds of NoSQL databases like, document databases, key-value, column databases and graph databases.
In some scenarios is more convenient to store our data as a graph, because we want to extract and study information relative to these connections. In this scenario, graph databases are the ideal, they are designed and implemented to deal with connected information in a efficient way.
&lt;p&gt;Description&lt;/p&gt;
There are many kinds of NoSQL databases like, document databases, key-value, column databases and graph databases.
In some scenarios is more convenient to store our data as a graph, because we want to extract and study information relative to these connections. In this scenario, graph databases are the ideal, they are designed and implemented to deal with connected information in a efficient way.
In this talk I'll explain why NoSQL is necessary in some contexts as an alternative to traditional relational databases. How graph databases allow developers model their domains in a natural way without translating these domain models to an relational model with some artificial data like foreign keys and why is more efficient a graph database than a relational one or even a document database in a high connected environment. Then I'll explain specific characteristics of Neo4J as well as how to use Cypher the neo4j query language through python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francisco Fernández Castaño</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2991/graph-databases-a-little-connected-tour</guid><enclosure url="http://www.youtube.com/watch?v=IZVPsuWODpg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/IZVPsuWODpg/hqdefault.jpg"></media:thumbnail></item><item><title>Extending Python, what is the best option for me?</title><link>http://www.pyvideo.org/video/3031/extending-python-what-is-the-best-option-for-me</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python is a great language, but there are occasions where we need access to low level operations or connect with some database driver written in C. With the FFI(Foreign function interface) we can connect Python with other languages like C, C++ and even the new Rust. There are some alternatives to achieve this goal, Native Extensions, Ctypes and CFFI.  I'll compare this three ways of extending Python.
&lt;p&gt;Description&lt;/p&gt;
In this talk we will explore all the alternatives in cpython ecosystem to load external libraries. In first place we'll study the principles and how shared libraries work. After that we will look into the internals of CPython to understand how extensions work and how modules are loaded. Then we will study the main three alternatives to extend CPython: Native Extensions, Ctypes and CFFI and how to automate the process. 
Furthermore we will take a look to other python implementations and how we can extend it.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francisco Fernández Castaño</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3031/extending-python-what-is-the-best-option-for-me</guid><enclosure url="http://www.youtube.com/watch?v=m5H2JYSXrHc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/m5H2JYSXrHc/hqdefault.jpg"></media:thumbnail></item></channel></rss>
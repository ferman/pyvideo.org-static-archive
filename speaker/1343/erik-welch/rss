<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Erik Welch</title><link>http://www.pyvideo.org/speaker/1343/erik-welch/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1343/erik-welch/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 26 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Functional programming in Python with PyToolz</title><link>http://www.pyvideo.org/video/2858/functional-programming-in-python-with-pytoolz</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Learn the principles of functional programming from the comfort of Python.  I'll motivate the principles of standardization, composability, laziness, and purity within a standard workflow.  We'll go far beyond the standard libraries `itertools` and `functools` by using a functional standard library `toolz` and its high-performance counterpart `cytoolz` written in Cython.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Welch</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2858/functional-programming-in-python-with-pytoolz</guid><enclosure url="http://964bdd2f965bbc4ca8f5-3ebaa0e988d98119a4fead51a26da83a.r42.cf2.rackcdn.com/pyohio-2014/2858_Functional_programming_in_Python_with_PyToolz.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://964bdd2f965bbc4ca8f5-3ebaa0e988d98119a4fead51a26da83a.r42.cf2.rackcdn.com/pyohio-2014/2858_Functional_programming_in_Python_with_PyToolz.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/Y6cANn-zCVc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/Y6cANn-zCVc/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Austin Bingham</title><link>http://www.pyvideo.org/speaker/1272/austin-bingham/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1272/austin-bingham/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Wed, 23 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Python refactoring with Rope and Traad</title><link>http://www.pyvideo.org/video/2989/python-refactoring-with-rope-and-traad</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Rope is a powerful Python refactoring library. Traad (Norwegian for "thread") is a tool which makes it simpler to integrate rope into IDEs via a simple HTTP API. In this session we'll look at how traad and rope work together and how traad integrates with at least one popular editor.
&lt;p&gt;Description&lt;/p&gt;
Python is a modern, dynamic language which is growing in popularity, but tool support for it is sometime lacking or only available in specific environments. For refactoring and other common IDE functions, however, the powerful open-source rope library provides a set of tools which are designed to be integrated into almost any programming environment. Rope supports most common refactorings, such as renaming and method extraction, but also more Python-specific refactorings, such as import organization. Rope’s underlying code analysis engine also allows it to do things like locating method definitions and generating auto-completion suggestions.

While rope is designed to be used from many environments, it’s not always easy or ideal to integrate rope directly into other programs. Traad  (Norwegian for “thread”) is another open-source project that addresses this problem by wrapping rope into a simple client-server model so that client programs (IDEs, editors, etc.) can perform refactorings without needing to embed rope directly. This simplifies dependencies, makes clients more robust in the face of errors, eases traad client development, and even allows clients to do things like switch between Python 2 and 3 refactoring in the same session.

In this session we’ll look at how rope operates, and we’ll see how traad wraps it to provide an easier integration interface. The audience will get enough information to start using rope themselves, either directly or via traad, and they’ll see how to use traad for integrating rope into their own environments. More generally, we’ll look at why client-server refactoring tools might be preferable to the more standard approach of direct embedding. 
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Austin Bingham</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2989/python-refactoring-with-rope-and-traad</guid><enclosure url="http://www.youtube.com/watch?v=NvV5OrVk24c" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/NvV5OrVk24c/hqdefault.jpg"></media:thumbnail></item><item><title>Integrating Python and C++ with Boost Python part 1</title><link>http://www.pyvideo.org/video/2749/integrating-python-and-c-with-boost-python-part-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python and C++ can be powerful complements to one another. C++ is great for performance-critical calculations, while Python is great for everything else. In this tutorial we’ll look at how to integrate Python and C++ using the Boost.Python library. You’ll learn techniques for easily developing hybrid systems that use the right language for the right task, resulting in better software.

&lt;p&gt;Description&lt;/p&gt;
Python and C++ are both popular languages that each bring a lot to the table. The languages also complement one another well: Python is high-level, dynamic, and easy to use while C++ is at-the-metal, static, and (in)famously tricky. There are times when there are real advantages to combining these disparate natures, and Python’s C API provides a strong interface for doing just that. Boost.Python is a C++ library that builds upon and improves Python’s C API to give users a simpler, more intuitive, and safer means to integrate Python and C++.

In this tutorial we’ll look at how to use Boost.Python to effectively bridge the Python/C++ boundary. We’ll start by briefly looking at the fundamentals of the Python C API since that defines the “ground rules”; this includes things like reference counting, the basic object model, and so forth. We’ll then quickly look at the Boost.Python API and show how it provides the same functionality as the underlying C API, but does so in a way that doesn’t obscure the real semantics of the Python language.

After this introduction, the rest of the tutorial will involve writing code to explore various elements of Boost.Python. We’ll focus on techniques for extending Python with C++, that is, writing Python modules in C++. Boost.Python can be used for embedding (i.e. invoking Python code from C++), but that involves a different set of techniques, and in practice most scientific Python developers are more interested in developing extensions.

The syllabus for the four-hour tutorial will be like this:

1. Introduction: C-API and Boost.Python basics

    Note that this can be reduced or eliminated of participants are already comfortable with the topics.

2. Hello World: Exposing a basic function

    In this section we’ll get a minimal Boost.Python module working. This will not only introduce students to the infrastructure of Boost.Python, but it will also give us a chance to make sure that everyone’s build environment is working.

3. Exposing functions

    In this section we’ll look at the details of exposing C++ functions to Python. The topics we’ll cover will include overloading (including Boost.Python’s auto-overload feature), default argument values, and a brief look at call policies.

4. Exposing classes

    Here we’ll look at how to expose C++ classes to Python. Topics will include the basic `class_&lt;T&gt;` template, member functions, data members, properties, inheritance, and virtual functions.

5. `boost::python::object`

    The `boost::python::object` class is Boost.Python’s primary interface to Python’s `PyObject` structure. Understanding how to work with this class is a key building-block for developing Python modules with Boost.Python. We’ll explore its API and features, including areas like attribute access, reference counting, and converting between Python and C++ objects.

6. Derived object types

    Boost.Python provides a number of `boost::python::object` subclasses for important Python classes like `list`, `dict`, and `tuple`. In this section we’ll look at these subclasses and how to use them in Boost.Python modules.

7. Enums

    Boost.Python provides `enum_&lt;T&gt;` for exposing C++ enums to Python. Python doesn’t have a notion of enums *per se*, but in this section we’ll explore how this template makes it straightforward to use C++ enums in Python in a simple and intuitive way.

8. Type conversion

    In this section we’ll look at Boost.Python’s support for doing automatic type-conversion across the Python/C++ boundary. We’ll see how you can register type-converters with Boost.Python which will be invoked whenever Boost.Python needs to convert a Python object to a C++ object or vice versa.

This is a fairly ambitious set of topics, and it’s possible that we won’t be able to cover them all. The topics are roughly in most-often-used to least-often-used order, however, so students will be sure to be exposed to the most important and relevant elements of the course.

Likewise, the four-hour format of the course means that we won’t be able to go into great depth on many topics. The main goal of the course, then, is to give students enough orientation and hands-on experience with Boost.Python that they can continue to learn on their own. Inter-language integration - especially between languages as dissimilar as C++ and Python - can be quite complex, but this tutorial will give students the grounding they need to successfully apply Boost.Python to their problems.  
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Austin Bingham</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2749/integrating-python-and-c-with-boost-python-part-0</guid><enclosure url="http://www.youtube.com/watch?v=GE8EsGUsC2w" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/GE8EsGUsC2w/hqdefault.jpg"></media:thumbnail></item><item><title>Integrating Python and C++ with Boost Python part 2</title><link>http://www.pyvideo.org/video/2748/integrating-python-and-c-with-boost-python-part</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python and C++ can be powerful complements to one another. C++ is great for performance-critical calculations, while Python is great for everything else. In this tutorial we’ll look at how to integrate Python and C++ using the Boost.Python library. You’ll learn techniques for easily developing hybrid systems that use the right language for the right task, resulting in better software.

&lt;p&gt;Description&lt;/p&gt;
Python and C++ are both popular languages that each bring a lot to the table. The languages also complement one another well: Python is high-level, dynamic, and easy to use while C++ is at-the-metal, static, and (in)famously tricky. There are times when there are real advantages to combining these disparate natures, and Python’s C API provides a strong interface for doing just that. Boost.Python is a C++ library that builds upon and improves Python’s C API to give users a simpler, more intuitive, and safer means to integrate Python and C++.

In this tutorial we’ll look at how to use Boost.Python to effectively bridge the Python/C++ boundary. We’ll start by briefly looking at the fundamentals of the Python C API since that defines the “ground rules”; this includes things like reference counting, the basic object model, and so forth. We’ll then quickly look at the Boost.Python API and show how it provides the same functionality as the underlying C API, but does so in a way that doesn’t obscure the real semantics of the Python language.

After this introduction, the rest of the tutorial will involve writing code to explore various elements of Boost.Python. We’ll focus on techniques for extending Python with C++, that is, writing Python modules in C++. Boost.Python can be used for embedding (i.e. invoking Python code from C++), but that involves a different set of techniques, and in practice most scientific Python developers are more interested in developing extensions.

The syllabus for the four-hour tutorial will be like this:

1. Introduction: C-API and Boost.Python basics

    Note that this can be reduced or eliminated of participants are already comfortable with the topics.

2. Hello World: Exposing a basic function

    In this section we’ll get a minimal Boost.Python module working. This will not only introduce students to the infrastructure of Boost.Python, but it will also give us a chance to make sure that everyone’s build environment is working.

3. Exposing functions

    In this section we’ll look at the details of exposing C++ functions to Python. The topics we’ll cover will include overloading (including Boost.Python’s auto-overload feature), default argument values, and a brief look at call policies.

4. Exposing classes

    Here we’ll look at how to expose C++ classes to Python. Topics will include the basic `class_&lt;T&gt;` template, member functions, data members, properties, inheritance, and virtual functions.

5. `boost::python::object`

    The `boost::python::object` class is Boost.Python’s primary interface to Python’s `PyObject` structure. Understanding how to work with this class is a key building-block for developing Python modules with Boost.Python. We’ll explore its API and features, including areas like attribute access, reference counting, and converting between Python and C++ objects.

6. Derived object types

    Boost.Python provides a number of `boost::python::object` subclasses for important Python classes like `list`, `dict`, and `tuple`. In this section we’ll look at these subclasses and how to use them in Boost.Python modules.

7. Enums

    Boost.Python provides `enum_&lt;T&gt;` for exposing C++ enums to Python. Python doesn’t have a notion of enums *per se*, but in this section we’ll explore how this template makes it straightforward to use C++ enums in Python in a simple and intuitive way.

8. Type conversion

    In this section we’ll look at Boost.Python’s support for doing automatic type-conversion across the Python/C++ boundary. We’ll see how you can register type-converters with Boost.Python which will be invoked whenever Boost.Python needs to convert a Python object to a C++ object or vice versa.

This is a fairly ambitious set of topics, and it’s possible that we won’t be able to cover them all. The topics are roughly in most-often-used to least-often-used order, however, so students will be sure to be exposed to the most important and relevant elements of the course.

Likewise, the four-hour format of the course means that we won’t be able to go into great depth on many topics. The main goal of the course, then, is to give students enough orientation and hands-on experience with Boost.Python that they can continue to learn on their own. Inter-language integration - especially between languages as dissimilar as C++ and Python - can be quite complex, but this tutorial will give students the grounding they need to successfully apply Boost.Python to their problems.  
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Austin Bingham</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2748/integrating-python-and-c-with-boost-python-part</guid><enclosure url="http://www.youtube.com/watch?v=WLKuHbkh6jU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/WLKuHbkh6jU/hqdefault.jpg"></media:thumbnail></item><item><title>Integrating Python and C++ with Boost Python part 3</title><link>http://www.pyvideo.org/video/2750/integrating-python-and-c-with-boost-python-part-1</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python and C++ can be powerful complements to one another. C++ is great for performance-critical calculations, while Python is great for everything else. In this tutorial we’ll look at how to integrate Python and C++ using the Boost.Python library. You’ll learn techniques for easily developing hybrid systems that use the right language for the right task, resulting in better software.

&lt;p&gt;Description&lt;/p&gt;
Python and C++ are both popular languages that each bring a lot to the table. The languages also complement one another well: Python is high-level, dynamic, and easy to use while C++ is at-the-metal, static, and (in)famously tricky. There are times when there are real advantages to combining these disparate natures, and Python’s C API provides a strong interface for doing just that. Boost.Python is a C++ library that builds upon and improves Python’s C API to give users a simpler, more intuitive, and safer means to integrate Python and C++.

In this tutorial we’ll look at how to use Boost.Python to effectively bridge the Python/C++ boundary. We’ll start by briefly looking at the fundamentals of the Python C API since that defines the “ground rules”; this includes things like reference counting, the basic object model, and so forth. We’ll then quickly look at the Boost.Python API and show how it provides the same functionality as the underlying C API, but does so in a way that doesn’t obscure the real semantics of the Python language.

After this introduction, the rest of the tutorial will involve writing code to explore various elements of Boost.Python. We’ll focus on techniques for extending Python with C++, that is, writing Python modules in C++. Boost.Python can be used for embedding (i.e. invoking Python code from C++), but that involves a different set of techniques, and in practice most scientific Python developers are more interested in developing extensions.

The syllabus for the four-hour tutorial will be like this:

1. Introduction: C-API and Boost.Python basics

    Note that this can be reduced or eliminated of participants are already comfortable with the topics.

2. Hello World: Exposing a basic function

    In this section we’ll get a minimal Boost.Python module working. This will not only introduce students to the infrastructure of Boost.Python, but it will also give us a chance to make sure that everyone’s build environment is working.

3. Exposing functions

    In this section we’ll look at the details of exposing C++ functions to Python. The topics we’ll cover will include overloading (including Boost.Python’s auto-overload feature), default argument values, and a brief look at call policies.

4. Exposing classes

    Here we’ll look at how to expose C++ classes to Python. Topics will include the basic `class_&lt;T&gt;` template, member functions, data members, properties, inheritance, and virtual functions.

5. `boost::python::object`

    The `boost::python::object` class is Boost.Python’s primary interface to Python’s `PyObject` structure. Understanding how to work with this class is a key building-block for developing Python modules with Boost.Python. We’ll explore its API and features, including areas like attribute access, reference counting, and converting between Python and C++ objects.

6. Derived object types

    Boost.Python provides a number of `boost::python::object` subclasses for important Python classes like `list`, `dict`, and `tuple`. In this section we’ll look at these subclasses and how to use them in Boost.Python modules.

7. Enums

    Boost.Python provides `enum_&lt;T&gt;` for exposing C++ enums to Python. Python doesn’t have a notion of enums *per se*, but in this section we’ll explore how this template makes it straightforward to use C++ enums in Python in a simple and intuitive way.

8. Type conversion

    In this section we’ll look at Boost.Python’s support for doing automatic type-conversion across the Python/C++ boundary. We’ll see how you can register type-converters with Boost.Python which will be invoked whenever Boost.Python needs to convert a Python object to a C++ object or vice versa.

This is a fairly ambitious set of topics, and it’s possible that we won’t be able to cover them all. The topics are roughly in most-often-used to least-often-used order, however, so students will be sure to be exposed to the most important and relevant elements of the course.

Likewise, the four-hour format of the course means that we won’t be able to go into great depth on many topics. The main goal of the course, then, is to give students enough orientation and hands-on experience with Boost.Python that they can continue to learn on their own. Inter-language integration - especially between languages as dissimilar as C++ and Python - can be quite complex, but this tutorial will give students the grounding they need to successfully apply Boost.Python to their problems.  
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Austin Bingham</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2750/integrating-python-and-c-with-boost-python-part-1</guid><enclosure url="http://www.youtube.com/watch?v=kR5tREIotlI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/kR5tREIotlI/hqdefault.jpg"></media:thumbnail></item><item><title>Integrating Python and C++ with Boost Python part 4</title><link>http://www.pyvideo.org/video/2751/integrating-python-and-c-with-boost-python-part-2</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python and C++ can be powerful complements to one another. C++ is great for performance-critical calculations, while Python is great for everything else. In this tutorial we’ll look at how to integrate Python and C++ using the Boost.Python library. You’ll learn techniques for easily developing hybrid systems that use the right language for the right task, resulting in better software.

&lt;p&gt;Description&lt;/p&gt;
Python and C++ are both popular languages that each bring a lot to the table. The languages also complement one another well: Python is high-level, dynamic, and easy to use while C++ is at-the-metal, static, and (in)famously tricky. There are times when there are real advantages to combining these disparate natures, and Python’s C API provides a strong interface for doing just that. Boost.Python is a C++ library that builds upon and improves Python’s C API to give users a simpler, more intuitive, and safer means to integrate Python and C++.

In this tutorial we’ll look at how to use Boost.Python to effectively bridge the Python/C++ boundary. We’ll start by briefly looking at the fundamentals of the Python C API since that defines the “ground rules”; this includes things like reference counting, the basic object model, and so forth. We’ll then quickly look at the Boost.Python API and show how it provides the same functionality as the underlying C API, but does so in a way that doesn’t obscure the real semantics of the Python language.

After this introduction, the rest of the tutorial will involve writing code to explore various elements of Boost.Python. We’ll focus on techniques for extending Python with C++, that is, writing Python modules in C++. Boost.Python can be used for embedding (i.e. invoking Python code from C++), but that involves a different set of techniques, and in practice most scientific Python developers are more interested in developing extensions.

The syllabus for the four-hour tutorial will be like this:

1. Introduction: C-API and Boost.Python basics

    Note that this can be reduced or eliminated of participants are already comfortable with the topics.

2. Hello World: Exposing a basic function

    In this section we’ll get a minimal Boost.Python module working. This will not only introduce students to the infrastructure of Boost.Python, but it will also give us a chance to make sure that everyone’s build environment is working.

3. Exposing functions

    In this section we’ll look at the details of exposing C++ functions to Python. The topics we’ll cover will include overloading (including Boost.Python’s auto-overload feature), default argument values, and a brief look at call policies.

4. Exposing classes

    Here we’ll look at how to expose C++ classes to Python. Topics will include the basic `class_&lt;T&gt;` template, member functions, data members, properties, inheritance, and virtual functions.

5. `boost::python::object`

    The `boost::python::object` class is Boost.Python’s primary interface to Python’s `PyObject` structure. Understanding how to work with this class is a key building-block for developing Python modules with Boost.Python. We’ll explore its API and features, including areas like attribute access, reference counting, and converting between Python and C++ objects.

6. Derived object types

    Boost.Python provides a number of `boost::python::object` subclasses for important Python classes like `list`, `dict`, and `tuple`. In this section we’ll look at these subclasses and how to use them in Boost.Python modules.

7. Enums

    Boost.Python provides `enum_&lt;T&gt;` for exposing C++ enums to Python. Python doesn’t have a notion of enums *per se*, but in this section we’ll explore how this template makes it straightforward to use C++ enums in Python in a simple and intuitive way.

8. Type conversion

    In this section we’ll look at Boost.Python’s support for doing automatic type-conversion across the Python/C++ boundary. We’ll see how you can register type-converters with Boost.Python which will be invoked whenever Boost.Python needs to convert a Python object to a C++ object or vice versa.

This is a fairly ambitious set of topics, and it’s possible that we won’t be able to cover them all. The topics are roughly in most-often-used to least-often-used order, however, so students will be sure to be exposed to the most important and relevant elements of the course.

Likewise, the four-hour format of the course means that we won’t be able to go into great depth on many topics. The main goal of the course, then, is to give students enough orientation and hands-on experience with Boost.Python that they can continue to learn on their own. Inter-language integration - especially between languages as dissimilar as C++ and Python - can be quite complex, but this tutorial will give students the grounding they need to successfully apply Boost.Python to their problems.  
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Austin Bingham</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2751/integrating-python-and-c-with-boost-python-part-2</guid><enclosure url="http://www.youtube.com/watch?v=GgtlExpPM1c" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/GgtlExpPM1c/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of John Kitchin</title><link>http://www.pyvideo.org/speaker/1040/john-kitchin/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1040/john-kitchin/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 13 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>A Success Story in Using Python in a Graduate Chemical Engineering Course</title><link>http://www.pyvideo.org/video/2800/a-success-story-in-using-python-in-a-graduate-che</link><description>&lt;p&gt;Abstract&lt;/p&gt;
I recently used Python in a new required graduate level chemical reaction engineering core course. The course was taken by 60 Master's students with a broad set of educational backgrounds and programming experience. Several factors contributed to the success of this course, which I will present and discuss. Based on my experience, it is feasible to use Python in engineering courses.
&lt;p&gt;Description&lt;/p&gt;
Historically, Matlab has been the primary math software tool used in our
courses on Chemical Engineering. Last year, I taught the first course in the
department using Python. In this talk I will present how I did that, and why
it was possible. The first step was demonstrating that Python + numpy +
scipy + matplotlib can solve all the problems we used to solve with Matlab.
This was documented in a project called PYCSE through a series of over one
hundred blog posts and organized in a web site ([1][]). Second, the
development of Python distributions such as Enthought Canopy made it
possible to students to easily install and use Python. I had to augment this
with some additional functionality with PYCSE ([2][]) which adds some
statistical analysis, differential equation solvers, numerical
differentiation functions and a publish function to convert Python scripts
to PDF files with captured output for grading. The only feature of Python
missing is a robust units package; several partial solutions exist, but none
solve all the needs of engineering calculations. Third, Emacs + org-mode
enabled me to write the course notes with integrated Python code and output.
These notes were provided to the students in PDF form, and annotated during
lecture using a tablet PC. Finally, the course was administered with box.com
and a custom python module to automate assignment collection and return
([3][]). An integrated grade widget in the PDF files that was created when
the students published their assignments was used to aggregate the grades
for the gradebook. I used an innovative homework schedule of one problem
every 2-4 days with rapid feedback to keep students using Python frequently.
We used timed quizzes and online exams to assess their learning. Overall,
the course was successful. Student evaluations of the course were as good as
courses that used other software packages. Based on my experiences, I will
continue to use Python and expand its role in engineering education.



[1]: http://kitchingroup.cheme.cmu.edu/pycse

[2]: http://github.com/jkitchin/pycse

[3]: https://github.com/jkitchin/box-course
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Kitchin</dc:creator><pubDate>Sun, 13 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2800/a-success-story-in-using-python-in-a-graduate-che</guid><enclosure url="http://www.youtube.com/watch?v=IsSMs-4GlT8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/IsSMs-4GlT8/hqdefault.jpg"></media:thumbnail></item><item><title>Emacs + org-mode + python in reproducible research; SciPy 2013 Presentation</title><link>http://www.pyvideo.org/video/2000/emacs-org-mode-python-in-reproducible-researc</link><description>&lt;p&gt;Abstract&lt;/p&gt;
We discuss the use of emacs + org-mode + python in enabling reproducible research.
&lt;p&gt;Description&lt;/p&gt;
Authors: Kitchin, John Carnegie Mellon University

Track: Reproducible Science

We will discuss the use of emacs + org-mode + python in enabling reproducible research. This combination of software enables researchers to intertwine narrative and mathematical text with figures and code that is executable within a document, with capture of the output. Portions of the document can be selectively exported to LaTeX, HTML, pdf and other other formats. We have used this method to produce technical manuscripts submitted for peer review in scientific journals, in the preparation of two e-books (about 300 pages each) on using python in scientific and engineering applications (http://jkitchin.github.com/pycse), and in using python in the modeling of the properties of materials with density functional theory (http://jkitchin.github.com/dft-book), as well as a python-powered blog at http://jkitchin.github.com. Our experience suggests all three components are critical for enabling reproducible research in practice: an extensible editor, a markup language that separates text, math, data and code, and an effective language such as python. We will show examples of the pros and cons of this particular implementation of editor/markup/code combination.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Kitchin</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2000/emacs-org-mode-python-in-reproducible-researc</guid><enclosure url="http://www.youtube.com/watch?v=1-dUkyn_fZA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/1-dUkyn_fZA/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Floris Bruynooghe</title><link>http://www.pyvideo.org/speaker/507/floris-bruynooghe/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/507/floris-bruynooghe/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Thu, 24 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Advanced Uses of py.test Fixtures</title><link>http://www.pyvideo.org/video/2982/advanced-uses-of-pytest-fixtures</link><description>&lt;p&gt;Abstract&lt;/p&gt;
One unique and powerful feature of py.test is the dependency injection
of test fixtures using function arguments.  This talk aims to walk
through py.test's fixture mechanism gradually introducing more complex
uses and features.  This should lead to an understanding of the power
of the fixture system and how to build complex but easily-managed test
suites using them.
&lt;p&gt;Description&lt;/p&gt;
This talks will assume some basic familiarity with the py.test
testing framework and explore only the fixture mechanism.  It will
build up more complex examples which will lead up to touching on
other plugin features of py.test.  It is expected people will be
familiar with python features like functions as first-class objects,
closures etc.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Floris Bruynooghe</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2982/advanced-uses-of-pytest-fixtures</guid><enclosure url="http://www.youtube.com/watch?v=IBC_dxr-4ps" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/IBC_dxr-4ps/hqdefault.jpg"></media:thumbnail></item><item><title>Exploring CPython's bytecode</title><link>http://www.pyvideo.org/video/1050/exploring-cpythons-bytecode</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Floris Bruynooghe - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
The CPython interpreter always compiles your source code to bytecode, usually
stored in .pyc files. This bytecode is then loaded and executed in the CPython
virtual machine.

This talk will explore the bytecode from the outside in. Starting with how to
read a .pyc file, following the steps the interpreter takes to arrive and a
usable python module. It then dives into the structure of the bytecode itself
and the principles of the virtual machine, detailing how the VM executes this
bytecode to do useful work.

Having seen all these details you should have a good idea of the various
innards of CPython and how to manipulate these to create weird, wonderful,
dangerous and occasional useful hacks.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Floris Bruynooghe</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1050/exploring-cpythons-bytecode</guid><enclosure url="http://www.youtube.com/watch?v=c08Ee2gQ3pY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/c08Ee2gQ3pY/hqdefault.jpg"></media:thumbnail></item><item><title>Exploring CPython's bytecode</title><link>http://www.pyvideo.org/video/1070/exploring-cpythons-bytecode-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Floris Bruynooghe - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
The CPython interpreter always compiles your source code to bytecode, usually
stored in .pyc files. This bytecode is then loaded and executed in the CPython
virtual machine.

This talk will explore the bytecode from the outside in. Starting with how to
read a .pyc file, following the steps the interpreter takes to arrive and a
usable python module. It then dives into the structure of the bytecode itself
and the principles of the virtual machine, detailing how the VM executes this
bytecode to do useful work.

Having seen all these details you should have a good idea of the various
innards of CPython and how to manipulate these to create weird, wonderful,
dangerous and occasional useful hacks.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Floris Bruynooghe</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1070/exploring-cpythons-bytecode-0</guid><enclosure url="http://www.youtube.com/watch?v=YeSn9aovFCg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/YeSn9aovFCg/hqdefault.jpg"></media:thumbnail></item></channel></rss>
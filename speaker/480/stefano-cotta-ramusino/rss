<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Stefano Cotta Ramusino</title><link>http://www.pyvideo.org/speaker/480/stefano-cotta-ramusino/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/480/stefano-cotta-ramusino/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Tue, 22 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>GNU/Linux Hardware Emulation with Python</title><link>http://www.pyvideo.org/video/3015/gnulinux-hardware-emulation-with-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Do want to test the connection code to a wifi/gsm network, but you haven't any dongle? Do you want to check your software notification when the battery is low, but you're testing your application on your desktop? Do you want to manipulate the data coming from a device, but you've lend it to someone else? *No problem, you can emulate all these with Python!*
&lt;p&gt;Description&lt;/p&gt;
With the kernel [inotify](http://en.wikipedia.org/wiki/Inotify "inotify") feature, the [D-Bus mocker library](https://launchpad.net/python-dbusmock "D-Bus mocker library") and the [udev monitoring](http://pyudev.readthedocs.org/en/latest/api/pyudev.html#pyudev.Monitor "udev monitoring") we try to detect the different events that occours when you're using a specific set of connected devices.

Then we try to mimic these devices investigating also the kernel drivers if necessary.

At the end we're ready to connect the simulation routines to our testing procedure.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Cotta Ramusino</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3015/gnulinux-hardware-emulation-with-python</guid><enclosure url="http://www.youtube.com/watch?v=UhLP0TJg5T8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/UhLP0TJg5T8/hqdefault.jpg"></media:thumbnail></item><item><title>JSON data + RML template = PDF report</title><link>http://www.pyvideo.org/video/1019/json-data-rml-template-pdf-report</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Stefano Cotta Ramusino - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
The main problem with reports generated in Python is how to separate the
content from the style using ReportLab library, because all informations
should be saved in a single source file that, by example, is impossible to
understand for your graphic designer.

So the solution: just modularizes all components you need and identify simple
container formats for your data input (JSON) and document template (ReportLab
RML).

Now with the power of Genshi and XInclude we will create dynamic templates
that include specific snippets (e.g., to generate on the fly a decent graph
with matplotlib or cairoplot to fill some lacks of ReportLab) and we will
detach the stylesheet from the template structure.

And at the end you can also have the internationalization service in the PDF
report generation!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Cotta Ramusino</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1019/json-data-rml-template-pdf-report</guid><enclosure url="http://www.youtube.com/watch?v=yf34NCtdxVI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/yf34NCtdxVI/hqdefault.jpg"></media:thumbnail></item><item><title>Scraping Techniques to Extract Advertisements from Web Pages</title><link>http://www.pyvideo.org/video/1016/scraping-techniques-to-extract-advertisements-fro</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mirko Urru,Stefano Cotta Ramusino - 24 June 2011 in "Track
Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Online Advertising is an emerging research field, at the intersection of
Information Retrieval, Machine Learning, Optimization, and Microeconomics. Its
main goal is to choose the right ads to present to a user engaged in a given
task, such as Sponsored Search Advertising or Contextual Advertising. The
former puts ads on the page returned from a Web search engine following a
query. The latter puts ads within the content of a generic, third party, Web
page. The ads themselves are selected and served by automated systems based on
the content displayed to the user.

Web scraping is the set of techniques used to automatically get some
information from a website instead of manually copying it. In particular,
we're interested in studying and adopting scraping techniques for: i.
accessing tags as object members ii. finding out tags whose name, contents or
attributes match selection criteria iii. accessing tag attributes by using a
dictionary-like syntax.

In this talk, we focus on the adoption of scraping techniques in the
contextual advertising field. In particular, we present a system aimed at
finding the most relevant ads for a generic web page p. Starting from p, the
system selects a set of its inlinks (i.e., the pages that link p) and extracts
the ads contained into them. Selection is performed querying the Google search
engine, whereas extraction is made by using suitable scraping techniques.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mirko Urru,Stefano Cotta Ramusino</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1016/scraping-techniques-to-extract-advertisements-fro</guid><enclosure url="http://www.youtube.com/watch?v=IL4o0HSGOsU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/IL4o0HSGOsU/hqdefault.jpg"></media:thumbnail></item><item><title>JSON data + RML template = PDF report</title><link>http://www.pyvideo.org/video/1132/json-data-rml-template-pdf-report-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Stefano Cotta Ramusino - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
The main problem with reports generated in Python is how to separate the
content from the style using ReportLab library, because all informations
should be saved in a single source file that, by example, is impossible to
understand for your graphic designer.

So the solution: just modularizes all components you need and identify simple
container formats for your data input (JSON) and document template (ReportLab
RML).

Now with the power of Genshi and XInclude we will create dynamic templates
that include specific snippets (e.g., to generate on the fly a decent graph
with matplotlib or cairoplot to fill some lacks of ReportLab) and we will
detach the stylesheet from the template structure.

And at the end you can also have the internationalization service in the PDF
report generation!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Cotta Ramusino</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1132/json-data-rml-template-pdf-report-0</guid><enclosure url="http://www.youtube.com/watch?v=9Cq_Zmr0OgM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/9Cq_Zmr0OgM/hqdefault.jpg"></media:thumbnail></item><item><title>Scraping Techniques to Extract Advertisements from Web Pages</title><link>http://www.pyvideo.org/video/1102/scraping-techniques-to-extract-advertisements-fr-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mirko Urru,Stefano Cotta Ramusino - 24 June 2011 in "Track
Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Online Advertising is an emerging research field, at the intersection of
Information Retrieval, Machine Learning, Optimization, and Microeconomics. Its
main goal is to choose the right ads to present to a user engaged in a given
task, such as Sponsored Search Advertising or Contextual Advertising. The
former puts ads on the page returned from a Web search engine following a
query. The latter puts ads within the content of a generic, third party, Web
page. The ads themselves are selected and served by automated systems based on
the content displayed to the user.

Web scraping is the set of techniques used to automatically get some
information from a website instead of manually copying it. In particular,
we're interested in studying and adopting scraping techniques for: i.
accessing tags as object members ii. finding out tags whose name, contents or
attributes match selection criteria iii. accessing tag attributes by using a
dictionary-like syntax.

In this talk, we focus on the adoption of scraping techniques in the
contextual advertising field. In particular, we present a system aimed at
finding the most relevant ads for a generic web page p. Starting from p, the
system selects a set of its inlinks (i.e., the pages that link p) and extracts
the ads contained into them. Selection is performed querying the Google search
engine, whereas extraction is made by using suitable scraping techniques.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mirko Urru,Stefano Cotta Ramusino</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1102/scraping-techniques-to-extract-advertisements-fr-0</guid><enclosure url="http://www.youtube.com/watch?v=cCKGqKTwfqI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/cCKGqKTwfqI/hqdefault.jpg"></media:thumbnail></item></channel></rss>
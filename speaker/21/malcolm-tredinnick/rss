<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Malcolm Tredinnick</title><link>http://www.pyvideo.org/speaker/21/malcolm-tredinnick/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/21/malcolm-tredinnick/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Wed, 05 Sep 2012 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Modeling challenges</title><link>http://www.pyvideo.org/video/42/djangocon-2010--modeling-challenges</link><description>&lt;p&gt;Description&lt;/p&gt;
Modeling Challenges

Presented by Malcolm Tredinnick

How would you model players, umpires and coaches in baseball data when the
same person can switch roles over the course of their life? How about servers
in racks with power boards attached (and cords running across the room to
remote boards)? Come along to see one approach to create minimal and well-
performing models for such real-life situations.

Abstract

The slightly over-simplified but useful rule of thumb when creating database
schema is “normalize until it hurts, [then] denormalize until it works.” If
only people didn’t skip the first step so often. Using a data modeling layer,
such as Django's models, doesn't absolve the system architects from the need
to create good design. It also doesn't require them to do so, since you can
get away with a lot of sub-optimality with many data sets.

The real difficulty here, though, is that the trade-off between text-book
ideal modeling and easy to use is difficult to judge and takes practice to
develop.

This talk will walk some interesting cases of model design that I've
encountered recently. I'll explain how I approached the problem and what we
ended up with. These will include:

  * Modeling people who might simultaneously play different roles in the system. For example, a person who was a baseball player and then became a coach — each role has different attributes attached to it. 
  * Modeling what appears to be a triangular dependency relationship with minimal redundancy in the data description and without needing really long query filters to access things. 
  * Handling date ranges (or other measured data) of different degrees of accuracy and precision. 

This won't be a talk on theoretical database design. Rather, concrete examples
of creating such designs and guiding the decisions by what might work best in
the final Django code. Hopefully, by listening to one person's approach
(mine!), people faced with similar challenges will have another possible
attack method in their toolbox.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Tredinnick</dc:creator><guid>http://www.pyvideo.org/video/42/djangocon-2010--modeling-challenges</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/42_modeling-challenges.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-ModelingChallenges314.png"></media:thumbnail></item><item><title>Multi-database patterns</title><link>http://www.pyvideo.org/video/38/djangocon-2010--multi-database-patterns</link><description>&lt;p&gt;Description&lt;/p&gt;
Multi-database patterns

Presented by Malcolm Tredinnick

A tour through four common "multiple database" usage patterns and how they can
be implemented and utilised with Django. We'll talk about the strengths and
weaknesses of each pattern and why you might not need any of them.

Abstract

There are a few good reasons a system might want to interact regularly with
multiple databases. “Because it’s what cool people do” is not one of those
reasons. Most multi-database usages fall into one of four main classes:

  * Separation by function. All data of one type in one database, all data of another type in some other database. 
  * Separation by sharding. Data of a particular type (e.g. user records) is split across multiple databases, each database holding a shard of the whole data. 
  * Data replication (separation by access). Some pieces of data are synchronized to multiple machines. Writes might go into one or more masters and reads normally come from the slaves. 
  * Data augmentation/shadowing. Data in one database is added to or entirely replaced by data from another database. Can happen during development when reading from a production snapshot whilst trying out changes to some tables or data only against a local database. 

Obviously, combinations of these classes are possible, such as replicated
sharded data in a huge site. There are tricks and traps to the way a developer
talks to each of these sorts of setups. I'll spend a few minutes showing
credible examples of the usage of each as well as when you might be over-
engineering by going that way. All four access patterns are possible in Django
1.2, with varying degrees of ease of use and I'll show the type of code
required in each case.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Tredinnick</dc:creator><guid>http://www.pyvideo.org/video/38/djangocon-2010--multi-database-patterns</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/38_multi-database-patterns.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-MultidatabasePatterns241.png"></media:thumbnail></item><item><title>PyConAU 2010: Displaying Australian datasets with Django</title><link>http://www.pyvideo.org/video/477/pyconau-2010--displaying-australian-datasets-with</link><description>&lt;p&gt;Description&lt;/p&gt;
Displaying Australian datasets with Django

Presented by Malcolm Tredinnick

The last 18 months or so in Australia have seen an increased number of
government and public sector organisations releasing datasets to the public
under reasonable reuse terms (often Creative Commons license). This talk will
take a couple of those local real-world datasets and create a minimal website
for remixing them, using Django as the underlying framework. The goals are to
provide a short walk through the process of importing and extracting such data
in practice, show how to incorporate Django's GIS features into an
application, as well as highlighting that real world is messy and so is the
data it produces. Working with datasets for journalism or research purposes,
or simply fun, requires a certain attention to detail.

Basic knowledge of Django is assumed, although the GIS components will be
introduced carefully as they are less familiar to many developers.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Tredinnick</dc:creator><guid>http://www.pyvideo.org/video/477/pyconau-2010--displaying-australian-datasets-with</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-au-2010/477_pyconau-2010-displaying-australian-datasets-with-django.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pyconau-DisplayingAustralianDatasetsWithDjango920.png"></media:thumbnail></item><item><title>The Dungeon Master's guide to Django's ORM</title><link>http://www.pyvideo.org/video/1380/the-dungeon-masters-guide-to-djangos-orm</link><description>&lt;p&gt;Abstract&lt;/p&gt;
If you've ever been curious about Django's ORM implementation, you will have
noticed the required learning curve. Some of the code is fairly complicated.
Other bits are worse. Here comes a 30 or 40 minute guided tour of the
uncharted realms: how the pieces fit together, where to look for things, why
the current design is what it is. A portion of this is my fault; I should
probably explain myself.


&lt;p&gt;Description&lt;/p&gt;
Django's database layer is a necessarily complicated piece of code. It is a
very powerful API that works more or less seamlessly across multiple database
storage systems, smoothing over many of the inconsistencies and implementation
differences that go with the territory. This is great for developers who use
Django.

It's a little less awesome for the maintainers of that code; working in that
environment is fairly difficult. Still, we all like a challenge. Problem is:
where to start? Coming to grips with the ORM code isn't easy. The code is well
written and documented, but the entry points are particularly well highlighted
and, really, the sheer mass of code is an obstacle to be overcome.

This talk will look at the various layers of the ORM, from the public
gateways, to the semi-public doors into the implementation, to the deeper
internals and down to the interaction with databases. In effect, following the
journey of a couple of adventurous young queries as they traverse the pathways
to bring back some data, smelted into just the right format.

The goal is to provide some kind of mental map of the code. Some tips for
orienting yourself in the future and how to examine new nooks and corners
without losing your mind. We obviously cannot cover everything, but let's go
over the common paths and show how the other pieces hang off that backbone.

Along the way, we'll put some of the details into historical perspective.
Getting inside the mind of previous adventurers might help understand why
things are the way they are.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Tredinnick</dc:creator><pubDate>Wed, 05 Sep 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1380/the-dungeon-masters-guide-to-djangos-orm</guid><enclosure url="http://www.youtube.com/watch?v=bgV39DlmZ2U" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/bgV39DlmZ2U/hqdefault.jpg"></media:thumbnail></item><item><title>Behaviour Driven Development</title><link>http://www.pyvideo.org/video/1004/behaviour-driven-development</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Writing software in an organisation or for ourselves, many people feel that
they "should" somehow be doing Test Driven Development (TDD) because
"everybody else" is and it's cool, somewhere between necessary and useful and
they heard testing was good. When informed that must of TDD isn't about
testing (despite the name!), confusion reigns. Behaviour Driven Development is
a different way of approaching the "how to validate your code" problem.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Tredinnick</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1004/behaviour-driven-development</guid><enclosure url="http://www.youtube.com/watch?v=XXHknWKuG2U" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/XXHknWKuG2U/hqdefault.jpg"></media:thumbnail></item><item><title>Panel: Python in the webs</title><link>http://www.pyvideo.org/video/985/panel-python-in-the-webs</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This will be a panel discussion wherein we wax philosophical about the state
of web frameworks in Python - talking about invention, reinvention, multitudes
of choice, how all of them suck, etc. Panelists will include Dylan Jay,
Malcolm Tredinnick, Russell Keith-Magee and Richard Jones.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dylan Jay,Malcolm Tredinnick,Richard Jones,Russell Keith-Magee</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/985/panel-python-in-the-webs</guid><enclosure url="http://www.youtube.com/watch?v=0aBCpu53z9Q" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/0aBCpu53z9Q/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of James Powell</title><link>http://www.pyvideo.org/speaker/1090/james-powell/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1090/james-powell/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 05 Oct 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>A CPython Eating Its Own Tail</title><link>http://www.pyvideo.org/video/3205/a-cpython-eating-its-own-tail</link><description>&lt;p&gt;Description&lt;/p&gt;
This is an expert-level talk that dives into CPython and discusses various ways to embed Python interpreters. It starts with the "very high level" embedding &amp; the "pure" embedding, shows a fairly novel "zero interpreter" embedding using Cython, a few attempts at a ctypes/cffi embedding, and builds to a finish with a source-filter embedding of a Python interpreter into itself.Â 

The purpose of this talk is to have some fun diving into CPython internals while looking practical approaches to embedding CPython interpreters into other (C/C++) processes. The final result, a Python 3 interpreter embedded into a Python 2 interpreter as an extension model, is novel but may be of fairly limited actual use. It is, however, pretty wild and a lot of fun!</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3205/a-cpython-eating-its-own-tail</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3205_A_CPython_Eating_Its_Own_Tail.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3205_A_CPython_Eating_Its_Own_Tail.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/OOMtmi7Annc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/OOMtmi7Annc/hqdefault.jpg"></media:thumbnail></item><item><title>Lightning Talks</title><link>http://www.pyvideo.org/video/3206/lightning-talks-11</link><description>&lt;p&gt;Description&lt;/p&gt;
 * (00:00) - Sasha Hart -- Make PyPI Fast
 * (0:01:36) - Sasha Hart -- Find Your Editor
 * (0:04:17) - Jeff Rush -- Ways to Call Out
 * (0:06:28) - Jeff Rush -- Weak References
 * (0:08:17) - James Powell -- Newton's Method
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell,Jeff Rush,Sasha Hart</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3206/lightning-talks-11</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3206_Lightning_Talks_3.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3206_Lightning_Talks_3.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/y5OWRJZut8E" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/y5OWRJZut8E/hqdefault.jpg"></media:thumbnail></item><item><title>Generators Will Free Your Mind</title><link>http://www.pyvideo.org/video/3170/generators-will-free-your-mind-0</link><description>&lt;p&gt;Description&lt;/p&gt;
What are generators and coroutines in Python? What additional conceptualisations do they offer, and how can we use them to better model problems? It's an intermediate-level talk around the core concept of generators with a lot of examples of not only neat things you can do with generators but also new ways to model and conceptualise problems.

Generators are one of the most notable features of Python, and they are a critical component of Python 3's driving focus on iterability as a core protocol. This talk introduces the basic concepts surrounding generators, generator expressions, and co-routines, then dives into ways that generators can improve our code: not just in terms of performance but also by offering us better ways to model our problems. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3170/generators-will-free-your-mind-0</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3170_Generators_Will_Free_Your_Mind.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3170_Generators_Will_Free_Your_Mind.webm" mime_type="video/webm"></media:content><media:content url="http://www.youtube.com/watch?v=jitWXLY5aj4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/jitWXLY5aj4/hqdefault.jpg"></media:thumbnail></item><item><title>The Pathetic Fallacy, or, an Engineering Approach to Programming</title><link>http://www.pyvideo.org/video/3284/the-pathetic-fallacy-or-an-engineering-approach</link><description>&lt;p&gt;Description&lt;/p&gt;
Software programming is a young discipline, placed somewhere between the rigorous world of mathematics and the pragmatic world of engineering. As evidence of its immaturity as a discipline, consider how frequently the same problems arise in the practice of writing a programme, and how these problems are unaccompanied by widely-disseminated conceptualisations or a commonly agreed-upon pathology or even a well-defined guiding philosophy and epistemology. In other words, we keep running into the same problems, and we often lack even a basis for discussing them (much less avoiding them)!</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Tue, 16 Sep 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3284/the-pathetic-fallacy-or-an-engineering-approach</guid><enclosure url="https://www.youtube.com/watch?v=2GA4y6_I7b4" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/2GA4y6_I7b4/hqdefault.jpg"></media:thumbnail></item><item><title>Panel: The challenges and frontiers of data science in Europe</title><link>http://www.pyvideo.org/video/3055/panel-the-challenges-and-frontiers-of-data-scien</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Drake,Ian Ozswald,James Powell,Kim Nilsoon,Valentin Haenel</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3055/panel-the-challenges-and-frontiers-of-data-scien</guid><enclosure url="http://video.ep14.c3voc.de/29257.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/29257.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=AtkDHrzgs7c" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/AtkDHrzgs7c/hqdefault.jpg"></media:thumbnail></item><item><title>Generators Will Free Your Mind</title><link>http://www.pyvideo.org/video/3078/generators-will-free-your-mind</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3078/generators-will-free-your-mind</guid><enclosure url="http://video.ep14.c3voc.de/20258.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20258.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=JasPrZqImxo" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/JasPrZqImxo/hqdefault.jpg"></media:thumbnail></item></channel></rss>
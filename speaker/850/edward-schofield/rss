<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Edward Schofield</title><link>http://www.pyvideo.org/speaker/850/edward-schofield/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/850/edward-schofield/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Tue, 04 Aug 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Interactive visualization for the curious</title><link>http://www.pyvideo.org/video/3995/interactive-visualization-for-the-curious</link><description>&lt;p&gt;Description&lt;/p&gt;
The workhorse plotting tool in Python for most of this century has been Matplotlib. It is stable, powerful, and comprehensive. But the plots it produces are (mostly) lifeless.

The web is now emerging as a superior visualization platform to traditional GUI backends, thanks to SVG, HTML5 Canvas, and WebGL, the speed and quality of modern browsers, and an explosion of high-quality visualization libraries in JavaScript. But what is the Python developer to do? Can we drive these browser-based capabilities from Python?

Thankfully, several recent Python projects are making progress toward this goal -- including MPLd3, Bokeh, and VisPy. These each have different goals and make different design decisions, but all three offer obvious advantages: being able to publish visualizations that users can interact with to extract more meaning from data.

This talk will give shiny demos and review these newer projects thoroughly vis-a-vis other libraries to help you decide whether, or when, to adopt one of them as your go-to visualization library. We will answer these questions: How does the performance compare? Would you need to rewrite all your plotting code? What would it take to integrate Bokeh or VisPy well with the current ecosystem of Python plotting libraries and data analysis tools? What is on the horizon for the different projects? Where do the Jupyter project's interactive widgets fit into this picture?

Come to hear a critical review about the past, present, and future of interactive visualization in Python.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Edward Schofield</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3995/interactive-visualization-for-the-curious</guid><enclosure url="https://www.youtube.com/watch?v=kr85Jytwy0s" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/kr85Jytwy0s/hqdefault.jpg"></media:thumbnail></item><item><title>How (not) to upgrade a platform by Edward Schofield</title><link>http://www.pyvideo.org/video/3125/how-not-to-upgrade-a-platform-by-edward-schofie</link><description>&lt;p&gt;Description&lt;/p&gt;
Guido admitted in his PyCon 2014 keynote that he will never again conduct a language transition like that from Python 2 to Python 3. The vast majority of Python code written in 2014 is still a ``SyntaxError`` on the latest version of Python. Some people have been wondering: will Python 3 ever take off? 

We have done some data mining from PyPI to reveal what progress the community has made so far toward migrating the long tail of packages towards Python 3 and which packages are most critical in the dependency graph of unported packages. We extrapolate from current growth rates about when (if ever) Python 3 support will reach a tipping point after which more new code will be written in Python 3 than Python 2.

We then share our perspective on mistakes made in the Python 3 transition and lessons that we can all learn from. The lessons apply to migrating any interface -- a language, a codebase, or a web API.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Edward Schofield</dc:creator><pubDate>Thu, 07 Aug 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3125/how-not-to-upgrade-a-platform-by-edward-schofie</guid><enclosure url="http://mirror.linux.org.au/pub/pycon-au/pyconau2014/50-out.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://mirror.linux.org.au/pub/pycon-au/pyconau2014/50-out.ogv" mime_type="video/ogg"></media:content><media:content url="http://www.youtube.com/watch?v=7tEcZ8eDKAc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/7tEcZ8eDKAc/hqdefault.jpg"></media:thumbnail></item><item><title>Modern scientific computing and big data analytics in Python</title><link>http://www.pyvideo.org/video/2199/modern-scientific-computing-and-big-data-analytic</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This is a tutorial on using the latest and most exciting tools in Python for scientific and engineering applications in 2013, with a focus on 'big data' applications. Using real-world data sets and a fully Python 3 environment, it will walk you through what's possible with modern tools like the machine-learning package scikit-learn, the image-processing package scikit-image, the Pandas toolkit for data analysis, and IPython-parallel. It will also review the upcoming generation of tools like Numba and Blaze.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Edward Schofield</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2199/modern-scientific-computing-and-big-data-analytic</guid><enclosure url="http://s3.us.archive.org/ndvpyconau2013/Modern_scientific_computing_an.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvpyconau2013/Modern_scientific_computing_an.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=hqOsfS3dP9w" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/hqOsfS3dP9w/hqdefault.jpg"></media:thumbnail></item><item><title>What's New in Python for Science and Engineering</title><link>http://www.pyvideo.org/video/1640/whats-new-in-python-for-science-and-engineering</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This is a tutorial about using Python for scientific and engineering purposes,
focusing on the latest and best tools available in 2012. It will walk you
through exploring a variety of interesting domains and problems using the
latest


&lt;p&gt;Description&lt;/p&gt;
This is a presentation about the latest and most exciting tools in Python for
scientific and engineering applications in 2012. It will walk you through
what's now possible with tools like the IPython Notebook, the Pandas toolkit
for data analysis, and IPython integration with SymPy, R, and Cython. It will
then give you an update on the status of Python 3 ports of major packages. It
will show why Python is an outstanding tool for science and engineering work,
and getting better.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Edward Schofield</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1640/whats-new-in-python-for-science-and-engineering</guid><enclosure url="http://www.youtube.com/watch?v=jCpLiT0QRRA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/jCpLiT0QRRA/hqdefault.jpg"></media:thumbnail></item></channel></rss>
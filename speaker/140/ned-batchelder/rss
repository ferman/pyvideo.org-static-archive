<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Ned Batchelder</title><link>http://www.pyvideo.org/speaker/140/ned-batchelder/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/140/ned-batchelder/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 11 Apr 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>PyCon 2009: A Whirlwind Excursion through Writing a C Extension (#68)</title><link>http://www.pyvideo.org/video/230/pycon-2009--a-whirlwind-excursion-through-writing</link><description>&lt;p&gt;Description&lt;/p&gt;
  
[VIDEO HAS ISSUES: Ambient mic used, some echoing] Everyone's heard of C
extensions to Python, but few have ventured into those murky depths. This is a
quick overview of how to write a C extension, complete with highlights of the
C API, memory management, error handling, and type creation. Whether you want
to speed up your Python, integrate with legacy code, contribute to Python's
core, or just learn a little about how it all works under the covers, you will
enjoy this trip through unfamiliar territory. I guarantee you will return
safely.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><guid>http://www.pyvideo.org/video/230/pycon-2009--a-whirlwind-excursion-through-writing</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2009/230_pycon-2009-a-whirlwind-excursion-through-writing-a-c-extension-68.mp4" length="168747462" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-AWhirlwindExcursionThroughWritingACExtension305-36.jpg"></media:thumbnail></item><item><title>Facts and Myths about Python names and values</title><link>http://www.pyvideo.org/video/3466/facts-and-myths-about-python-names-and-values</link><description>&lt;p&gt;Description&lt;/p&gt;
The behavior of names and values in Python can be confusing. Like many parts of Python, it has an underlying simplicity that can be hard to discern, especially if you are used to other programming languages. Here I'll explain how it all works, and present some facts and myths along the way.  Call-by-reference? Call-by-value? The answer will be clear!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3466/facts-and-myths-about-python-names-and-values</guid><enclosure url="https://www.youtube.com/watch?v=_AEJHKGk9ns" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/_AEJHKGk9ns/hqdefault.jpg"></media:thumbnail></item><item><title>Getting Started Testing</title><link>http://www.pyvideo.org/video/2674/getting-started-testing</link><description>&lt;p&gt;Abstract&lt;/p&gt;
If you've never written tests before, you probably know you *should*, but view the whole process as a bureaucratic paperwork nightmare to check off on your ready-to-ship checklist. This is the wrong way to approach testing. Tests are a solution to a problem that is important to you: does my code work? I'll show how Python tests are written, and why.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2674/getting-started-testing</guid><enclosure url="http://www.youtube.com/watch?v=FxSsnHeWQBY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/FxSsnHeWQBY/hqdefault.jpg"></media:thumbnail></item><item><title>XBlock: Courseware Components from edX</title><link>http://www.pyvideo.org/video/1843/xblock-courseware-components-from-edx</link><description>&lt;p&gt;Abstract&lt;/p&gt;
edX.org is building XBlock, an open-source component architecture for courseware.  It provides API's for creating course components of all kinds. Possible uses include: simple controls, new types of problems, new quiz structures, interactive simulations, and new navigation techniques.  We're hoping to expand awareness of XBlock, and also to hear from potential users about their needs.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Sun, 17 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1843/xblock-courseware-components-from-edx</guid><enclosure url="https://www.youtube.com/watch?v=dTS-nsf7d3Q" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/dTS-nsf7d3Q/hqdefault.jpg"></media:thumbnail></item><item><title>Loop like a native: while, for, iterators, generators</title><link>http://www.pyvideo.org/video/1758/loop-like-a-native-while-for-iterators-genera</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python provides powerful primitives for iterating over your data in ways that let you express yourself clearly and directly.  But even programmers familiar with the tools don't use them as fully as they could.  This talk will cover Python's iteration tools, from basic loops to generators and how to add iteration to your own classes.  Come learn how looping was meant to be!
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1758/loop-like-a-native-while-for-iterators-genera</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Loop_like_a_native_while_for_i.mp4?Signature=QBWheBrJPUhh7nMxjMvj%2Brszqbc%3D&amp;Expires=1363663628&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Loop_like_a_native_while_for_i.mp4?Signature=QBWheBrJPUhh7nMxjMvj%2Brszqbc%3D&amp;Expires=1363663628&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=EnSu9hHGq5o" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/EnSu9hHGq5o/hqdefault.jpg"></media:thumbnail></item><item><title>Pragmatic Unicode, or, How do I stop the pain?</title><link>http://www.pyvideo.org/video/948/pragmatic-unicode-or-how-do-i-stop-the-pain</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python has great Unicode support, but it's still your responsibility to handle
it properly. I'll do a quick overview of what Unicode is, but only enough to
get your program working properly. I'll describe strategies to make your code
work, and keep it working, without getting too far afield in Unicode la-la-
land.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/948/pragmatic-unicode-or-how-do-i-stop-the-pain</guid><enclosure url="https://www.youtube.com/watch?v=sgHbC6udIqc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/sgHbC6udIqc/hqdefault.jpg"></media:thumbnail></item><item><title>Python-Aware Python</title><link>http://www.pyvideo.org/video/447/pycon-2011--python-aware-python</link><description>&lt;p&gt;Description&lt;/p&gt;
Python-Aware Python

Presented by Ned Batchelder

Python provides many features for introspecting, analyzing, parsing,
compiling, and otherwise grokking Python code. This talk will cover a number
of the techniques for writing Python-Aware Python, and will hopefully inspire
you to build the next great Python tool.

Abstract

Python provides many features for introspecting, analyzing, parsing,
compiling, and otherwise grokking Python code. These modules and techniques
provide the foundation for developer's tools such as autocompletion IDE's,
code analysis tools, test runners, profilers, and so on.

I'll delve into a number of the common techniques used to write Python-Aware
Python. Each has its area of applicability and its strengths and weaknesses.
I'll demonstrate small samples that show how those techniques underlie the
tools we all know and love.

The world of Python tools is ready for new exploration. This talk will give
you the foundation you need to write the next great Python-aware application.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/447/pycon-2011--python-aware-python</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2011/447_python-aware-python.mp4" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2011PythonAwarePython331.png"></media:thumbnail></item><item><title>Tests and Testability (#188)</title><link>http://www.pyvideo.org/video/310/pycon-2010--tests-and-testability---188</link><description>&lt;p&gt;Description&lt;/p&gt;
Tests and Testability

  
Presented by Ned Batchelder

  
Testing software is difficult. Large complex systems don't lend themselves
naturally to automated testing. This isn't just because they are large, it's
because developers often don't consider how testable their code is.
Testability is as important as all the other -ilities in your code
(portability, maintainability, efficiency, etc).

  
Testability is a characteristic of your code that makes it easier to test.
Increased testability can give you better tests, but it also gives you just
plain better code. Improving testability generally means considering the
interfaces to your internal modules and improving them to provide better
modularity. This improvement often has benefits in your product code.

  
I'll discuss specific examples to demonstrate how code can be made more
testable. Mocks, dependency injection, and crisp API design are just a few of
the techniques that can improve your code's testability and make you a happier
person.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/310/pycon-2010--tests-and-testability---188</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/310_tests-and-testability-188.ogv" length="163421188" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/310_tests-and-testability-188.ogv" fileSize="163421188" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/310_tests-and-testability-188.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TestsAndTestability188726.png"></media:thumbnail></item></channel></rss>
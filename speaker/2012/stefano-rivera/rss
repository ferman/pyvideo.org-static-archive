<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Stefano Rivera</title><link>http://www.pyvideo.org/speaker/2012/stefano-rivera/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/2012/stefano-rivera/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 02 Oct 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>The Road to Continuous Deployment</title><link>http://www.pyvideo.org/video/3935/the-road-to-continuous-deploys</link><description>&lt;p&gt;Description&lt;/p&gt;
How do we get work from a developer's laptop to a production server?
How do we do this repeatedly? How do we avoid releasing bad patches? How do we get changes out as fast as possible? And what happens to requests during a deploy? If you want continuous deployment, you have to solve these problems.

How do you handle configuration, so that the same code can run in multiple environment? From a developers laptop, to QA environments, to production. What about the quirks of each machine in production?

This talk will look at the path Yola took, with Jenkins, yoconfigurator, yodeploy. It's by no means a complete solution, but it's good enough that I rarely find myself working on it, these days.

We will cover the pros and cons of each path one can take. The whole platform architecture is really affected by this. We can talk about: Bare hardware, virtualization, containerization, build systems, linux distributions packages, language package ecosystems, configuration management systems, notifications, secret distribution, and much more.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Rivera</dc:creator><pubDate>Fri, 02 Oct 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3935/the-road-to-continuous-deploys</guid><enclosure url="http://youtu.be/3u6ZH4ntp-0" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/3u6ZH4ntp-0/hqdefault.jpg"></media:thumbnail></item><item><title>Thursday Lightning Talks</title><link>http://www.pyvideo.org/video/3941/thursday-lightning-talks</link><description>&lt;p&gt;Description&lt;/p&gt;
* [(0:00:00)](http://youtu.be/DiaE9GCJ0nM?t=0h0m0s) **Racy interrupt handling** by Bruce Merry
* [(0:06:00)](http://youtu.be/DiaE9GCJ0nM?t=0h6m0s) **Vulture in Python** by Philip Sterne
* [(0:11:09)](http://youtu.be/DiaE9GCJ0nM?t=0h11m9s) **Edx** by Carl Dawson
* [(0:17:39)](http://youtu.be/DiaE9GCJ0nM?t=0h17m39s) **AST linting** by Bryn Divey
* [(0:24:33)](http://youtu.be/DiaE9GCJ0nM?t=0h24m33s) **Numpy in Anger! ** by Laura Richter
* [(0:29:28)](http://youtu.be/DiaE9GCJ0nM?t=0h29m28s) **How to screw up loading CSVs in Python ** by James Saunders
* [(0:33:34)](http://youtu.be/DiaE9GCJ0nM?t=0h33m34s) **PyQuery** by Nicholas Spagnoletti
* [(0:37:27)](http://youtu.be/DiaE9GCJ0nM?t=0h37m27s) **Debian Python moves kicking and screaming to Git** by Stefano Rivera</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruce Merry,Bryn Divey,Carl Dawson,James Saunders,Laura Richter,Nicholas Spagnoletti,Philip Sterne,Stefano Rivera</dc:creator><pubDate>Thu, 01 Oct 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3941/thursday-lightning-talks</guid><enclosure url="http://youtu.be/DiaE9GCJ0nM" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/DiaE9GCJ0nM/hqdefault.jpg"></media:thumbnail></item><item><title>Python in Debian &amp; Ubuntu</title><link>http://www.pyvideo.org/video/3843/python-in-debian-ubuntu</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This talk is aimed at people who maintain Python libraries and also users of Debian packaged libraries. (Wherever I say Debian in this abstract, it applies to Ubuntu too). The talk should explain a bit about how and why libraries are packaged in Debian, and how to help maintain (or contribute) packages you care about.
We'll cover a bit of history of the Python stacks in Debian and how packaged modules are provided, and who does the work. For context, we'll take a quick detour into Debian packaging in general, and the Debian project's lifecycle.
Debian recently gained a new Python packaging tool, pybuild. This finally makes it easy to package the same library for Python 2, 3, and even PyPy. So, we'll have a look at what it does, and some example packaging.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Rivera</dc:creator><pubDate>Fri, 03 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3843/python-in-debian-ubuntu</guid><enclosure url="http://archive.org/download/pyconza2014-python-in-debian/11%20a%20Python%20in%20Debian%20%26%20Ubuntu-.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://archive.org/download/pyconza2014-python-in-debian/11%20a%20Python%20in%20Debian%20%26%20Ubuntu-.ogv" mime_type="video/ogg"></media:content><media:content url="http://archive.org/download/pyconza2014-python-in-debian/11%20a%20Python%20in%20Debian%20%26%20Ubuntu-.mp4" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://archive.org/download/pyconza2014-python-in-debian/pyconza2014-python-in-debian.thumbs/11%20a%20Python%20in%20Debian%20%26%20Ubuntu-_000150.jpg"></media:thumbnail></item><item><title>Python in Debian and Ubuntu</title><link>http://www.pyvideo.org/video/3921/python-in-debian-and-ubuntu</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Rivera</dc:creator><pubDate>Thu, 03 Oct 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3921/python-in-debian-and-ubuntu</guid><enclosure url="http://archive.org/download/pyconza2013-python-in-debian/pyconza2013-python-in-debian.ogv" length="None" type="video/ogg"></enclosure><media:thumbnail url="http://archive.org/download/pyconza2013-python-in-debian/pyconza2013-python-in-debian.thumbs/pyconza2013-python-in-debian_002010.jpg"></media:thumbnail></item></channel></rss>
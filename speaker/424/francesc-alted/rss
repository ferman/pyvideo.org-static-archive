<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Francesc Alted</title><link>http://www.pyvideo.org/speaker/424/francesc-alted/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/424/francesc-alted/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 10 Apr 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Closing Keynote - Francesc Alted, UberResearch GmbH</title><link>http://www.pyvideo.org/video/3533/closing-keynote-francesc-alted-uberresearch-gm</link><description>&lt;p&gt;Description&lt;/p&gt;
Teacher, developer and consultant in a wide variety of business applications. Particularly interested in the field of very large databases, with special emphasis in squeezing the last drop of performance out of computer as whole, i.e. not only the CPU, but the memory and I/O subsystems.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesc Alted</dc:creator><pubDate>Fri, 10 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3533/closing-keynote-francesc-alted-uberresearch-gm</guid><enclosure url="https://www.youtube.com/watch?v=mh_h9_UyEss" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/mh_h9_UyEss/hqdefault.jpg"></media:thumbnail></item><item><title>Data Oriented Programming</title><link>http://www.pyvideo.org/video/3073/data-oriented-programming</link><description>&lt;p&gt;Description&lt;/p&gt;
Computers have traditionally been thought as tools for performing computations with numbers. Of course, its name in English has a lot to do with this conception, but in other languages, like the french 'ordinateur' (which express concepts more like sorting or classifying), one can clearly see the other side of the coin: computers can also be used to extract (usually new) information from data. Storage, reduction, classification, selection, sorting, grouping, among others, are typical operations in this 'alternate' goal of computers, and although carrying out all these tasks does imply doing a lot of computations, it also requires thinking about the computer as a different entity than the view offered by the traditional von Neumann architecture (basically a CPU with memory). In fact, when it is about programming the data handling efficiently, the most interesting part of a computer is the so-called hierarchical storage, where the different levels of caches in CPUs, the RAM memory, the SSD layers (there are several in the market already), the mechanical disks and finally, the network, are pretty much more important than the ALUs (arithmetic and logical units) in CPUs. In data handling, techniques like data deduplication and compression become critical when speaking about dealing with extremely large datasets. Moreover, distributed environments are useful mainly because of its increased storage capacities and I/O bandwidth, rather than for their aggregated computing throughput. During my talk I will describe several programming paradigms that should be taken in account when programming data oriented applications and that are usually different than those required for achieving pure computational throughput. But specially, and in a surprising turnaround, how the amazing amount of computational power in modern CPUs can also be useful for data handling as well.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesc Alted</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3073/data-oriented-programming</guid><enclosure url="http://video.ep14.c3voc.de/20260.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20260.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=KhJSg_rSzj8" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/KhJSg_rSzj8/hqdefault.jpg"></media:thumbnail></item><item><title>Out-of-Core Columnar Datasets</title><link>http://www.pyvideo.org/video/2946/out-of-core-columnar-datasets</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Tables are a very handy data structure to store
datasets to perform data analysis (filters, groupings, sortings,
alignments...).

But it turns out that *how the tables are actually implemented* makes a large impact on how they perform.

Learn what you can expect from the current tabular offerings in the Python ecosystem.
&lt;p&gt;Description&lt;/p&gt;
It is a fact: we just entered in the Big Data era.  More sensors, more
computers, and being more evenly distributed throughout space and time
than ever, are forcing data analyists to navigate through oceans of
data before getting insights on what this data means.

Tables are a very handy and spreadly used data structure to store
datasets so as to perform data analysis (filters, groupings, sortings,
alignments...).  However, the actual table implementation, and
especially, whether data in tables is stored row-wise or column-wise,
whether the data is chunked or sequential, whether data is compressed or not,
among other factors, can make a lot of difference depending on the
analytic operations to be done.

My talk will provide an overview of different libraries/systems in the
Python ecosystem that are designed to cope with tabular data, and how
the different implementations perform for different operations.  The
libraries or systems discussed are designed to operate either with
on-disk data ([PyTables] [1], [relational databases] [2], [BLZ] [3],
[Blaze] [4]...) as well as in-memory data containers ([NumPy] [5],
[DyND] [6], [Pandas] [7], [BLZ] [3], [Blaze] [4]...).

A special emphasis will be put in the on-disk (also called
out-of-core) databases, which are the most commonly used ones for
handling extremely large tables.

The hope is that, after this lecture, the audience will get a better
insight and a more informed opinion on the different solutions for
handling tabular data in the Python world, and most especially, which
ones adapts better to their needs.

[1]: http://www.pytables.org
[2]: http://en.wikipedia.org/wiki/Relational_database
[3]: http://blz.pydata.org
[4]: http://blaze.pydata.org
[5]: http://www.numpy.org/
[6]: https://github.com/ContinuumIO/dynd-python
[7]: http://pandas.pydata.org/
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesc Alted</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2946/out-of-core-columnar-datasets</guid><enclosure url="http://www.youtube.com/watch?v=-lKV4zC1gss" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/-lKV4zC1gss/hqdefault.jpg"></media:thumbnail></item><item><title>Boosting NumPy with Numexpr and Cython</title><link>http://www.pyvideo.org/video/962/boosting-numpy-with-numexpr-and-cython</link><description>&lt;p&gt;Abstract&lt;/p&gt;
In this video from the 2012 PyData Workshop Francesc Alted from Continuum
Analytics is going to show you how you can boost NumPy with Numexpr and
Cython.


&lt;p&gt;Description&lt;/p&gt;
Topics covered include:

  * The era of Big Data 
  * NumPy and its ecosystem 
  * Numexpr 
  * Cython 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesc Alted</dc:creator><pubDate>Fri, 02 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/962/boosting-numpy-with-numexpr-and-cython</guid><enclosure url="http://www.youtube.com/watch?v=J3-oN_TulTg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/J3-oN_TulTg/hqdefault.jpg"></media:thumbnail></item></channel></rss>
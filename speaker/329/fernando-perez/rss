<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Fernando Pérez</title><link>http://www.pyvideo.org/speaker/329/fernando-perez/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/329/fernando-perez/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 08 Aug 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Open Source and Open Science: how Python and its community made me a better scientist </title><link>http://www.pyvideo.org/video/3269/open-source-and-open-science-pycon-apac-2014</link><description>&lt;p&gt;Description&lt;/p&gt;
I will discuss the intersection of Open Source and scientific research, focusing on the positive impact that Open Source tools and ideas, and the Python community in particular, have had on the world of science. Scientific research is at a crossroads, under increasing pressure to justify itself to society at large and with very real questions being asked about the reproducibility of scientific results and access to the products of science. The Open Source community have created both technical and cultural solutions to similar problems that we as scientists can learn from. The Python language has also made major inroads into research and education, helping foster a culture of better computational research and opening up a space for a lot of creativity at the intersection of science and computing.


About the speaker

Fernando Pérez is a research scientist at UC Berkeley, working at the intersection of high-level scientific computing with open tools and brain imaging. He started the IPython project in 2001, while a graduate student in Physics at CU Boulder. He continues to lead a talented team (who do all the hard work) to develop IPython as the interface between the humans at the keyboard and the bits in the machine.

He is a founding member of NumFOCUS, a PSF member, and received the 2012 Award for the Advancement of Free Software for IPython and his contributions to scientific Python. He is a founding investigator of the Berkeley Institute for Data Science, created in 2013.

When he can get away from a computer, Fernando tries to enjoy the mountains and the outdoors hiking, backpacking and climbing. For more information, see &lt;http://fperez.org&gt;.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Fri, 08 Aug 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3269/open-source-and-open-science-pycon-apac-2014</guid><enclosure url="https://www.youtube.com/watch?v=ZD5n9s8PGtI" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/ZD5n9s8PGtI/hqdefault.jpg"></media:thumbnail></item><item><title>The Berkeley Institute for Data Science a place for people like us</title><link>http://www.pyvideo.org/video/2820/the-berkeley-institute-for-data-science-a-place-f</link><description>&lt;p&gt;Abstract&lt;/p&gt;
I will describe the new Berkeley Institute for Data Science (BIDS), part of a collaboration with UW and NYU funded by the Moore and Sloan Foundations. It will be a space for the open and interdisciplinary work that is typical of the SciPy community.  In the creation of BIDS, the role of open source scientific tools for Data Science, and specifically the SciPy ecosystem, played an important role.
&lt;p&gt;Description&lt;/p&gt;
In 2013, the Gordon and Betty Moore and the Alfred P. Sloan foundations [awarded](http://www.moore.org/programs/science/data-driven-discovery/data-science-environments) UC Berkeley, U. Washington and NYU for a collaborative, $38M in support of a 5-year initiative to create novel environments for Data Science.  This project was driven by the recognition that computing and data analysis have now become the backbone of all scientific research, and yet the teams, collaborations and individuals that make this possible typically encounter significant barriers in today's academic environments.

The SciPy community is one of the poster children of this issue: many of our members live "officially" in traditional, discipline-oriented scientific research, and yet we have committed time and effort to creating an open ecosystem of tools for research.  As we all know, this is often done with little support from the standard incentive structures of science, be it publication venues, funding agencies or hiring, tenure and promotion committees.

The launch of this initiative is an important moment, as it signals the recognition of this problem by important and well-respected foundations in science.  At UC Berkeley, we took this opportunity to create the new [Berkeley Institute for Data Science](http://vcresearch.berkeley.edu/datascience/bids-launch-dec-12). In this effort, the open source tools of the SciPy community will play a central role.

In this talk, I will describe the larger context in which this initiative has been created, as well as the scientific scope of our team, our goals, and the opportunities that we will try to provide with this space.  We expect that this new institute, together with our partners at UW and NYU, will play an important role in support of the great work of the SciPy ecosystem.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Thu, 10 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2820/the-berkeley-institute-for-data-science-a-place-f</guid><enclosure url="http://www.youtube.com/watch?v=q5yAy4WWTyU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/q5yAy4WWTyU/hqdefault.jpg"></media:thumbnail></item><item><title>Interactive Parallel Computing with IPython Part 1</title><link>http://www.pyvideo.org/video/2738/interactive-parallel-computing-with-ipython-part</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Learn about interactive parallel computing in IPython.parallel, with examples including parallel image processing, machine learning, and physical simulations. IPython provides an easy way to interact with your multicore laptop or compute cluster.
&lt;p&gt;Description&lt;/p&gt;
IPython provides tools for interactive exploration of code and data. IPython.parallel is the part of IPython that enables an interactive model for parallel execution, and aims to make distributing your work on a multicore computer, local clusters or cloud services such as AWS or MS Azure simple and straightforward. The tutorial will cover how to do interactive and asynchronous parallel computing with IPython, and how to get the most out of your IPython cluster. Some of IPython’s novel interactive features will be demonstrated, such as automatically parallelizing code with magics in the IPython Notebook and interactive debugging of remote execution. Examples covered will include parallel image processing, machine learning, and physical simulations, with exercises to solve along the way.

* Introduction to IPython.parallel
   * Deploying IPython
   * Using DirectViews and LoadBalancedViews
   * The basic model for execution
* Getting to know your IPython cluster:
   * Working with remote namespaces
   * AsyncResult: the API for asynchronous execution
   * Interacting with incomplete results. Remember, it’s about interactivity
   * Interactive parallel plotting
* More advanced topics:
   * Using IPython.parallel with traditional (MPI) parallel programs
   * Debugging parallel code
   * Minimizing data movement
   * Task dependencies
   * Caveats and tuning tips for IPython.parallel</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez,Min RK</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2738/interactive-parallel-computing-with-ipython-part</guid><enclosure url="http://www.youtube.com/watch?v=y4hgalfhc1Y" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/y4hgalfhc1Y/hqdefault.jpg"></media:thumbnail></item><item><title>Interactive Parallel Computing with IPython Part 2</title><link>http://www.pyvideo.org/video/2740/interactive-parallel-computing-with-ipython-part-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Learn about interactive parallel computing in IPython.parallel, with examples including parallel image processing, machine learning, and physical simulations. IPython provides an easy way to interact with your multicore laptop or compute cluster.
&lt;p&gt;Description&lt;/p&gt;
IPython provides tools for interactive exploration of code and data. IPython.parallel is the part of IPython that enables an interactive model for parallel execution, and aims to make distributing your work on a multicore computer, local clusters or cloud services such as AWS or MS Azure simple and straightforward. The tutorial will cover how to do interactive and asynchronous parallel computing with IPython, and how to get the most out of your IPython cluster. Some of IPython’s novel interactive features will be demonstrated, such as automatically parallelizing code with magics in the IPython Notebook and interactive debugging of remote execution. Examples covered will include parallel image processing, machine learning, and physical simulations, with exercises to solve along the way.

* Introduction to IPython.parallel
   * Deploying IPython
   * Using DirectViews and LoadBalancedViews
   * The basic model for execution
* Getting to know your IPython cluster:
   * Working with remote namespaces
   * AsyncResult: the API for asynchronous execution
   * Interacting with incomplete results. Remember, it’s about interactivity
   * Interactive parallel plotting
* More advanced topics:
   * Using IPython.parallel with traditional (MPI) parallel programs
   * Debugging parallel code
   * Minimizing data movement
   * Task dependencies
   * Caveats and tuning tips for IPython.parallel</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez,Min RK</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2740/interactive-parallel-computing-with-ipython-part-0</guid><enclosure url="http://www.youtube.com/watch?v=-9ijnHPCYhY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/-9ijnHPCYhY/hqdefault.jpg"></media:thumbnail></item><item><title>Interactive Parallel Computing with IPython Part 3</title><link>http://www.pyvideo.org/video/2741/interactive-parallel-computing-with-ipython-part-1</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Learn about interactive parallel computing in IPython.parallel, with examples including parallel image processing, machine learning, and physical simulations. IPython provides an easy way to interact with your multicore laptop or compute cluster.
&lt;p&gt;Description&lt;/p&gt;
IPython provides tools for interactive exploration of code and data. IPython.parallel is the part of IPython that enables an interactive model for parallel execution, and aims to make distributing your work on a multicore computer, local clusters or cloud services such as AWS or MS Azure simple and straightforward. The tutorial will cover how to do interactive and asynchronous parallel computing with IPython, and how to get the most out of your IPython cluster. Some of IPython’s novel interactive features will be demonstrated, such as automatically parallelizing code with magics in the IPython Notebook and interactive debugging of remote execution. Examples covered will include parallel image processing, machine learning, and physical simulations, with exercises to solve along the way.

* Introduction to IPython.parallel
   * Deploying IPython
   * Using DirectViews and LoadBalancedViews
   * The basic model for execution
* Getting to know your IPython cluster:
   * Working with remote namespaces
   * AsyncResult: the API for asynchronous execution
   * Interacting with incomplete results. Remember, it’s about interactivity
   * Interactive parallel plotting
* More advanced topics:
   * Using IPython.parallel with traditional (MPI) parallel programs
   * Debugging parallel code
   * Minimizing data movement
   * Task dependencies
   * Caveats and tuning tips for IPython.parallel</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez,Min RK</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2741/interactive-parallel-computing-with-ipython-part-1</guid><enclosure url="http://www.youtube.com/watch?v=U5mhpKkIx2Y" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/U5mhpKkIx2Y/hqdefault.jpg"></media:thumbnail></item><item><title>Keynote - Fernando Pérez</title><link>http://www.pyvideo.org/video/2683/keynote-fernando-perez</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2683/keynote-fernando-perez</guid><enclosure url="http://www.youtube.com/watch?v=2NSbuKFYyvc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/2NSbuKFYyvc/hqdefault.jpg"></media:thumbnail></item><item><title>IPython in depth: high productivity interactive and parallel python</title><link>http://www.pyvideo.org/video/2577/ipython-in-depth-high-productivity-interactive-a-1</link><description>&lt;p&gt;Abstract&lt;/p&gt;
IPython provides tools for interactive and parallel computing that are widely used in scientific computing, but can benefit any Python developer.

 We will show how to use IPython in different ways, as: an interactive shell, an embedded shell, a graphical console, a network-aware VM in GUIs, a web-based notebook with code, graphics and rich HTML, and a high-level framework for parallel computing.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2577/ipython-in-depth-high-productivity-interactive-a-1</guid><enclosure url="http://www.youtube.com/watch?v=XFw1JVXKJss" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/XFw1JVXKJss/hqdefault.jpg"></media:thumbnail></item><item><title>IPython in-depth: high-productivity interactive and parallel python</title><link>http://www.pyvideo.org/video/1652/ipython-in-depth-high-productivity-interactive-a-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
IPython provides tools for interactive and parallel computing that are widely used in scientific computing, but can benefit any Python developer.

We will show how to use IPython in different ways, as: an interactive shell, an embedded shell, a graphical console, a network-aware VM in GUIs, a web-based notebook with code, graphics and rich HTML, and a high-level framework for parallel computing.

All materials for this tutorial can be found on our [github
repository](https://github.com/ipython/ipython-in-depth)
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Granger,Fernando Pérez,Min RK</dc:creator><pubDate>Wed, 13 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1652/ipython-in-depth-high-productivity-interactive-a-0</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/IPython_indepth_highproductivi.mp4?Signature=6fLwDBJMmt65mqZPzjZlMpQhV2w%3D&amp;Expires=1364728655&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/IPython_indepth_highproductivi.mp4?Signature=6fLwDBJMmt65mqZPzjZlMpQhV2w%3D&amp;Expires=1364728655&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=bP8ydKBCZiY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/bP8ydKBCZiY/hqdefault.jpg"></media:thumbnail></item><item><title>Science And Python: retrospective of a (mostly) successful decade </title><link>http://www.pyvideo.org/video/1605/science-and-python-retrospective-of-a-mostly-s</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The relation between Python and scientific work is a long one, and in the last
10+ years it has turned into a major success story. I will review this process
from the vantage point of IPython’s role, and will look into the challenges
ahead for Python to remain a leader in this space.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Sun, 11 Nov 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/1605/science-and-python-retrospective-of-a-mostly-s</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/pyconca/pyconca2012/science_and_python_retrospect.mp4?Signature=9sjjDQPcQZXy47Saoh6dlA4bPSY%3D&amp;Expires=1352835181&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/pyconca/pyconca2012/science_and_python_retrospect.mp4?Signature=9sjjDQPcQZXy47Saoh6dlA4bPSY%3D&amp;Expires=1352835181&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=F4rFuIb1Ie4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i3.ytimg.com/vi/F4rFuIb1Ie4/hqdefault.jpg"></media:thumbnail></item><item><title>IPython: tools for the entire lifecycle of research computing</title><link>http://www.pyvideo.org/video/1221/ipython-tools-for-the-entire-lifecycle-of-resear</link><description>&lt;p&gt;Description&lt;/p&gt;
IPython started as a better interactive Python interpreter in 2001, but over
the last decade it has grown into a rich and powerful set of interlocking
tools aimed at enabling an efficient, fluid and productive workflow in the
typical use cases encountered by scientists in everyday research.

Today, IPython consists of a kernel executing user code and capable of
communicating with a variety of clients, using ZeroMQ for networking via a
well-documented protocol. This enables IPython to support, from a single
codebase, a rich variety of usage scenarios through user-facing applications
and an API for embedding:

  * An interactive, terminal-based shell with many capabilities far beyond the default Python interactive interpreter (this is the default application opened by the `ipython` command that most users are familiar with).
  * A Qt console that provides the look and feel of a terminal, but adds support for inline figures, graphical calltips, a persistent session that can survive crashes of the kernel process, and more.
  * A web-based notebook that can execute code and also contain rich text and figures, mathematical equations and arbitrary HTML. This notebook presents a document-like view with cells where code is executed but that can be edited in-place, reordered, mixed with explanatory text and figures, etc.
  * A high-performance, low-latency system for parallel computing that supports the control of a cluster of IPython engines communicating over ZeroMQ, with optimizations that minimize unnecessary copying of large objects (especially numpy arrays).

In this talk we will show how IPython supports all stages in the lifecycle of
a scientific idea: individual exploration, collaborative development, large-
scale production using parallel resources, publication and education. In
particular, the IPython Notebook supports multiuser collaboration and allows
scientists to share their work in an open document format that is a true
"executable paper": notebooks can be version controlled, exported to HTML or
PDF for publication, and used for teaching. We will demonstrate the key
features of the system,

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Granger,Evan Patterson,Fernando Pérez,Min Ragan-Kelley,Thomas Kluyver</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1221/ipython-tools-for-the-entire-lifecycle-of-resear</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/enthought/scipy_2012/IPython_tools_for_the_entire_lifecycle_of_research_computing.mp4?Signature=AgDUtK60kAvr4De7J2V6xj%2FZSxU%3D&amp;Expires=1346382215&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/enthought/scipy_2012/IPython_tools_for_the_entire_lifecycle_of_research_computing.mp4?Signature=AgDUtK60kAvr4De7J2V6xj%2FZSxU%3D&amp;Expires=1346382215&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="http://youtube.com/watch?v=iwVvqwLDsJo" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/iwVvqwLDsJo/hqdefault.jpg"></media:thumbnail></item><item><title>IPython in-depth: Interactive Tools for Scientific Computing</title><link>http://www.pyvideo.org/video/1343/ipython-in-depth-interactive-tools-for-scientifi</link><description>&lt;p&gt;Description&lt;/p&gt;
IPython provides tools for interactive and parallel computing that are widely
used in scientific computing. We will show some uses of IPython for scientific
applications, focusing on exciting recent developments, such as the network-
aware kernel, web-based notebook with code, graphics, and rich HTML, and a
high-level framework for interactive parallel computing.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez,Min Ragan-Kelley</dc:creator><pubDate>Tue, 17 Jul 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1343/ipython-in-depth-interactive-tools-for-scientifi</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/enthought/scipy_2012/IPython_indepth_Interactive_Tools_for_Scientific_Computing.mp4?Signature=iJFHJ%2FIFd8AMbdTd%2BFaPcYA80n4%3D&amp;Expires=1346902161&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/enthought/scipy_2012/IPython_indepth_Interactive_Tools_for_Scientific_Computing.mp4?Signature=iJFHJ%2FIFd8AMbdTd%2BFaPcYA80n4%3D&amp;Expires=1346902161&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=AvknbGH01FE" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/AvknbGH01FE/hqdefault.jpg"></media:thumbnail></item><item><title>IPython: Python at your fingertips</title><link>http://www.pyvideo.org/video/640/ipython-python-at-your-fingertips</link><description>&lt;p&gt;Abstract&lt;/p&gt;
IPython is widely used in the scientific community, but its various tools can
be used in any context. IPython gets you as close as possible to the Python
language, with an array of tools for productive work: at the terminal, in
GUIs, through a web browser, and in high-level parallel computing. This talk
will explain the design of IPython and provide short, hands-on demos of its
main features.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian E. Granger,Fernando Pérez,Min Ragan-Kelley,Thomas Kluyver</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/640/ipython-python-at-your-fingertips</guid><enclosure url="https://www.youtube.com/watch?v=26wgEsg9Mcc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/26wgEsg9Mcc/hqdefault.jpg"></media:thumbnail></item><item><title>IPython in-depth: high-productivity interactive and parallel python</title><link>http://www.pyvideo.org/video/605/ipython-in-depth-high-productivity-interactive-a</link><description>&lt;p&gt;Abstract&lt;/p&gt;
IPython provides tools for interactive and parallel computing that are widely
used in scientific computing, but can benefit any Python developer. We will
show how to use IPython in different ways, as: an interactive shell, an
embedded shell, a graphical console, a network-aware VM in GUIs, a web-based
notebook with code, graphics and rich HTML, and a high-level framework for
parallel computing.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian E. Granger,Fernando Pérez,Min Ragan-Kelley</dc:creator><pubDate>Wed, 07 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/605/ipython-in-depth-high-productivity-interactive-a</guid><enclosure url="https://www.youtube.com/watch?v=2G5YTlheCbw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/2G5YTlheCbw/hqdefault.jpg"></media:thumbnail></item></channel></rss>
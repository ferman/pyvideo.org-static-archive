<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Jason K. Moore</title><link>http://www.pyvideo.org/speaker/1242/jason-k-moore/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1242/jason-k-moore/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Wed, 09 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Multibody Dynamics and Control with Python part 1</title><link>http://www.pyvideo.org/video/2747/multibody-dynamics-and-control-with-python-part-1</link><description>&lt;p&gt;Abstract&lt;/p&gt;
In this tutorial, attendees will learn how to derive, simulate, and visualize
the motion of a multibody dynamic system with Python tools. These methods and
techniques play an important role in the design and understanding of robots,
vehicles, spacecraft, manufacturing machines, human motion, etc. Attendees will
develop code to simulate the motion of a human or humanoid robot.
&lt;p&gt;Description&lt;/p&gt;
In this tutorial, attendees will learn how to derive, simulate, and visualize
the motion of a multibody dynamic system with Python tools. The tutorial will
demonstrate an advanced symbolic and numeric pipeline for a typical multibody
simulation problem. These methods and techniques play an important role in the
design and understanding of robots, vehicles, spacecraft, manufacturing
machines, human motion, etc. At the end, the attendees will have developed code
to simulate the uncontrolled and controlled motion of a human or humanoid
robot.

We will highlight the derivation of realistic models of motion with the SymPy
Mechanics package. We will walk through the derivation of the equations of
motion of a multibody system (i.e. the model or the plant), simulating and
visualizing the free motion of the system, and finally we will addfeedback
controllers to control the plants that we derive.

It is best if the attendees have some background with calculus-based college
level physics. They should also be familiar with the SciPy Stack, in particular
IPython, SymPy, NumPy, and SciPy. Our goal is that attendees will come away
with the ability to model basic multibody systems, simulate and visualize the
motion, and apply feedback controllers all in a Python framework.

The tutorial materials including an outline can be viewed here:

[https://github.com/pydy/pydy-tutorial-pycon-2014](https://github.com/pydy/pydy-tutorial-pycon-2014)
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason K. Moore</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2747/multibody-dynamics-and-control-with-python-part-1</guid><enclosure url="http://www.youtube.com/watch?v=lWbeuDwYVto" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/lWbeuDwYVto/hqdefault.jpg"></media:thumbnail></item><item><title>Multibody Dynamics and Control with Python part 2</title><link>http://www.pyvideo.org/video/2745/multibody-dynamics-and-control-with-python-part-2</link><description>&lt;p&gt;Abstract&lt;/p&gt;
In this tutorial, attendees will learn how to derive, simulate, and visualize
the motion of a multibody dynamic system with Python tools. These methods and
techniques play an important role in the design and understanding of robots,
vehicles, spacecraft, manufacturing machines, human motion, etc. Attendees will
develop code to simulate the motion of a human or humanoid robot.
&lt;p&gt;Description&lt;/p&gt;
In this tutorial, attendees will learn how to derive, simulate, and visualize
the motion of a multibody dynamic system with Python tools. The tutorial will
demonstrate an advanced symbolic and numeric pipeline for a typical multibody
simulation problem. These methods and techniques play an important role in the
design and understanding of robots, vehicles, spacecraft, manufacturing
machines, human motion, etc. At the end, the attendees will have developed code
to simulate the uncontrolled and controlled motion of a human or humanoid
robot.

We will highlight the derivation of realistic models of motion with the SymPy
Mechanics package. We will walk through the derivation of the equations of
motion of a multibody system (i.e. the model or the plant), simulating and
visualizing the free motion of the system, and finally we will addfeedback
controllers to control the plants that we derive.

It is best if the attendees have some background with calculus-based college
level physics. They should also be familiar with the SciPy Stack, in particular
IPython, SymPy, NumPy, and SciPy. Our goal is that attendees will come away
with the ability to model basic multibody systems, simulate and visualize the
motion, and apply feedback controllers all in a Python framework.

The tutorial materials including an outline can be viewed here:

[https://github.com/pydy/pydy-tutorial-pycon-2014](https://github.com/pydy/pydy-tutorial-pycon-2014)
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason K. Moore</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2745/multibody-dynamics-and-control-with-python-part-2</guid><enclosure url="http://www.youtube.com/watch?v=1-KqRvNX0po" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/1-KqRvNX0po/hqdefault.jpg"></media:thumbnail></item><item><title>SymPy Tutorial Part 1</title><link>http://www.pyvideo.org/video/2706/sympy-tutorial-part-1</link><description>&lt;p&gt;Abstract&lt;/p&gt;
SymPy is a pure Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python and does not require any external libraries.

&lt;p&gt;Description&lt;/p&gt;
In this tutorial we will introduce attendees to SymPy. We will show basics of constructing and manipulating mathematical expressions in SymPy, the most common issues and differences from other computer algebra systems, and how to deal with them. In the last part of this tutorial we will show how to solve some practical problems with SymPy. This will include showing how to interface SymPy with popular numeric libraries like NumPy.

This knowledge should be enough for attendees to start using SymPy for solving mathematical problems and hacking SymPy's internals (though hacking core modules may require additional expertise).</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer,Jason K. Moore,Matthew Rocklin</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2706/sympy-tutorial-part-1</guid><enclosure url="http://www.youtube.com/watch?v=Lgp442bibDM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/Lgp442bibDM/hqdefault.jpg"></media:thumbnail></item><item><title>SymPy Tutorial Part 2</title><link>http://www.pyvideo.org/video/2713/sympy-tutorial-part-2</link><description>&lt;p&gt;Abstract&lt;/p&gt;
SymPy is a pure Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python and does not require any external libraries.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer,Jason K. Moore,Matthew Rocklin</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2713/sympy-tutorial-part-2</guid><enclosure url="http://www.youtube.com/watch?v=_PTe10whFKo" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/_PTe10whFKo/hqdefault.jpg"></media:thumbnail></item><item><title>SymPy Tutorial Part 3</title><link>http://www.pyvideo.org/video/2707/sympy-tutorial-part-3</link><description>&lt;p&gt;Abstract&lt;/p&gt;
SymPy is a pure Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python and does not require any external libraries.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer,Jason K. Moore,Matthew Rocklin</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2707/sympy-tutorial-part-3</guid><enclosure url="http://www.youtube.com/watch?v=qleGSnrnxgc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/qleGSnrnxgc/hqdefault.jpg"></media:thumbnail></item><item><title>SymPy Tutorial Part 4</title><link>http://www.pyvideo.org/video/2711/sympy-tutorial-part-4</link><description>&lt;p&gt;Abstract&lt;/p&gt;
SymPy is a pure Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python and does not require any external libraries.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer,Jason K. Moore,Matthew Rocklin</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2711/sympy-tutorial-part-4</guid><enclosure url="http://www.youtube.com/watch?v=04AGOl1P2U4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/04AGOl1P2U4/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Erik Groeneveld</title><link>http://www.pyvideo.org/speaker/492/erik-groeneveld/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/492/erik-groeneveld/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 24 Jul 2011 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Beyond Python Enhanced Generators</title><link>http://www.pyvideo.org/video/1030/beyond-python-enhanced-generators</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Erik Groeneveld - 23 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Right after the introduction of PEP342 (Enhanced Generators) we started to
decompose programs into generators. It was soon discovered that for real-life
problems one would need something like "yield from", as is described in
PEP380. At that time, we already had a similar solution called
'[compose](http://weightless.io/compose)', which we adapted to PEP380.

After 5 years working with 'compose', we found a small set of other features
that are essential if you want to use Enhanced Generators not only as a way of
lightweight command scheduling, but also a a pipe-line, or parser. Indeed, the
latter concepts are what real co-routines are about.

This talk introduces what is needed on top of PEPs 342 and 380 based on
experience with decomposing big enterprise search engines into co-routines.
Parts of it have been presented on SPA (2008) and EuroPython (2010).
Understanding of Enhanced Generators is a prerequisite.

Experience has shown that the topic is subtle enough to require quite some
time for full understanding, hence the suggestion for a 90 min slot.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Groeneveld</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1030/beyond-python-enhanced-generators</guid><enclosure url="http://www.youtube.com/watch?v=yWR00Y6tkC8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/yWR00Y6tkC8/hqdefault.jpg"></media:thumbnail></item><item><title>Beyond Python Enhanced Generators</title><link>http://www.pyvideo.org/video/1163/beyond-python-enhanced-generators-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Erik Groeneveld - 23 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Right after the introduction of PEP342 (Enhanced Generators) we started to
decompose programs into generators. It was soon discovered that for real-life
problems one would need something like "yield from", as is described in
PEP380. At that time, we already had a similar solution called
'[compose](http://weightless.io/compose)', which we adapted to PEP380.

After 5 years working with 'compose', we found a small set of other features
that are essential if you want to use Enhanced Generators not only as a way of
lightweight command scheduling, but also a a pipe-line, or parser. Indeed, the
latter concepts are what real co-routines are about.

This talk introduces what is needed on top of PEPs 342 and 380 based on
experience with decomposing big enterprise search engines into co-routines.
Parts of it have been presented on SPA (2008) and EuroPython (2010).
Understanding of Enhanced Generators is a prerequisite.

Experience has shown that the topic is subtle enough to require quite some
time for full understanding, hence the suggestion for a 90 min slot.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Groeneveld</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1163/beyond-python-enhanced-generators-0</guid><enclosure url="http://www.youtube.com/watch?v=Sd4W0DhJ29A" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/Sd4W0DhJ29A/hqdefault.jpg"></media:thumbnail></item></channel></rss>
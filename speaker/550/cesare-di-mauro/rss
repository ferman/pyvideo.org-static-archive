<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Cesare Di Mauro</title><link>http://www.pyvideo.org/speaker/550/cesare-di-mauro/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/550/cesare-di-mauro/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Tue, 09 Jun 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Writing an 8086 emulator</title><link>http://www.pyvideo.org/video/3563/writing-an-8086-emulator</link><description>&lt;p&gt;Description&lt;/p&gt;
An 8086 emulator written in Python is presented. The talk gives a brief introduction to the 8086 architecture, the pitfalls on emulating it, and the challenge to have a working model ready to be quickly ported in C (which is the final goal of the project). Some classes are presented that try to “mimic” the C memory pointers handling, to make the port easier. A set of APIs is shown, which are exposed to the emulator “consumers” (applications, drivers, or kernels). Finally, some words are spent about how testing is done and can be reused by the C version as well.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cesare Di Mauro</dc:creator><pubDate>Tue, 09 Jun 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3563/writing-an-8086-emulator</guid><enclosure url="https://www.youtube.com/watch?v=YFY7XH4PtPw" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/YFY7XH4PtPw/maxresdefault.jpg"></media:thumbnail></item><item><title>Hacking PyLongObject on Python 3.2</title><link>http://www.pyvideo.org/video/1143/hacking-pylongobject-on-python-32</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Cesare Di Mauro - 24 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
Beginning with Python 3 the old integer ("int") type has gone leaving the
place to "long", which replaced it giving a unique, uniform type to deal with
integers. However longs need a more complex structure which effectively
dropped a bit of Python 3.x performance. Looking at their implementation, an
idea grown that can help to improve the situation on common sceneries (using
"short" integers). A slightly changed structure will be presented and compared
with the old PyIntObject and the current Python 3.2 PyLongObject, along with
some optimizations, thoughts, and issues found on the road, which will show
the effort required by such change on a Python core element.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cesare Di Mauro</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1143/hacking-pylongobject-on-python-32</guid><enclosure url="http://www.youtube.com/watch?v=9tzd45ho8gE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/9tzd45ho8gE/hqdefault.jpg"></media:thumbnail></item></channel></rss>
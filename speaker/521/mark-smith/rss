<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Mark Smith</title><link>http://www.pyvideo.org/speaker/521/mark-smith/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/521/mark-smith/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Thu, 24 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Writing Awesome Command-Line Programs in Python</title><link>http://www.pyvideo.org/video/2971/writing-awesome-command-line-programs-in-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Command-Line programs can have a lot to them - usually more than you think, yet often suffer from a lack of thought.

This is a tour through how to structure your code, tools in the standard library and some 3rd party libraries. Take your command-line programs to the next level!
&lt;p&gt;Description&lt;/p&gt;
Python is a great language for writing command-line tools - which is why so much of Linux is secretly written in Python these days. Unfortunately, what starts as a simple script can quickly get out of hand as more features are added and more people start using it!

The talk will consist of a tour through various useful libraries and practical code showing how each can be used, and include advice on how to best structure simple and complex command-line tools.

Things to consider when writing command-line apps:

* Single-file vs Multiple-file
* Standard library only vs. 3rd party requirements
* Installation - setup.py vs. native packaging

The different parts of a command-line program:

* Option Parsing:
    * Libraries: getopt, optparse, argparse, docopt
    * Sub-commands
* Configuration:
    * Formats: Ini file, JSON, YAML
    * Where should it be stored (cross-platform);
    * Having multiple configuration files, and allowing user config to override global config
* Output:
    * Colour - colorama
    * Formatting output for the user
    * Formatting output for other programs
    * How do you know when your output is being piped to another program?
    * Managing logging and verbosity
* Managing streamed input
* Exit values: What are the conventions?
* Interactive apps - REPL
* Structuring a bunch of programs/commands around a shared codebase.
* Command-line frameworks: clint, compago &amp; cliff
* Testing command-line apps
* Writing command-line tools in Python 3 vs Python 2</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Smith</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2971/writing-awesome-command-line-programs-in-python</guid><enclosure url="http://www.youtube.com/watch?v=gR73nLbbgqY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/gR73nLbbgqY/hqdefault.jpg"></media:thumbnail></item><item><title>A Deep-Dive Into Python Classes</title><link>http://www.pyvideo.org/video/1079/a-deep-dive-into-python-classes</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mark Smith - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
This talk aims to lift the lid on the system that governs how types behave in
Python - everything except Metaclasses.

The talk answers questions such as:

  * What is a class, and how can we think of them?
  * How are classes instantiated?
  * How are attributes obtained from a class or an instance?
  * Why do I get a different thing when accessing a method via its class instead of its instance?
  * How do the classmethod and staticmethod decorators work?
  * How can I modify classes and instances after they've been initialised?
  * Does any of this allow me to do any clever tricks?

Attendees should understand at least the basics of object oriented programming
in Python. This talk doesn't aim to explain object-orientation, o-o design, or
how Python represents objects in C.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Smith</dc:creator><pubDate>Fri, 15 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1079/a-deep-dive-into-python-classes</guid><enclosure url="http://www.youtube.com/watch?v=7IIxc4yNo6M" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/7IIxc4yNo6M/hqdefault.jpg"></media:thumbnail></item></channel></rss>
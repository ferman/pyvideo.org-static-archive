<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Anselm Kruis</title><link>http://www.pyvideo.org/speaker/559/anselm-kruis/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/559/anselm-kruis/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 25 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Post-Mortem Debugging with Heap-Dumps</title><link>http://www.pyvideo.org/video/2935/post-mortem-debugging-with-heap-dumps</link><description>&lt;p&gt;Abstract&lt;/p&gt;
UNIX core-dumps, Windows minidumps or Java heap-dumps are well established technologies for post-mortem defect analysis.
I'll present a similar technology for Python. An improved pickling mechanism makes it possible to serialise the state of a Python 
program for subsequent analysis with a conventional Python-debugger.
&lt;p&gt;Description&lt;/p&gt;
Post-Mortem Debugging with Heap-Dumps
=====================================

UNIX core-dumps, Windows minidumps and analogous solutions of other operating systems are well established technologies for 
post-mortem defect analysis of native-code processes. In principle those dumps can be used to analyse „interpreted“ 
programs running within a native-code interpreter-process. However in practise this approach is tedious and not always successful \[1\].
Therefore operating system independent dump methods were developed for some „interpreted“ languages \[2\]. 
A prominent example are Java heap dumps \[3\]. 

Unfortunately up to now there was no practically usable dump-method for Python. Various attempts were made 
to utilise OS-level dump methods \[4, 5\]. In 2012 Eli Finer published the Python module *pydump* \[6\].
This module pickles the traceback of an exception and subsequently uses the pdb debugger to analyse the unpickled traceback.
Unfortunately *pydump* fails on PicklingErrors.

In my talk I'll present the Python package [*pyheapdump*](https://pypi.python.org/pypi/pyheapdump). It has the same operation principle as Eli's *pydump*, but 
is an independent implementation. *pyheapdump* uses an extended pickler 
([sPickle](https://pypi.python.org/pypi/sPickle)) to serialise all relevant objects 
of a Python process to a file. Later on a fault tolerant unpickler recreates the objects and a common Python
debugger can be used to analyse the dump. The pickler extensions make it possible to:

 * pickle and unpickle many commonly not pickleable objects [7].
 * replace the remaining not pickleable objects by surrogate objects so that the resulting object graph is
   almost isomorphic to the original object graph.
   
Which objects are relevant? In its default operation mode *pyheapdump* 
uses the frame-stacks of all threads as start point for pickling. Following the 
usual rules for pickling the dump includes all local variables and all objects 
reachable from a local variable and so on. That is usually enough for a successful defect analysis.

Compared with other Python post-mortem debugging methods *pyheapdump* has several advantages:

 * It is a pure Python solution and independent from the operation system.
 * Creation of the pyheapdump and fault analysis can be performed different computers.
 * It is not obstructive. It does not modify / monkey-patch or disturb the dumped 
   process in any way, with the exception of loading additional modules.
 * If used with the Pydev-debugger, it supports multi-threaded applications.
 * If used with the Pydev-debugger and Stackless Python, it supports tasklets. 

The implementation of *pyheapdump* is fairly small, because it draws most of its functionality 
from the underlying sPickle package and from the new Stackless-Support \[8\] of the
Pydev-Debugger. Therefore it is - despite of its short history - already a useful piece of software.

Outline of the talk
-------------------

1.	Introduction to the problem
2.	Previous works
3.	The concept of *pyheapdump*
4.	Live demonstration
5.	Open problems and further development
6.	Questions and Answers

References
----------

1. Andraz Tori, Python, 2011-01-16: *gdb and a very large core dump*, blog at &lt;http://www.zemanta.com/blog/python-gdb-large-core-dump/&gt;
2. David Pacheco, ACM Queue - Programming Languages Volume 9 Issue 10, October 2011: 
   *Postmortem Debugging in Dynamic Environments*, 
   PDF &lt;http://dl.acm.org/ft_gateway.cfm?id=2039361&amp;ftid=1050739&amp;dwn=1&amp;CFID=290171300&amp;CFTOKEN=95099236&gt;
3. Chris Bailey, Andrew Johnson, Kevin Grigorenko, IBM developerWorks, 2011-03-15: 
   *Debugging from dumps - Diagnose more than memory leaks with Memory Analyzer*, 
   PDF &lt;http://www.ibm.com/developerworks/library/j-memoryanalyzer/j-memoryanalyzer-pdf.pdf&gt;
4. Brian Curtin, 2011-09-29: *minidumper - Python crash dumps on Windows*, 
   blog at &lt;http://blog.briancurtin.com/posts/20110929minidumper-python-crash-dumps-on-windows.html&gt;
5. David Malcolm, Fedora Feature, 2010-04-06: *Easier Python Debugging* 
   at &lt;http://fedoraproject.org/wiki/Features/EasierPythonDebugging&gt;
6. Eli Finer, Github-Project, 2012: *pydump* at &lt;https://github.com/gooli/pydump&gt;
7. Anselm Kruis, EuroPython 2011: *Advanced Pickling with Stackless Python and sPickle*,
   archived talk at &lt;https://ep2013.europython.eu/conference/talks/advanced-pickling-with-stackless-python-and-spickle&gt;
8. Fabio Zadrozny, 2013-12-12: *PyDev 3.1.0 released*, 
   blog at &lt;http://pydev.blogspot.de/2013/12/pydev-310-released.html&gt;

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anselm Kruis</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2935/post-mortem-debugging-with-heap-dumps</guid><enclosure url="http://www.youtube.com/watch?v=0Xt-au2QnRg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/0Xt-au2QnRg/hqdefault.jpg"></media:thumbnail></item><item><title>Stackless: Recent advancements and future goals</title><link>http://www.pyvideo.org/video/2998/stackless-recent-advancements-and-future-goals</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Stackless (formerly known as Stackless-Python) is an enhanced variant of the Python-language. Stackless is best 
known for its lightweight microthreads. But that's not all. In this talk Stackless core developers demonstrate
recent advancements regarding multi-threading, custom-scheduling, debugging with Stackless and explain future 
plans for Stackless.
&lt;p&gt;Description&lt;/p&gt;
Stackless: Recent advancements and future goals
-------------------------------------------------------

Since Python release 1.5 Stackless Python is an enhanced variant of C-Python.
Stackless is best known for its addition of lightweight microthreads (tasklets) and 
channels.

Less known are the recent enhancements that became available with Stackless 2.7.6. 
In this talk core Stackless developers demonstrate

 * The improved multi-threading support
 * How to build custom scheduling primitives based on atomic tasklet operations
 * The much improved debugger support
 * ...
 
Stackless recently switched the new master repository from hg.python.org/stackless to bitbucket to 
allow for a more open development process. We'll summarise our experience and discuss our
plans for the future development of Stackless.

The talk will be help by Anselm Kruis and Christian Tismer.
If we are lucky, we will also welcome Kristján Valur Jónsson from Iceland.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anselm Kruis,Christian Tismer</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2998/stackless-recent-advancements-and-future-goals</guid><enclosure url="http://www.youtube.com/watch?v=H3sQLC40GXU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/H3sQLC40GXU/hqdefault.jpg"></media:thumbnail></item><item><title>Advanced Pickling with Stackless Python and sPickle</title><link>http://www.pyvideo.org/video/1166/advanced-pickling-with-stackless-python-and-spick</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Anselm Kruis - 24 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Stackless Python supports pickling of a wider range of types than conventional
C-Python, including stack frames and code objects. On this basis it is
possible to extend further the pickle.Pickler class in order to serialise
classes, modules, packages up to certain limits. The [sPickle
package](http://pypi.python.org/pypi/sPickle) provides such an extended
Pickler. The code was developed as part of a commercial project and recently
released as free software by science + computing ag. Currently it requires
Stackless Python 2.7.

In my presentation, I'll first demonstrate some applications of the sPickle
package including serialisation of modules and executing parts of a program on
a remote computer using RPyC and Paramiko.

In the second part of my speech, I'll give some insight in the internal
operations of sPickle and the lessons learned during its development.
Extending the Pickler showed to be like opening a can of worms. You have take
care of many odds and ends to get it right. I'll point out some weak points in
the implementation of the conventional pickling code and I'll also show the
limits of the current sPickle implementation.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anselm Kruis</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1166/advanced-pickling-with-stackless-python-and-spick</guid><enclosure url="http://www.youtube.com/watch?v=rwhZ4joMLsI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/rwhZ4joMLsI/hqdefault.jpg"></media:thumbnail></item></channel></rss>
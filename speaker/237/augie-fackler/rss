<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Augie Fackler</title><link>http://www.pyvideo.org/speaker/237/augie-fackler/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/237/augie-fackler/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 13 Apr 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Deliver Your Software In An Envelope</title><link>http://www.pyvideo.org/video/2632/deliver-your-software-in-an-envelope</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Guaranteed behavior makes software modules useful. Software guarantees are commonly incomplete with good reason: promises that are narrow and few are most easily kept across wide ranges of platforms and long times. We define the space of a module's allowed behavior to be its "behavioral envelope" and show that thinking and speaking in terms of envelopes eases maintenance and makes APIs delightful.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Augie Fackler,Nathaniel Manista</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2632/deliver-your-software-in-an-envelope</guid><enclosure url="http://www.youtube.com/watch?v=mTj297sGzxw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/mTj297sGzxw/hqdefault.jpg"></media:thumbnail></item><item><title>The End Of Object Inheritance &amp; The Beginning Of A New Modularity</title><link>http://www.pyvideo.org/video/1684/the-end-of-object-inheritance-the-beginning-of</link><description>&lt;p&gt;Abstract&lt;/p&gt;
After 15 years' combined experience developing software of all types
we are done with object inheritance. Come learn about elegant, superior solutions
to the problems inheritance claims to adequately solve.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Augie Fackler,Nathaniel Manista</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1684/the-end-of-object-inheritance-the-beginning-of</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/The_End_Of_Object_Inheritance_.mp4?Signature=vGTNWd5OLl%2BTJe3R3z1c8sFcTZE%3D&amp;Expires=1363649965&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/The_End_Of_Object_Inheritance_.mp4?Signature=vGTNWd5OLl%2BTJe3R3z1c8sFcTZE%3D&amp;Expires=1363649965&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=3MNVP9-hglc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i4.ytimg.com/vi/3MNVP9-hglc/hqdefault.jpg"></media:thumbnail></item><item><title>Stop Mocking, Start Testing</title><link>http://www.pyvideo.org/video/629/stop-mocking-start-testing</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Project Hosting at Google Code is a large, well-established system written
mostly in Python. We'll share our battle-born convictions about creating tests
for test-unfriendly code and the larger topic of testing.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Augie Fackler,Nathaniel Manista</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/629/stop-mocking-start-testing</guid><enclosure url="https://www.youtube.com/watch?v=Xu5EhKVZdV8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/Xu5EhKVZdV8/hqdefault.jpg"></media:thumbnail></item><item><title>HTTP in Python: which library for what task?</title><link>http://www.pyvideo.org/video/439/pycon-2011--http-in-python--which-library-for-wha</link><description>&lt;p&gt;Description&lt;/p&gt;
HTTP in Python: which library for what task?

Presented by Augie Fackler

HTTP is the lingua franca of the web, and many things done in Python depend on
it, yet HTTP in Python isn't always as good as one would expect. It's well
worth knowing the options and tradeoffs available.

Abstract

HTTP in Python is very much a mixed bag of available technology. What's
implemented mostly works well, but there are some frustrating gaps in
different libraries that are poorly documented. I've gone wading through every
HTTP library I can find for Python while trying to fix an obscure bug in
Mercurial and decided to write my own. I'll cover what's available today and
why I'm starting from scratch with a completely new implementation.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Augie Fackler</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/439/pycon-2011--http-in-python--which-library-for-wha</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2011/439_http-in-python-which-library-for-what-task.mp4" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2011HTTPInPythonWhichLibraryForWhatTask758.png"></media:thumbnail></item></channel></rss>
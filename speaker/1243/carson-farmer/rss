<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Carson Farmer</title><link>http://www.pyvideo.org/speaker/1243/carson-farmer/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1243/carson-farmer/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Mon, 14 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Light-weight real-time event detection with Python</title><link>http://www.pyvideo.org/video/2781/light-weight-real-time-event-detection-with-pytho</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Real-time feeds of user activity from various apps such as Twitter, Foursquare, and others are becoming increasingly available. These 'digital footprints' provide new means to understand how individuals utilize the places and spaces of urban environments. We present a light-weight framework for real-time event detection in a city based on existing SciPy libraries and real-time Twitter streams.
&lt;p&gt;Description&lt;/p&gt;
In this paper, we utilize real-time 'social information sources' to automatically detect important events at the urban scale. The goal is to provide city planners and others with information on *what* is going on, and *when* and *where* it is happening. Traditionally, this type of analysis would require a large investment in heavy-duty computing infrastructure, however, we suggest that a focus on real-time analytics in a lightweight streaming framework is the most logical step forward.

Using online Latent Semantic Analysis (LSA) from the [`gensim`][gensim] Python package, we extract 'topics' from tweets in an online training fashion. To maintain real-time relevance, the topic model is continually updated, and depending on parameterization, can 'forget' past topics. Based on a set of learned topics, a grid of spatially located tweets for each identified topic is generated using standard `numpy` and `scipy.spatial` functionality. Using an efficient streaming algorithm for approximating 2D kernel density estimation (KDE), locations with the highest density of tweets on a particular topic are located. Locations are semantically labeled using the learned topics, based on the assumption that events can be directly tied to a particularly popular topic at a particular location.

To facilitate real time visualization of results, we utilize the [`pico`][pico] Python/Javascript library as a real-time bridge between server-side Python analysis and client-side Javascript visualization. This enables fast, responsive interactivity of computationally intensive tasks. Additionally, since `pico` allows streaming data from Python to Javascript, updates to the web-interface are sent and consumed as needed, such that only significant changes in an event's status, or the introduction of a new event, will cause updates to the visualizations. Finally, because all models, data structures, and outputs on the server side are pickle-able Python objects, this entire framework is small enough to be deployed on almost any server with Python installed.

[pico]: https://github.com/fergalwalsh/pico
[gensim]: https://github.com/piskvorky/gensim/
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carson Farmer</dc:creator><pubDate>Mon, 14 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2781/light-weight-real-time-event-detection-with-pytho</guid><enclosure url="http://www.youtube.com/watch?v=iT_QmeJsBhE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/iT_QmeJsBhE/hqdefault.jpg"></media:thumbnail></item><item><title>Geospatial data in Python: Database, Desktop, and the Web part 1</title><link>http://www.pyvideo.org/video/2709/geospatial-data-in-python-database-desktop-and</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Using the wide range of tools and libraries available for working with geospatial data, it is now possible to transport geospatial data from a database to a web-interface in only a few lines of code. In this tutorial, we explore some of these libraries and work through examples which showcase the power of Python for geospatial data.
&lt;p&gt;Description&lt;/p&gt;
Tools and libraries for working with geospatial data in Python are currently undergoing rapid development and expansion. Libraries such as shapely, fiona, rasterio, geopandas, and others now provide Pythonic ways of reading, writing, editing, and manipulating geographic data. In this tutorial, participants will be exposed to a number of new and legacy geospatial libraries in Python, with a focus on simple and rapid interaction with geospatial data.

We will utilize Python to interact with geographic data from a database to a web interface, all the while showcasing how Python can be used to access data from online resources, query spatially enabled databases, perform coordinate transformations and geoprocessing functions, and export geospatial data to web-enabled formats for visualizing and sharing with others. Time permitting, we will also briefly explore Python plugin development for the QGIS Desktop GIS environment.

This tutorial should be accessible to anyone who has basic Python knowledge (though familiarity with Pandas, NumPy, matplotlib, etc. will be helpful) as well as familiarity with IPython Notebook. We will take some time at the start of the tutorial to go over installation strategies for geospatial libraries (GDAL/OGR, Proj.4, GEOS) and their Python bindings (Shapely, Fiona, GeoPandas) on Windows, Mac, and Linux. Some knowledge of geospatial concepts such as map projections and GIS data formats will also be helpful.

### Outline
- Introduction to geospatial data
    - Map projections, data formats, and looking at maps
- Introduction to geospatial libraries
    - GDAL/OGR (Fiona); Shapely (GEOS); PostGIS; GeoPandas; and more
- GeoPandas
    - Reading data from various sources
    - Data manipulation and plotting
    - Writing data to various sources
    - Getting data from the web
    - Pushing data to the web (for maps)
- Putting it all together
    - Quick example: From database to web
- Introduction to QGIS Desktop GIS (time permitting)
    - Python interface (PyQGIS)
    - Building a simple plugin
    - Plugin deployment
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carson Farmer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2709/geospatial-data-in-python-database-desktop-and</guid><enclosure url="http://www.youtube.com/watch?v=ctdjAir4TUg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/ctdjAir4TUg/hqdefault.jpg"></media:thumbnail></item><item><title>Geospatial data in Python: Database, Desktop, and the Web part 2</title><link>http://www.pyvideo.org/video/2710/geospatial-data-in-python-database-desktop-and-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Using the wide range of tools and libraries available for working with geospatial data, it is now possible to transport geospatial data from a database to a web-interface in only a few lines of code. In this tutorial, we explore some of these libraries and work through examples which showcase the power of Python for geospatial data.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carson Farmer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2710/geospatial-data-in-python-database-desktop-and-0</guid><enclosure url="http://www.youtube.com/watch?v=t-BJnls4o_s" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/t-BJnls4o_s/hqdefault.jpg"></media:thumbnail></item><item><title>Geospatial data in Python: Database, Desktop and the Web - Part 3</title><link>http://www.pyvideo.org/video/2761/geospatial-data-in-python-database-desktop-and-1</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Using the wide range of tools and libraries available for working with geospatial data, it is now possible to transport geospatial data from a database to a web-interface in only a few lines of code. In this tutorial, we explore some of these libraries and work through examples which showcase the power of Python for geospatial data.
&lt;p&gt;Description&lt;/p&gt;
Tools and libraries for working with geospatial data in Python are currently undergoing rapid development and expansion. Libraries such as shapely, fiona, rasterio, geopandas, and others now provide Pythonic ways of reading, writing, editing, and manipulating geographic data. In this tutorial, participants will be exposed to a number of new and legacy geospatial libraries in Python, with a focus on simple and rapid interaction with geospatial data.

We will utilize Python to interact with geographic data from a database to a web interface, all the while showcasing how Python can be used to access data from online resources, query spatially enabled databases, perform coordinate transformations and geoprocessing functions, and export geospatial data to web-enabled formats for visualizing and sharing with others. Time permitting, we will also briefly explore Python plugin development for the QGIS Desktop GIS environment.

This tutorial should be accessible to anyone who has basic Python knowledge (though familiarity with Pandas, NumPy, matplotlib, etc. will be helpful) as well as familiarity with IPython Notebook. We will take some time at the start of the tutorial to go over installation strategies for geospatial libraries (GDAL/OGR, Proj.4, GEOS) and their Python bindings (Shapely, Fiona, GeoPandas) on Windows, Mac, and Linux. Some knowledge of geospatial concepts such as map projections and GIS data formats will also be helpful.

### Outline
- Introduction to geospatial data
    - Map projections, data formats, and looking at maps
- Introduction to geospatial libraries
    - GDAL/OGR (Fiona); Shapely (GEOS); PostGIS; GeoPandas; and more
- GeoPandas
    - Reading data from various sources
    - Data manipulation and plotting
    - Writing data to various sources
    - Getting data from the web
    - Pushing data to the web (for maps)
- Putting it all together
    - Quick example: From database to web
- Introduction to QGIS Desktop GIS (time permitting)
    - Python interface (PyQGIS)
    - Building a simple plugin
    - Plugin deployment
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carson Farmer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2761/geospatial-data-in-python-database-desktop-and-1</guid><enclosure url="http://www.youtube.com/watch?v=0VSEfF0i1mI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/0VSEfF0i1mI/hqdefault.jpg"></media:thumbnail></item></channel></rss>
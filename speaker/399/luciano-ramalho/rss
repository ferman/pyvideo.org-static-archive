<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Luciano Ramalho</title><link>http://www.pyvideo.org/speaker/399/luciano-ramalho/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/399/luciano-ramalho/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Wed, 09 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Pingo means "pin, go!"</title><link>http://www.pyvideo.org/video/2704/pingo-means-pin-go</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2704/pingo-means-pin-go</guid><enclosure url="http://youtu.be/PNkml72Wuck" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/PNkml72Wuck/hqdefault.jpg"></media:thumbnail></item><item><title>Iteration &amp; Generators: the Python Way</title><link>http://www.pyvideo.org/video/1709/iteration-generators-the-python-way</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Did you know that "for a, (b, c) in s:" is a valid Python line? From the elegant for statement through list/set/dict comprehensions and generator functions, this talk shows how the Iterator pattern is so deeply embedded in the syntax of Python, and so widely supported by its libraries, that some of its most powerful applications can be overlooked by programmers coming from other languages.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Sun, 17 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1709/iteration-generators-the-python-way</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Iteration_Generators_the_Pytho.mp4?Signature=N%2FHEIY4SeNxgdkPVuK4Zcx7hkF8%3D&amp;Expires=1363820921&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Iteration_Generators_the_Pytho.mp4?Signature=N%2FHEIY4SeNxgdkPVuK4Zcx7hkF8%3D&amp;Expires=1363820921&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=z4P6hSa6K9g" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i3.ytimg.com/vi/z4P6hSa6K9g/hqdefault.jpg"></media:thumbnail></item><item><title>Encapsulation with descriptors</title><link>http://www.pyvideo.org/video/1760/encapsulation-with-descriptors</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python has no private fields, but the property decorator lets you replace public attributes with getters and setters without breaking client code. And the descriptor mechanism, used in Django for model field declarations, enables wide reuse of getter/setter logic via composition instead of inheritance. This talk explains how properties and descriptors work by refactoring a practical example.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1760/encapsulation-with-descriptors</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Encapsulation_with_descriptors.mp4?Signature=1nnn6X5f%2FI1zj0WkCpi1PRk8xlQ%3D&amp;Expires=1363664022&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Encapsulation_with_descriptors.mp4?Signature=1nnn6X5f%2FI1zj0WkCpi1PRk8xlQ%3D&amp;Expires=1363664022&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=5GG4jBxj4Ys" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/5GG4jBxj4Ys/hqdefault.jpg"></media:thumbnail></item><item><title>38. ABC: the mother of Python</title><link>http://www.pyvideo.org/video/723/38-abc-the-mother-of-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Before Python, Guido was a contributor to the ABC language and environment.
ABC was designed to teach programming, and introduced many "Pythonic" ideas:
integrated dicts and tuples, structure by indentation, strong typing without
declarations etc. With high demand for Python in education, the legacy of ABC
is more relevant than ever as we design courses and environments for learners.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Sun, 11 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/723/38-abc-the-mother-of-python</guid><enclosure url="https://www.youtube.com/watch?v=Qh4Gkkgi1Mw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/u2-MbpX-bxQ/hqdefault.jpg"></media:thumbnail></item></channel></rss>
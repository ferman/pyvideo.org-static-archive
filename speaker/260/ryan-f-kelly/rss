<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Ryan F Kelly</title><link>http://www.pyvideo.org/speaker/260/ryan-f-kelly/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/260/ryan-f-kelly/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Mon, 22 Aug 2011 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>PyConAU 2010: Esky: keep your frozen apps fresh</title><link>http://www.pyvideo.org/video/470/pyconau-2010--esky--keep-your-frozen-apps-fresh</link><description>&lt;p&gt;Description&lt;/p&gt;
Esky: keep your frozen apps fresh

Presented by Ryan F Kelly

Esky ([http://pypi.python.org/pypi/esky/](http://pypi.python.org/pypi/esky/))
is an auto-update framework for frozen Python applications, designed to be
simple to use while guaranteeing the safety of your app in case of failed or
partial updates. It provides easy support for differential updates and is
compatible with py2exe, py2app, cx-freeze and bbfreeze.

This talk will give an overview of esky's features, and show how to extend an
existing frozen application with auto-update support.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan F Kelly</dc:creator><guid>http://www.pyvideo.org/video/470/pyconau-2010--esky--keep-your-frozen-apps-fresh</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-au-2010/470_pyconau-2010-esky-keep-your-frozen-apps-fresh.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pyconau-EskyKeepYourFrozenAppsFresh588.png"></media:thumbnail></item><item><title>Bytecode: What, Why, and How to Hack it</title><link>http://www.pyvideo.org/video/1000/bytecode-what-why-and-how-to-hack-it</link><description>&lt;p&gt;Abstract&lt;/p&gt;
What's python really doing when it runs your scripts, and what's with all
these .pyc files? Get inside the head of python.exe, learn how it sees your
code, and then twist it to your own evil ends. This talk will discuss the
basics of python's bytecode format, why and how it is used, and how you can
dive into the bytecode of your running program - either to better understand
its behaviour, or to make it do things to was never supposed to do....

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan F Kelly</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1000/bytecode-what-why-and-how-to-hack-it</guid><enclosure url="http://www.youtube.com/watch?v=ve7lLHtJ9l8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/ve7lLHtJ9l8/hqdefault.jpg"></media:thumbnail></item><item><title>Say What You Mean: Meta-Programming a Declarative API</title><link>http://www.pyvideo.org/video/989/say-what-you-mean-meta-programming-a-declarative</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This talk will explore the use of python's meta-programming facilities to
create a simple declarative API so that you can *say what you mean* - write
code that focuses on the what and the why without being cluttered by the how.
If you've ever wondered how the Django ORM or SQLObject work their magic, this
is the talk for you.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan F Kelly</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/989/say-what-you-mean-meta-programming-a-declarative</guid><enclosure url="http://www.youtube.com/watch?v=nRDC6GtfB4g" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/nRDC6GtfB4g/hqdefault.jpg"></media:thumbnail></item></channel></rss>
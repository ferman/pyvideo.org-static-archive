<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Andrew Walker</title><link>http://www.pyvideo.org/speaker/841/andrew-walker/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/841/andrew-walker/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Tue, 04 Aug 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Not Invented Here: Porting Scientific Software to Python</title><link>http://www.pyvideo.org/video/3992/not-invented-here-porting-scientific-software-to</link><description>&lt;p&gt;Description&lt;/p&gt;
Are you a scientist who's can't get work done because you the tools you need aren't available?  Do your collaborators use a different computing platform to you?  Are you struggling to find anyone who can help you solve your software integration problems?

These challenges occur because scientists face some of the most difficult challenges in computing  - dealing new and diverse problems;  working with prototypes and legacy systems; collaborating with domain experts, rather than software experts; all while delivering on time with minimal resources. 

Python has a reputation for being a language that excels at "glueing" different systems together in a style that is both easy to understand, test and maintain. More importantly using Python is one way to make sure that you spend your time working on research, rather than coding and debugging.

This presentation will demonstrate some of the skills needed to integrate software from other languages into the Python Scientific computing ecosystem using subprocesses, ctypes, cython the Jupyter project - and what do do when none of these approaches are the right.


</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Walker</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3992/not-invented-here-porting-scientific-software-to</guid><enclosure url="https://www.youtube.com/watch?v=evhku1Lz8GE" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/evhku1Lz8GE/hqdefault.jpg"></media:thumbnail></item><item><title>Managing scientific simulations with Python with RQ (Redis Queue)</title><link>http://www.pyvideo.org/video/2215/managing-scientific-simulations-with-python-with</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Writing scientific software in support of experimentation and simulation is a challenging task. It is even more challenging in cases where such software must be distributed across multiple machines.  Existing methods for addressing this problem can require either significant effort to maintain and extend. Alternative approaches such as message queues can be incredibly difficult to install for novices.

This presentation will demonstrate a quick and easy approach to solving this problem using the redis-queue module.  This approach makes it easy to make efficient use of multiple cores and multiple machines, with only minimal dependence on external packages.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Walker</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2215/managing-scientific-simulations-with-python-with</guid><enclosure url="http://s3.us.archive.org/ndvpyconau2013/Managing_scientific_simulation.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvpyconau2013/Managing_scientific_simulation.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=Ttw816mwnQY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/Ttw816mwnQY/hqdefault.jpg"></media:thumbnail></item><item><title>Python Powered Computational Geometry</title><link>http://www.pyvideo.org/video/1627/python-powered-computational-geometry</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Computational Geometry is the study of geometry with the support of
appropriate algorithms, and influences a broad range of fields of science,
engineering and mathematics including: Computation Fluid Dynamics (CFD),
Finite Element Model


&lt;p&gt;Description&lt;/p&gt;
Computational Geometry is the study of geometry with the support of
appropriate algorithms, and influences a broad range of fields of science,
engineering and mathematics including: Computation Fluid Dynamics (CFD),
Finite Element Modelling (FEM), Computer Aided Design / Modelling (CAD/CAM),
Robotics, Computer Graphics and Collision Detection.

While it is possible to quickly implement naive versions of computational
geometry algorithms in any language, such algorithms can be expensive and time
consuming to write, debug and maintain. The advent of a number of tools,
including new bindings for the Computational Geometry Algorithms Library
(CGAL) and the ipython notebook make Python an ideal tool for experimentation
with fast and numerically robust algorithms.

The presentation will include demonstrations of a number of common two- and
three-dimensional computational geometry algorithms:

  * Triangulations (and Voronoi diagrams)
  * Mesh refinement
  * Intersection testing
  * Alpha shapes
  * Convex hulls
  * Constructive Solid Geometry
  * Minkowski Sums

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Walker</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1627/python-powered-computational-geometry</guid><enclosure url="http://www.youtube.com/watch?v=zWhMc3am7ao" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/zWhMc3am7ao/hqdefault.jpg"></media:thumbnail></item></channel></rss>
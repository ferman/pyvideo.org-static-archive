<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Silas Ray</title><link>http://www.pyvideo.org/speaker/1963/silas-ray/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1963/silas-ray/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 16 Aug 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Metaclasses and Decorators in the Wild: Ingesting Data With FeedEater</title><link>http://www.pyvideo.org/video/3775/metaclasses-and-decorators-in-the-wild-ingesting</link><description>&lt;p&gt;Description&lt;/p&gt;
FeedEater is a small library (https://github.com/Suitey/FeedEater) I wrote at TripleMint that we use to manage the interface between data sources with disparate formats and our DB.  This talk runs through the basic principles involved and shows how the pieces fit together.  If you are interested in Python metaprogramming but have never been able to see how to use it practically, this is a good example of using it in the real world.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Silas Ray</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3775/metaclasses-and-decorators-in-the-wild-ingesting</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pygotham-2015/3775_Metaclasses_and_Decorators_in_the_Wild_Ingesting_D.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pygotham-2015/3775_Metaclasses_and_Decorators_in_the_Wild_Ingesting_D.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/CqkB9kjBgzo" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/CqkB9kjBgzo/hqdefault.jpg"></media:thumbnail></item></channel></rss>
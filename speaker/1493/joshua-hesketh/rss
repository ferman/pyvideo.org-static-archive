<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Joshua Hesketh</title><link>http://www.pyvideo.org/speaker/1493/joshua-hesketh/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1493/joshua-hesketh/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Tue, 04 Aug 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Guarding the gate with Zuul</title><link>http://www.pyvideo.org/video/3965/guarding-the-gate-with-zuul</link><description>&lt;p&gt;Description&lt;/p&gt;
Zuul is a program that is used to gate the source code repositories of a project so that changes are only merged if they pass tests.

By gating we mean a more proactive continuous integration suite whereby tests must pass in order to merge (rather than a traditional CI that just gives a nightly status of the master branch). This means every commit is tested both during review time and before it merges - in case the repositories have changed in the mean time.

The result of using a gating system like zuul is that it's much harder to break trunk and your nightly builds should nearly always work.

Zuul can be configured to react to events and run various jobs with success or failure results depending on the scenario. Currently Zuul is only integrated with the gerrit code review platform but there are discussions about extending it to github.

One unique and powerful feature in Zuul is its ability to run tests in a predictive manner across multiple programs. Zuul predicts what multiple repositories will look like by the time the present job is finished and arranges the tests to be performed in that order. This stops race conditions when merging code in one repository that depends on code in another repository.

Zuul can manage thousands of jobs across hundreds of projects as evident by being the gate keeper for OpenStack.

In this talk we will look at what Zuul is, how to configure it and the internals of how it works.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joshua Hesketh</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3965/guarding-the-gate-with-zuul</guid><enclosure url="https://www.youtube.com/watch?v=HlpJhqgGL34" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/HlpJhqgGL34/hqdefault.jpg"></media:thumbnail></item><item><title>OpenStack Miniconf Opening</title><link>http://www.pyvideo.org/video/4038/openstack-miniconf-opening</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joshua Hesketh,Robert Collins</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/4038/openstack-miniconf-opening</guid><enclosure url="https://www.youtube.com/watch?v=6aSKs4_WdkI" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/6aSKs4_WdkI/hqdefault.jpg"></media:thumbnail></item><item><title>Continuous Integration Testing for Your Database Migrations by Joshua Hesketh</title><link>http://www.pyvideo.org/video/3094/continuous-integration-testing-for-your-database</link><description>&lt;p&gt;Description&lt;/p&gt;
This is a talk about how OpenStack does database migration continuous integration, and how other projects might be able to learn from what we've done.

OpenStack is an interesting project in that it runs in a variety of different scale scenarios. There are very small deployments of only a few machines, and large public clouds with thousands of machines. The OpenStack project takes Continuous Integration (CI) very seriously, and runs a suite of unit and integration tests on all proposed patches.

One thing we weren't very good at testing though, was database upgrades. We have unit tests for many of them, but we don't know how these upgrades affect real users in the field. As a response, we worked on adding database migration testing to our CI environment. This new test infrastructure is open source (https://github.com/stackforge/turbo-hipster), and extensible. It currently runs tests on smaller databases, as well as a largish real user database. It has already caught two significant performance problems in database migrations.

This talk will cover how we built the test infrastructure (in python!). It will cover what we've learned from the 12 months of running it - time that we'll have had by the conference day. It will tell a story about some of the bugs we've found and how we fixed them.
..</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joshua Hesketh</dc:creator><pubDate>Mon, 11 Aug 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3094/continuous-integration-testing-for-your-database</guid><enclosure url="http://mirror.linux.org.au/pub/pycon-au/pyconau2014/65-out.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://mirror.linux.org.au/pub/pycon-au/pyconau2014/65-out.ogv" mime_type="video/ogg"></media:content><media:content url="http://www.youtube.com/watch?v=z_q5BaniZH0" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/z_q5BaniZH0/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Carl Meyer</title><link>http://www.pyvideo.org/speaker/35/carl-meyer/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/35/carl-meyer/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 13 Apr 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Taming dependencies with pip</title><link>http://www.pyvideo.org/video/69/djangocon-2011--taming-dependencies-with-pip</link><description>&lt;p&gt;Description&lt;/p&gt;
Taming dependencies with pip

Presented by Carl Meyer

Dependency management sucks. Pip provides some options for making it suck a
bit less, but not all of them are immediately obvious. This talk will cover a
number of strategies for making your deployments faster and more reliable, and
demonstrate how to implement them in practice.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Meyer</dc:creator><guid>http://www.pyvideo.org/video/69/djangocon-2011--taming-dependencies-with-pip</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/69_taming-dependencies-with-pip.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-TamingDependenciesWithPip630-709.jpg"></media:thumbnail></item><item><title>Set your code free: releasing and maintaining an open-source Python project</title><link>http://www.pyvideo.org/video/2637/set-your-code-free-releasing-and-maintaining-an</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Got some code that you've written that would be useful to others, but actually releasing it feels like too much new stuff to figure out? Releasing software does take some work, but this talk will take you step-by-step through the process with specific recommendations and tools. We'll cover preparing your code for release, packaging it, releasing it, and maintaining it over time.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Meyer</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2637/set-your-code-free-releasing-and-maintaining-an</guid><enclosure url="http://www.youtube.com/watch?v=nHWRN5gCPSI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/nHWRN5gCPSI/hqdefault.jpg"></media:thumbnail></item><item><title>Getting started with automated testing</title><link>http://www.pyvideo.org/video/1674/getting-started-with-automated-testing</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The hardest part of testing is getting the ball rolling. Once you've picked your tools and started writing tests, the added confidence you have in making changes to your code, and the time you save in repetitive manual testing, can quickly become addictive! If you never got over that initial speedbump, or you've tried testing but it hasn't yet clicked, this talk is for you.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Meyer</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1674/getting-started-with-automated-testing</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Getting_started_with_automated.mp4?Signature=%2BJoJe0lzZkPKULvHwqHzfZXTDHc%3D&amp;Expires=1363647083&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Getting_started_with_automated.mp4?Signature=%2BJoJe0lzZkPKULvHwqHzfZXTDHc%3D&amp;Expires=1363647083&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=ukm64IUANwE" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/ukm64IUANwE/hqdefault.jpg"></media:thumbnail></item><item><title>Testing and Django</title><link>http://www.pyvideo.org/video/699/testing-and-django</link><description>&lt;p&gt;Abstract&lt;/p&gt;
A deep dive into writing tests with Django, covering Django's custom test-
suite-runner and the testing utilities in Django, what all they actually do,
how you should and shouldn't use them (and some you shouldn't use at all!).
Also, guidelines for writing good tests (with or without Django), and my least
favorite things about testing in Django (and how I'd like to fix them).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Meyer</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/699/testing-and-django</guid><enclosure url="https://www.youtube.com/watch?v=ickNQcNXiS4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/ickNQcNXiS4/hqdefault.jpg"></media:thumbnail></item><item><title>Reverse-engineering Ian Bicking's brain: inside pip and virtualenv</title><link>http://www.pyvideo.org/video/389/pycon-2011--reverse-engineering-ian-bicking--39-s</link><description>&lt;p&gt;Description&lt;/p&gt;
Reverse-engineering Ian Bicking's brain: inside pip and virtualenv

Presented by Carl Meyer

Pip and virtualenv: many use them; not so many understand just how they work
their magic. If you're a pip/virtualenv user but haven't yet dared crack the
lid (or you have, and found it a bit difficult to follow), come along for a
fast-paced guided tour. Knowing these tools will help you make more effective
use of them, and might also turn you into a contributor.

Abstract

Pip and virtualenv are widely used in the Python world, but for the size of
their user base don't receive many code contributions, and many users have
misconceptions about how they actually work.

This talk will cover a bit of advanced use of pip and virtualenv, but mostly
we'll dive into the source code, mapping it out with a high-level view and
diving into the guts of particularly interesting bits. By the end of the talk,
you'll have a good idea exactly how pip and virtualenv do their magic, and
where to go looking in the source for particular behaviors or bug fixes. We'll
walk through the creation of a virtualenv step-by-step, and trace a typical
"pip install -r requirements.txt" and "pip uninstall" through the code paths
they follow.

I'll know the talk was a success when I see the pull requests!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Meyer</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/389/pycon-2011--reverse-engineering-ian-bicking--39-s</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2011/389_reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv.mp4" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2011ReverseengineeringIanBickingsBrainInsidePipAnd764.png"></media:thumbnail></item><item><title>Reverse-engineering Ian Bicking's brain: inside pip and virtualenv.</title><link>http://www.pyvideo.org/video/568/reverse-engineering-ian-bicking--39-s-brain--insi</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Pip and virtualenv: many use them; not so many understand just how they work
their magic. If you're a pip/virtualenv user but haven't yet dared crack the
lid (or you have, and found it a bit difficult to follow), come along for a
fast-paced guided tour. Knowing these tools will help you make more effective
use of them, and might also turn you into a contributor.


&lt;p&gt;Description&lt;/p&gt;
  * 1 [http://us.pycon.org/2011/schedule/sessions/198/](http://us.pycon.org/2011/schedule/sessions/198/)
  * 2 [http://pip.openplans.org/](http://pip.openplans.org/)
  * 3 [http://virtualenv.openplans.org/](http://virtualenv.openplans.org/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Meyer</dc:creator><pubDate>Thu, 10 Feb 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/568/reverse-engineering-ian-bicking--39-s-brain--insi</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/568_reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv.m4v" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/568_reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv.m4v" mime_type="video/mp4"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/568_reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv.flv" mime_type="video/x-flv"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-ReverseengineeringIanBickingsBrainInsidePipAndVirtualenv225.png"></media:thumbnail></item></channel></rss>
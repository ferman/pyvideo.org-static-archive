<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Max Tepkeev</title><link>http://www.pyvideo.org/speaker/1173/max-tepkeev/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1173/max-tepkeev/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Wed, 23 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>How we switched our 800+ projects from Apache to uWSGI</title><link>http://www.pyvideo.org/video/3011/how-we-switched-our-800-projects-from-apache-to</link><description>&lt;p&gt;Abstract&lt;/p&gt;
During the last 7 years the company I am working for developed more than 800 projects in PHP and Python. All this time we were using Apache+nginx for hosting this projects. In this talk I will explain why we decided to switch all our projects from Apache+nginx to uWSGI+nginx and how we did that.
&lt;p&gt;Description&lt;/p&gt;
The talk will start from describing the setup we had for the last 7 years, i.e. Apache with mod_wsgi for Python projects and mod_php4/5 for PHP projects + nginx. I will explain why we used this setup for so long time, what problems we faced with this setup and what solutions we tried to solve them before switching to uWSGI.

Then I will tell about uWSGI, what it is, how it works and what features it has. I will show the comparison of configuration files, how simple it is to configure uWSGI compared to Apache.

Lastly I will explain how we managed to switch all our 800+ projects developed over the years in 2 different languages with 2 major versions changed (PHP4/5 and Python2/3), how this switch simplified our development and administration of this projects, the improvements we got in memory management and other areas.

Of course I will concentrate mainly on our Python projects because it is EuroPython after all and not EuroPHP ;-)</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Tepkeev</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3011/how-we-switched-our-800-projects-from-apache-to</guid><enclosure url="http://www.youtube.com/watch?v=e8Fz3bxPFC4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/e8Fz3bxPFC4/hqdefault.jpg"></media:thumbnail></item><item><title>Table Partitioning with Django</title><link>http://www.pyvideo.org/video/2435/table-partitioning-with-django</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Table partitioning can be thought of as a division of one large table into several smaller tables which represent that original table. Table partitioning is "transparent", that means that in theory you don't need to change any code to work with partitioned tables.

We will talk about table partitioning theory in general and implementations in different database servers. Why and when we need to do table partitioning. What problems we can face and how we can solve them.

Django provides us with great database abstraction and ORM, but how can we use it with table partitioning ? We will talk about existing libraries for Django to work with table partitioning, their differences, which is the best (if any) and why.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Tepkeev</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2435/table-partitioning-with-django</guid><enclosure url="https://www.youtube.com/watch?v=1VyTtm2YheY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/1VyTtm2YheY/hqdefault.jpg"></media:thumbnail></item></channel></rss>
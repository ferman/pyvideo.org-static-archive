<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Iwan Vosloo</title><link>http://www.pyvideo.org/speaker/1998/iwan-vosloo/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1998/iwan-vosloo/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 02 Oct 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>What's the point of Object Orientation?</title><link>http://www.pyvideo.org/video/3939/whats-the-point-of-object-orientation</link><description>&lt;p&gt;Description&lt;/p&gt;
Object Orientation (OO) is often introduced in terms of how it is implemented by a specific language. However, understanding the theory underlying OO is not quite the same as understanding how OO concepts are supported by a particular language. It is insightful to understand the simple OO fundamentals and how these map to the particular implementation provided by Python.

In this talk I will first explain the very basics of OO from a language-neutral point of view with the aim of showing what OO can offer you. I will touch upon the simple mathematical theory underlying OO and how it can be used as a mental discipline to improve your natural capacity to reason about programs. I hope to give you enough information to help you distinguish between better and worse designs and to detect whether you're using OO as it was intended. I will show how these fundamentals map to Python, and compare the difference of Python's implementation to that of some other languages (even functional languages).

This talk is for anyone: whether you're new at Object Orientation, or a practitioner wondering whether OO is worth the effort you've spent trying to use it.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iwan Vosloo</dc:creator><pubDate>Fri, 02 Oct 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3939/whats-the-point-of-object-orientation</guid><enclosure url="http://youtu.be/M1XL65qj2dU" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/M1XL65qj2dU/hqdefault.jpg"></media:thumbnail></item><item><title>The elephant in the web application</title><link>http://www.pyvideo.org/video/3827/the-elephant-in-the-web-application</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Developing a web application today is an unnecessarily cumbersome and error prone task. It is time for web frameworks to evolve and become more like graphical user interface (GUI) frameworks
&lt;p&gt;Description&lt;/p&gt;
In this talk, I'd like to convince you that developing a web application today is an unnecessarily cumbersome and error prone task. It is time for web frameworks to evolve and become more like graphical user interface (GUI) frameworks: these provide abstractions called "windows" or "widgets" that let a programmer write an application using terms that describe what is being built, with less (if any) focus on the underlying technologies needed to accomplish drawing these items on a screen.
A web application programmer (in contrast to a GUI programmer) needs to know quite a few different technologies and a fair bit of effort is required to orchestrate these tools into achieving an end result: a template language, HTML, HTTP, CSS, JavaScript, etc. Reusing something substantial is especially difficult, which means in a sizeable web application the same dragons need to be fought several times over. If a programmer has to constantly deal with all this subject matter, it takes focus away from what actually needs to be built: the application itself.
Why are we putting up with having to know HTML and similar low-level technologies? Is it an elephant in the room? Something we pretend not to see, yet we accept the burden of having to work around it?
I will show you what it takes to build a web application; what repetitive tasks there are and what a programmer needs to be aware of. I hope to convince you that there's a better way, and that what was perhaps an idealistic dream a decade ago can now be done - not only by our own fully-featured Python web framework (Reahl), but also by a small number of others beyond the realm of Python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iwan Vosloo</dc:creator><pubDate>Thu, 02 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3827/the-elephant-in-the-web-application</guid><enclosure url="http://archive.org/download/pyconza2014-elephant-in-the-web-app/2%20A%20The%20elephant%20in%20the%20web%20application-.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://archive.org/download/pyconza2014-elephant-in-the-web-app/2%20A%20The%20elephant%20in%20the%20web%20application-.ogv" mime_type="video/ogg"></media:content><media:content url="http://archive.org/download/pyconza2014-elephant-in-the-web-app/2%20A%20The%20elephant%20in%20the%20web%20application-.mp4" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://archive.org/download/pyconza2014-elephant-in-the-web-app/pyconza2014-elephant-in-the-web-app.thumbs/2%20A%20The%20elephant%20in%20the%20web%20application-_001410.jpg"></media:thumbnail></item></channel></rss>
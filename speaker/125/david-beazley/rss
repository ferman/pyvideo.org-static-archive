<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of David Beazley</title><link>http://www.pyvideo.org/speaker/125/david-beazley/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/125/david-beazley/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 11 Apr 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 1 of 3)</title><link>http://www.pyvideo.org/video/213/pycon-2009--a-curious-course-on-coroutines-and-co</link><description>&lt;p&gt;Description&lt;/p&gt;
A Curious Course on Coroutines and Concurrency (part 1 of 3)

  
Presented at PyCon 2009 by David Beazley

  
If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first introduced
in Python 2.5, coroutines remain one of Python's most overlooked features---
often vaguely described as a curious "extension" of generator functions with
little insight as to how they might be applied to real-world problems. This
tutorial examines coroutines in a more practical light by showing how they are
actually a very elegant way to implement a processing "task." Using this task
abstraction, it is possible to use coroutines to implement processing
pipelines, event handling systems, and programs based on cooperative
multitasking. Moreover, if you define tasks using coroutines, they can be
easily incorporated into more traditional concurrent programs that utilize
threads or message passing.

  
[VIDEO HAS ISSUES: bit of clipping start to finish.]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><guid>http://www.pyvideo.org/video/213/pycon-2009--a-curious-course-on-coroutines-and-co</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2009/213_pycon-2009-a-curious-course-on-coroutines-and-concurrency-part-1-of-3.mp4" length="1040643135" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-ACuriousCourseOnCoroutinesAndConcurrencyPart001109-911.jpg"></media:thumbnail></item><item><title>Python Concurrency From the Ground Up: LIVE!</title><link>http://www.pyvideo.org/video/3432/python-concurrency-from-the-ground-up-live</link><description>&lt;p&gt;Description&lt;/p&gt;
There are currently three popular approaches to Python concurrency: threads, event loops, and coroutines. Each is shrouded by various degrees of mystery and peril.  In this talk, all three approaches will be deconstructed and explained in a epic ground-up live coding battle.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3432/python-concurrency-from-the-ground-up-live</guid><enclosure url="https://www.youtube.com/watch?v=MCs5OvhV9S4" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/MCs5OvhV9S4/hqdefault.jpg"></media:thumbnail></item><item><title>Modules and Packages: Live and Let Die!</title><link>http://www.pyvideo.org/video/3387/modules-and-packages-live-and-let-die</link><description>&lt;p&gt;Description&lt;/p&gt;
All Python programmers use the import statement, but do you really know how it works and what it allows?  This tutorial aims to take a deep dive into every diabolical issue related to modules, packages, and imports.   When we're done, you'll finally be ready to unleash your million line micro framework on the world! 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Fri, 10 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3387/modules-and-packages-live-and-let-die</guid><enclosure url="https://www.youtube.com/watch?v=0oTh1CXRaQ0" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/0oTh1CXRaQ0/hqdefault.jpg"></media:thumbnail></item><item><title>Discovering Python</title><link>http://www.pyvideo.org/video/2645/discovering-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
So, what happens when you lock a Python programmer in a secret vault containing 1.5 TBytes of C++ source code and no internet connection? Find out as I describe how I used Python as a secret weapon of "discovery" in an epic legal battle.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2645/discovering-python</guid><enclosure url="http://www.youtube.com/watch?v=RZ4Sn-Y7AP8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/RZ4Sn-Y7AP8/hqdefault.jpg"></media:thumbnail></item><item><title>Generators: The Final Frontier</title><link>http://www.pyvideo.org/video/2575/generators-the-final-frontier</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python generators have long been useful for solving all sorts of problems involving iteration and data flow. However, one of their more powerful uses is in customizing various aspects of program control flow. In this tutorial, we'll look at some more exotic uses of generators such as writing context managers, inlining callback functions, eliminating recursion, implementing actors, and more.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2575/generators-the-final-frontier</guid><enclosure url="http://www.youtube.com/watch?v=D1twn9kLmYg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/D1twn9kLmYg/hqdefault.jpg"></media:thumbnail></item><item><title>Python: A "Toy" Language</title><link>http://www.pyvideo.org/video/1729/python-a-toy-language</link><description>&lt;p&gt;Abstract&lt;/p&gt;
A very special guest speaker will talk about solving important "toy" problems with Python.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1729/python-a-toy-language</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Using_Python_To_Generate_Art_A.mp4?Signature=7Nc1cs0IOCoBx8ksi5b13PHc2ho%3D&amp;Expires=1363819814&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Using_Python_To_Generate_Art_A.mp4?Signature=7Nc1cs0IOCoBx8ksi5b13PHc2ho%3D&amp;Expires=1363819814&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=BWyDA5y6TIg" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i3.ytimg.com/vi/BWyDA5y6TIg/hqdefault.jpg"></media:thumbnail></item><item><title>Python 3 Metaprogramming</title><link>http://www.pyvideo.org/video/1716/python-3-metaprogramming</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Some of the most significant changes in Python 3 are related to metaprogramming.  In this tutorial, I'll cover decorators, class decorators, descriptors, and metaclasses.  However, the focus will be on idioms and examples that are only made possible using features that are unique to Python 3.  For instance, making free use of function annotations, signatures, new metaclass features and more.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Thu, 14 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1716/python-3-metaprogramming</guid><enclosure url="https://www.youtube.com/watch?v=sPiWg5jSoZI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/sPiWg5jSoZI/hqdefault.jpg"></media:thumbnail></item><item><title>Learn Python Through Public Data Hacking</title><link>http://www.pyvideo.org/video/1725/learn-python-through-public-data-hacking</link><description>&lt;p&gt;Abstract&lt;/p&gt;
What's more fun than learning Python? Learning Python by hacking on public data! In this tutorial, you'll learn Python basics by reading files, scraping the web, building data structures, and analyzing real world data. By the end, you will have set up your Python environment, installed some useful packages, and learned how to write simple programs that you can use to impress your friends. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Wed, 13 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1725/learn-python-through-public-data-hacking</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Learn_Python_Through_Public_Da.mp4?Signature=GEpPDpj7lRHyx2wX9Vv81mEsyNE%3D&amp;Expires=1364743678&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Learn_Python_Through_Public_Da.mp4?Signature=GEpPDpj7lRHyx2wX9Vv81mEsyNE%3D&amp;Expires=1364743678&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=RrPZza_vZ3w" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/RrPZza_vZ3w/hqdefault.jpg"></media:thumbnail></item><item><title>David Beazley Keynote: Tinkering with PyPy</title><link>http://www.pyvideo.org/video/659/keynote-david-beazley</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/659/keynote-david-beazley</guid><enclosure url="https://www.youtube.com/watch?v=l_HBRhcgeuQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/l_HBRhcgeuQ/hqdefault.jpg"></media:thumbnail></item><item><title>Using Python 3 to Build a Cloud Computing Service for my Superboard II</title><link>http://www.pyvideo.org/video/443/pycon-2011--using-python-3-to-build-a-cloud-compu</link><description>&lt;p&gt;Description&lt;/p&gt;
Using Python 3 to Build a Cloud Computing Service for my Superboard II

Presented by David Beazley

The OSI Superboard II was the computer on which I first learned to program
back in 1979. Python is why programming remains fun today. In this tale of old
meets new, I describe how I have used Python 3 to create a cloud computing
service for my still-working Superboard--a problem complicated by it only
having 8Kb of RAM and 300-baud cassette tape audio ports for I/O.

Abstract

Python 3, what good is it? Cloud computing? Bah! In this talk, I describe how
I have used Python 3 to build a distributed cloud-computing service for my
Superboard II system. Originally built in 1978, the Superboard is an obvious
candidate for cloud computing due to its extremely constrained memory (8Kb),
slow processor (a 1Mhz 6502), crippled I/O (300 baud over audio), and retro
programming environment (Microsoft Basic 1.0). The only question is how to do
it?

To answer that question, this talk consist of two main parts. In the first
part, I discuss the problem of building a communications stack between the
Superboard and a Mac using nothing but audio line-in/line-out ports--a problem
involving a tricky I/O handling, real-time audio signal processing, and the
creation of a data-link layer communication protocol. In the second part, I
discuss the creation of a distributed cloud-computing service and related
topics including messaging systems, key-value stores, map-reduce, etc.

The primary implementation language for all of this work is Python 3.
Throughout the talk, I will mention interesting Python 3 programming idioms
along with pros and cons. I'll conclude by summarizing my experience trying to
build a significant project entirely in Python 3.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/443/pycon-2011--using-python-3-to-build-a-cloud-compu</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2011/443_using-python-3-to-build-a-cloud-computing-service-for-my-superboard-ii.mp4" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2011UsingPython3ToBuildACloudComputingServiceFor438.png"></media:thumbnail></item><item><title>Vintage 1978 Superboard II hacking with some Python3 and ZeroMQ</title><link>http://www.pyvideo.org/video/569/vintage-1978-superboard-ii-hacking-with-some-pyth</link><description>&lt;p&gt;Abstract&lt;/p&gt;
I'm not sure if we're still looking for talks on Thursday, but if so, I'd like
to volunteer to give a talk about using Python to do some retro-computing
hacking involving my vintage 1978 Superboard II. It's not exactly robotics,
but it involves hardware and a lot of low-level hacking (along with some
Python3 and ZeroMQ thrown in for good measure ;-).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Thu, 13 Jan 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/569/vintage-1978-superboard-ii-hacking-with-some-pyth</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/569_vintage-1978-superboard-ii-hacking-with-some-python3-and-zeromq.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/569_vintage-1978-superboard-ii-hacking-with-some-python3-and-zeromq.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/569_vintage-1978-superboard-ii-hacking-with-some-python3-and-zeromq.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-Vintage1978SuperboardIIHackingWithSomePython3AndZeroMQ478.png"></media:thumbnail></item><item><title>Mastering Python 3 I/O (part 1)</title><link>http://www.pyvideo.org/video/289/pycon-2010--mastering-python-3-i-o</link><description>&lt;p&gt;Description&lt;/p&gt;
Mastering Python 3 I/O

  
Presented by David Beazley

  
As most Python programmers know, Python 3 breaks backwards compatibility with
Python 2 in a number of significant ways. Although guides to Python 3 tend to
focus on superficial incompatibilities such as the new print function, changes
to exception handling, or new language features, the most substantial changes
concern the strict separation of Unicode and bytes as well as the new I/O
stack. Not only do these changes have far-reaching effects throughout the
standard library, but changes to I/O are likely to be the most major source of
problems for anyone porting an existing Python application to Python 3. In
this tutorial, we're going to take a top-to-bottom tour of the entire Python 3
I/O system. We'll focus on how to properly handle both text and binary data,
changes to standard library modules, examine advanced features such as the
buffer API, perform some performance experiments, and end with practical
advice for programmers working on porting applications from Python 2 to 3.
Intended Audience

  
Intermediate to advanced Python programmers who are either developing new
applications or contemplating a migration to Python 3. Attendees should
already be familiar with the basics of Python programming including standard
datatypes and commonly used library modules. A background in systems
programming topics such as file handling, subprocesses, and socket programming
is also recommended. Class Outline

  * Introducing Python 3 (with a focus on I/O) 
  * Text Processing 
  * Binary Data Handling 
  * Dealing with System Interfaces and External Programs 
  * The New io library 
  * Network programming 
  * The revised buffer API and direct I/O 
  * Porting from Python 2 to 3. 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/289/pycon-2010--mastering-python-3-i-o</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/289_mastering-python-3-i-o.ogv" length="411662419" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/289_mastering-python-3-i-o.ogv" fileSize="411662419" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/289_mastering-python-3-i-o.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010MasteringPython3IO499.png"></media:thumbnail></item><item><title>Understanding the Python GIL (#82)</title><link>http://www.pyvideo.org/video/353/pycon-2010--understanding-the-python-gil---82</link><description>&lt;p&gt;Description&lt;/p&gt;
Understanding the Python GIL

  
Presented by David Beazley

  
The Python Global Interpreter Lock (GIL) is a frequent source of debate and
concern for programmers working with threads and concurrency. Although most
Python programmers generally know that the GIL restricts Python's ability to
utilize multiple CPUs, few know the inner details of how it actually works and
how it impacts applications. This talk will dive into the inner workings of
the GIL like you've never seen before. Topics include details about the
execution of the Python interpreter, thread implementation, the GILs
surprising behavior on multicore CPUs, and more.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/353/pycon-2010--understanding-the-python-gil---82</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/353_understanding-the-python-gil-82.ogv" length="303360649" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/353_understanding-the-python-gil-82.ogv" fileSize="303360649" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/353_understanding-the-python-gil-82.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010UnderstandingThePythonGIL82660.png"></media:thumbnail></item><item><title>Changes to the GIL in Python 3</title><link>http://www.pyvideo.org/video/580/changes-to-the-gil-in-python-3</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Follow-up to David's last GIL talk in June 2009. This presentation walks
through changes to the GIL that are being made.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Thu, 14 Jan 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/580/changes-to-the-gil-in-python-3</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/580_changes-to-the-gil-in-python-3.ogv" length="None" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-ChangesToTheGILInPython3492.png"></media:thumbnail></item><item><title>Mindblowing Python GIL</title><link>http://www.pyvideo.org/video/588/mindblowing-python-gil</link><description>&lt;p&gt;Description&lt;/p&gt;
Mindblowing Python GIL

  
Presented by David Beazley at ChiPy on June 11, 2009

  
David Beazley: mind-blowing presentation about how the Python GIL actually
works and why it's even worse than most people even imagine.

  
Slides:
[http://www.dabeaz.com/python/GIL.pdf](http://www.dabeaz.com/python/GIL.pdf)

  
[VIDEO HAS PROBLEMS: audio is fuzzy]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Thu, 11 Jun 2009 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/588/mindblowing-python-gil</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/588_mindblowing-python-gil.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-mindblowing_Python_GIL693-605.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Giovanni Bajo</title><link>http://www.pyvideo.org/speaker/510/giovanni-bajo/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/510/giovanni-bajo/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Wed, 20 Jul 2011 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Debugging and profiling techniques</title><link>http://www.pyvideo.org/video/1056/debugging-and-profiling-techniques</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Giovanni Bajo - 22 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
This talk will give on overview over some common problems related to profiling
and debugging CPython applications (especially desktop-based ones).

The following subjects will be covered:

  * Debugging of memory/resource leaks (circular references, **del**, weakref, garbage collector, etc.). We will show in details how the memory management of Python objects work and we will show a few tricks to track memory leaks
  * Python code profiling (profile/hotshots/cProfile, design of small tests, etc.). We will show how to measure, profile, and analyse an application to spot performance problems and solve them.
  * Post-mortem step-by-step debugging of C/C++ extension under Windows. We will show how to setup Visual Studio for debugging, how to see a traceback in case of an unexpected segfault, and how to further debug and solve the crash.

This talk is aimed at intermediate Python programmers, who have already
developed non-trivial Python applications but have never "jumped through" the
interpreter abstraction layer. If you feel a little lost when you see a
segfault from a Python program or you don't have a clear idea how memory is
collected in Python, this talk is perfect for you.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1056/debugging-and-profiling-techniques</guid><enclosure url="http://www.youtube.com/watch?v=6jD34p8PokU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/6jD34p8PokU/hqdefault.jpg"></media:thumbnail></item><item><title>Distributing Python programs through PyInstaller</title><link>http://www.pyvideo.org/video/1054/distributing-python-programs-through-pyinstaller</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Giovanni Bajo - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
The talk will focus on how to distribute multi-platform proprietary Python
applications, using [PyInstaller](http://www.pyinstaller.org).

PyInstaller takes a program written in Python and turns it into a static
executable (binary) that does not depend upon an existing Python installation,
nor third party library. The executable can then be packed and shipped in many
different ways (through installer wizards, deb/rpm packages, etc.).

PyInstaller is a good multi-platform alternative to tools like py2exe and
py2app, but it found troubles to gain acceptance in a market that seems
strongly tied to older tools. Instead, PyInstaller puts forward important new
features: for instance, it works on the most important desktop platforms
(Windows, Linux/UNIX, Mac), and it has got an automatic and fully transparent
support for all the workarounds needed to make applications using complex
libraries like Matplotlib or PyQt work within a static executable.

In detail, the following points will be discussed:

  * Distribution of a priopriertary software: initial requests
  * PyInstaller: how it works (basic tutorial)
  * The secrets of PyInstaller: technical details
  * Import hooks: effectively handling third party extensions
  * Flexibility with PyInstaller: what goes in and what stays out
  * Linux: static binaries for a single distribution or cross-distributions
  * Mac: creation of bundles for graphic applications

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1054/distributing-python-programs-through-pyinstaller</guid><enclosure url="http://www.youtube.com/watch?v=MoL2nDYcW1U" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/MoL2nDYcW1U/hqdefault.jpg"></media:thumbnail></item><item><title>Distributing Python programs through PyInstaller</title><link>http://www.pyvideo.org/video/1151/distributing-python-programs-through-pyinstaller-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Giovanni Bajo - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
The talk will focus on how to distribute multi-platform proprietary Python
applications, using [PyInstaller](http://www.pyinstaller.org).

PyInstaller takes a program written in Python and turns it into a static
executable (binary) that does not depend upon an existing Python installation,
nor third party library. The executable can then be packed and shipped in many
different ways (through installer wizards, deb/rpm packages, etc.).

PyInstaller is a good multi-platform alternative to tools like py2exe and
py2app, but it found troubles to gain acceptance in a market that seems
strongly tied to older tools. Instead, PyInstaller puts forward important new
features: for instance, it works on the most important desktop platforms
(Windows, Linux/UNIX, Mac), and it has got an automatic and fully transparent
support for all the workarounds needed to make applications using complex
libraries like Matplotlib or PyQt work within a static executable.

In detail, the following points will be discussed:

  * Distribution of a priopriertary software: initial requests
  * PyInstaller: how it works (basic tutorial)
  * The secrets of PyInstaller: technical details
  * Import hooks: effectively handling third party extensions
  * Flexibility with PyInstaller: what goes in and what stays out
  * Linux: static binaries for a single distribution or cross-distributions
  * Mac: creation of bundles for graphic applications

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1151/distributing-python-programs-through-pyinstaller-0</guid><enclosure url="http://www.youtube.com/watch?v=MRjpZCw8Fg8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/MRjpZCw8Fg8/hqdefault.jpg"></media:thumbnail></item><item><title>Debugging and profiling techniques</title><link>http://www.pyvideo.org/video/1157/debugging-and-profiling-techniques-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Giovanni Bajo - 22 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
This talk will give on overview over some common problems related to profiling
and debugging CPython applications (especially desktop-based ones).

The following subjects will be covered:

  * Debugging of memory/resource leaks (circular references, **del**, weakref, garbage collector, etc.). We will show in details how the memory management of Python objects work and we will show a few tricks to track memory leaks
  * Python code profiling (profile/hotshots/cProfile, design of small tests, etc.). We will show how to measure, profile, and analyse an application to spot performance problems and solve them.
  * Post-mortem step-by-step debugging of C/C++ extension under Windows. We will show how to setup Visual Studio for debugging, how to see a traceback in case of an unexpected segfault, and how to further debug and solve the crash.

This talk is aimed at intermediate Python programmers, who have already
developed non-trivial Python applications but have never "jumped through" the
interpreter abstraction layer. If you feel a little lost when you see a
segfault from a Python program or you don't have a clear idea how memory is
collected in Python, this talk is perfect for you.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1157/debugging-and-profiling-techniques-0</guid><enclosure url="http://www.youtube.com/watch?v=J29uIkdmHs8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/J29uIkdmHs8/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Alex Gaynor</title><link>http://www.pyvideo.org/speaker/28/alex-gaynor/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/28/alex-gaynor/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 11 Jul 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>A Summer in the Wild</title><link>http://www.pyvideo.org/video/68/djangocon-2011--a-summer-in-the-wild</link><description>&lt;p&gt;Description&lt;/p&gt;
A summer in the wild

Presented by Alex Gaynor

I've spent this past summer away from Django, working for Quora, venturing
into the depths of a foreign codebase, and making it faster by running on
PyPy. This talk will feature the lessons I've learned about Django, PyPy, and
web development in general.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><guid>http://www.pyvideo.org/video/68/djangocon-2011--a-summer-in-the-wild</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2011/68_a-summer-in-the-wild.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-ASummerInTheWild519-270.jpg"></media:thumbnail></item><item><title>PyOhio 2010: PyPy and Unladen Swallow: Making your Python Fast</title><link>http://www.pyvideo.org/video/503/pyohio-2010--pypy-and-unladen-swallow--making-you</link><description>&lt;p&gt;Description&lt;/p&gt;
PyPy and Unladen-Swallow: Making your Python Fast

Presented by Alex Gaynor

Python has a reputation for being a bit slow, but it doesn't have to be that
way. This talk will cover why Python is slow, and what two of the most
exciting virtual machines are doing about it.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><guid>http://www.pyvideo.org/video/503/pyohio-2010--pypy-and-unladen-swallow--making-you</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pyohio-2010/503_pyohio-2010-pypy-and-unladen-swallow-making-your-python-fast.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pyohio-PyPyAndUnladenSwallowMakingYourPythonFast653.png"></media:thumbnail></item><item><title>Rethinking the Reusable Application Paradigm</title><link>http://www.pyvideo.org/video/51/djangocon-2010--rethinking-the-reusable-applicati</link><description>&lt;p&gt;Description&lt;/p&gt;
Rethinking the Reusable Application Paradigm

Presented by Alex Gaynor

For the past few years the reusable application paradigm has been considered
one of the major selling points of Django, however the common wisdom about
what it means to make an application reusable isn't really accurate. This talk
is going to discuss ways to truly make your applications reusable across *any*
project.

Abstract

The common wisdom about reusable application says to do things like let your
views take arguments for things like the form class or the template name.
However, that doesn't satisfy most of the real need for extendability:
changing the business logic or altering models. This talk is going to look at
ways to combat these limitations:

  * Class based views 
  * By making everything overidable in a view you can absolutely minimize the need to "copy-paste" when changing the logic of things around. 
  * As seen in the admin. 
  * Do less 
  * brabeion 
  * Provide the absolute minimum at the model layer, and only small wrappers for the business logic users can implement their own logic to control how things happen. 
  * Related to the idea of "application frameworks". Providing the tools for others to build their logic around various helpers. 
  * Flexibility 
  * django-taggit 
  * Provide a concrete implementation, but allow swapping out of various layers. 
  * Don't like the Tag model, swap it out, want a new intermediary model, swap it out. 
  * django-registration 
  * Providing swappable backends to change behavior. 
  * Libraries 
  * django-filter 
  * django-fixture-generator 
  * django-templatetag-sugar 
  * django-compressor 
  * Providing tools for others to build around. 

By using these techniques you can develop reusable application that work
beyond any single use case. Of course there are cases where you don't need any
of these, and just need something that fits "traditional" reusable application
paradigm, so this talk will cover when that works as well.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><guid>http://www.pyvideo.org/video/51/djangocon-2010--rethinking-the-reusable-applicati</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/51_rethinking-the-reusable-application-paradigm.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-RethinkingTheReusableApplicationParadigm774.png"></media:thumbnail></item><item><title>7 Years With Django: To Core Developer and Back</title><link>http://www.pyvideo.org/video/3655/7-years-with-django-to-core-developer-and-back</link><description>&lt;p&gt;Description&lt;/p&gt;
One night, in September 2007, I read every page of Django's documentation and the entire (then draft) Django Book. Over the next few years I became a frequent contributor to Django, including becoming a core developer and later a member of the DSF board. Now I'm largely uninvolved with Django's development. This talk is the story of my time with Django. This talk is a walk through my time with Django -- from emailing Adrian to ask about attending a sprint that had already happened, to contributing patches, to the multi-db GSOC, to Eric Florenzano's keynote, becoming a core developer, joining the board, to slowly fading away and becoming an emeritus developer.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Sat, 11 Jul 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3655/7-years-with-django-to-core-developer-and-back</guid><enclosure url="http://youtu.be/3IGbdwU1aXQ" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/3IGbdwU1aXQ/hqdefault.jpg"></media:thumbnail></item><item><title>Techniques for Debugging Hard Problems</title><link>http://www.pyvideo.org/video/3485/techniques-for-debugging-hard-problems</link><description>&lt;p&gt;Description&lt;/p&gt;
Sometimes your programs have bugs. Often they're shallow things, simple AttributeErrors or TypeErrors. Sometimes they're large, complex, and nearly impossible to debug. This talk explores techniques for figuring these out.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3485/techniques-for-debugging-hard-problems</guid><enclosure url="https://www.youtube.com/watch?v=ij99SGGEX34" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/ij99SGGEX34/hqdefault.jpg"></media:thumbnail></item><item><title>Fast Python, Slow Python</title><link>http://www.pyvideo.org/video/2627/fast-python-slow-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The common wisdom is that Python is slow. And yet people run high performance software on it. It's hard to make Python fast, and yet there are incredibly high performance Python VMs. This talk breaks down the facts and the myths of Python performance.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2627/fast-python-slow-python</guid><enclosure url="http://www.youtube.com/watch?v=7eeEf_rAJds" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/7eeEf_rAJds/hqdefault.jpg"></media:thumbnail></item><item><title>Pickles are for Delis, not Software</title><link>http://www.pyvideo.org/video/2566/pickles-are-for-delis-not-software</link><description>&lt;p&gt;Abstract&lt;/p&gt;
You may have encountered the pickle or cPickle libraries, and used them to persist some state about your program. But how do they work? This talk explores how the pickle protocol works, what its advantages are, and its disadvantages</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2566/pickles-are-for-delis-not-software</guid><enclosure url="http://www.youtube.com/watch?v=7KnfGDajDQw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/7KnfGDajDQw/hqdefault.jpg"></media:thumbnail></item><item><title>Why Open Source Works</title><link>http://www.pyvideo.org/video/2299/why-open-source-works</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Open source software powers the world. But it defies a lot of conventional expectations about how people organize and innovate. This talk will explore the psychology, sociology, and economics of open source, and how we come together to effectively build things.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Sun, 11 Aug 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2299/why-open-source-works</guid><enclosure url="http://www.youtube.com/watch?v=2uqirAMJr7U" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/2uqirAMJr7U/hqdefault.jpg"></media:thumbnail></item><item><title>Computer Science, Software Engineering, and the Scientific Method</title><link>http://www.pyvideo.org/video/2196/computer-science-software-engineering-and-the-s</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Classifying what type of job programmers do can be a challenge. Are we engineers? Are we scientists? Craftspeople? Something else entirely? Are software engineers, software developers, software architects, and programmers all really the same thing? This talk explores the nature of our work, and its relationship to the scientific method, including a dive into epistemology.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2196/computer-science-software-engineering-and-the-s</guid><enclosure url="http://s3.us.archive.org/ndvpyconau2013/Computer_Science_Software_Engi.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvpyconau2013/Computer_Science_Software_Engi.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=_xpKFWzMceE" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/_xpKFWzMceE/hqdefault.jpg"></media:thumbnail></item><item><title>Keynote: A divided web, a review of the role of frameworks</title><link>http://www.pyvideo.org/video/2241/keynote-a-divided-web-a-review-of-the-role-of-f</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2241/keynote-a-divided-web-a-review-of-the-role-of-f</guid><enclosure url="http://s3.us.archive.org/ndvpyconau2013/Keynote_A_divided_web_a_review.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvpyconau2013/Keynote_A_divided_web_a_review.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=wk0b2PYJAXA" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/wk0b2PYJAXA/hqdefault.jpg"></media:thumbnail></item><item><title>So you want to write an interpreter?</title><link>http://www.pyvideo.org/video/1694/so-you-want-to-write-an-interpreter</link><description>&lt;p&gt;Abstract&lt;/p&gt;
You're a programmer, you use interpreter and compilers every day (and twice on Sundays!). But how do these things work? Could you build one yourself? What would it take? Where would you start? This talk takes you through the process, from lexing to interpreting, and leaves you ready to start on your own language!</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1694/so-you-want-to-write-an-interpreter</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/So_you_want_to_write_an_interp.mp4?Signature=KHGOwHvgkcb1g1ppO%2FtB5xCa2YQ%3D&amp;Expires=1363640043&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/So_you_want_to_write_an_interp.mp4?Signature=KHGOwHvgkcb1g1ppO%2FtB5xCa2YQ%3D&amp;Expires=1363640043&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=LCslqgM48D4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/LCslqgM48D4/hqdefault.jpg"></media:thumbnail></item><item><title>PyConZA 2012: Scaling Django: serving traffic and growing your team</title><link>http://www.pyvideo.org/video/3896/pyconza-2012-scaling-django-serving-traffic-and</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Scaling Django: serving traffic and growing your team: Alex Gaynor's talk at PyConZA 2012</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Thu, 04 Oct 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3896/pyconza-2012-scaling-django-serving-traffic-and</guid><enclosure url="http://archive.org/download/pyconza2012-scaling_django/pyconza2012-scaling_django.ogv" length="None" type="video/ogg"></enclosure><media:thumbnail url="http://archive.org/download/pyconza2012-scaling_django/pyconza2012-scaling_django.thumbs/Alex_Talk_on_Scalability_000001.jpg"></media:thumbnail></item><item><title>Take Two: If I got to do it all over again</title><link>http://www.pyvideo.org/video/1396/take-two-if-i-got-to-do-it-all-over-again</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Django has always had a strong commitment to backwards compatibility, and is
used by thousands of developers every day. This means that it's very difficult
to make large sweeping changes to Django. This talk is a look at how I'd
redesign different components of Django, if I got to do it all over again.


&lt;p&gt;Description&lt;/p&gt;
This talk has two parts.

First, identifying the principles we're trying to adhere to, and the problems
we're trying to solve by re-imagining every single API.

Second, looking at specific changes to individual APIs.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Tue, 04 Sep 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1396/take-two-if-i-got-to-do-it-all-over-again</guid><enclosure url="http://www.youtube.com/watch?v=0FD510Oz2e4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/0FD510Oz2e4/hqdefault.jpg"></media:thumbnail></item><item><title>Why PyPy by example</title><link>http://www.pyvideo.org/video/661/why-pypy-by-example</link><description>&lt;p&gt;Abstract&lt;/p&gt;
One of the goals of PyPy is to make existing Python code faster, however an
even broader goal was to make it possible to write things in Python that
previous would needed to be written in C or other low-level language. This
talk will show examples of this, and describe how they represent the
tremendous progress PyPy has made, and what it means for people looking to use
PyPy.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor,Armin Rigo,Maciej Fijalkowski</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/661/why-pypy-by-example</guid><enclosure url="https://www.youtube.com/watch?v=P5ad6NpjR3M" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/P5ad6NpjR3M/hqdefault.jpg"></media:thumbnail></item><item><title>How to get the most out of your PyPy</title><link>http://www.pyvideo.org/video/612/how-to-get-the-most-out-of-your-pypy</link><description>&lt;p&gt;Abstract&lt;/p&gt;
For many applications PyPy can provide performance benefits right out of the
box. However, little details can push your application to perform much better.
In this tutorial we'll give you insights on how to push pypy to it's limites.
We'll focus on understanding the performance characteristics of PyPy, and
learning the analysis tools in order to maximize your applications
performance.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor,Armin Rigo,Maciej Fijalkowski</dc:creator><pubDate>Wed, 07 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/612/how-to-get-the-most-out-of-your-pypy</guid><enclosure url="https://www.youtube.com/watch?v=oZw8m_lyhvo" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/oZw8m_lyhvo/hqdefault.jpg"></media:thumbnail></item><item><title>The Data Structures of Python</title><link>http://www.pyvideo.org/video/420/pycon-2011--the-data-structures-of-python</link><description>&lt;p&gt;Description&lt;/p&gt;
The Data Structures of Python

Presented by Alex Gaynor

Any Python programmer knows about the major builtin data strcutres, lists,
dicts, tuples, but do you always remember when you're supposed to use them? Do
you know about all the cool data structures hidden in the standard library?
This talk will be a review of the characteristics of the different data
structures, and a tour of idiomatic ways to use some of the structures in the
standard library.

Abstract

First, as a note this talk borders between survey and discuss in depth. For
each data structure I want to cover their implementation, performance
characteristics, and idiomatic usage (e.g. tuples vs. lists), a lot of them
have similar implementations so idiomatic usage will dominate for some of
them.

  * The builtins (10 minutes) 
    * lists 
      * Ordered collections of any type of objects 
      * Mutable 
      * Implemented as an array of pointers 
    * tuples 
      * Ordered collections of any type of objects 
      * Immutable* 
      * Implemented as a fixed-length array of pointers 
    * dicts 
      * Unordered mapping of hashable objects to any objects 
      * Mutable 
        * Why no immutable variant
      * Implemented as an open-addressed hash table. 
    * sets 
      * Unordered collection of hashable objects 
      * Mutable 
        * frozenset
      * Implemented as an open-addressed hash table. 
  * The Standard Library (10 minutes) 
    * OrderedDict 
      * Ordered mapping of hashable objects to any objects 
      * Mutable 
      * Implemented as a dict with a doubly-linked list running through it. 
    * deque 
      * Ordered collection of any type of objects 
      * Mutable 
      * Implemented as an unrolled, doubly-linked list 
    * namedtuple 
      * Ordered collection of any type of objects, *also* addressable by name. 
      * Immutable 
      * Implemented as a tuple with extra properties 
    * array 
      * Like a list... but limited to "primitve" types. 
  * Performance characteristics. 
  * Writing your own (5 minutes) 
    * Abstract Base Classes 
      * Duck typing 
        * Why would you want to use them!
      * What's available. 
    * OrderedSet 
      * An ordered collection of hashable objects 
      * Mutable 
      * Implemented as a set with a doubly-linked list running through it. 
  * Questions (5 minutes) 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/420/pycon-2011--the-data-structures-of-python</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2011/420_the-data-structures-of-python.ogv" length="161075055" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2011/420_the-data-structures-of-python.ogv" fileSize="161075055" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2011/420_the-data-structures-of-python.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2011TheDataStructuresOfPython246.png"></media:thumbnail></item><item><title>Why is Python slow and how PyPy can help?</title><link>http://www.pyvideo.org/video/427/pycon-2011--why-is-python-slow-and-how-pypy-can-h</link><description>&lt;p&gt;Description&lt;/p&gt;
Why is Python slow and how PyPy can help?

Presented by Maciej Fijalkowski and Alex Gaynor

PyPy is a virtual machine for Python, featuring an advanced just in time
compiler, which can deliver exceptional performance. This talk is going to be
a deep dive into what exactly makes Python such a hard language to optimize,
how PyPy is organized, and what optimizations our JIT can do (and what it
can't do) for your code.

Abstract

The talk will detail how a python interpreter works internally and why some
operations are costly. We'll go through several python features, how they
work, why they're slow in CPython and how we're fixing it.

The list of mentioned features is not exhaustive, however we will try to focus
at least on the following:

  * Dynamic language - In Python code we have no known types, like a statically typed language. Even operations like "a + b" can do anything, unless we know more about the code, and the types it is operating on.

  * Frame introspection - Frame objects need to be allocated for every function call, and all local variables are stored on the frame, and must be accessible from further down the call stack.

PyPy uses a novel approach called "virtualizables" which makes it possible to
avoid frame allocation in most common cases.

  * Object model - All user defined Python objects have a dictionary which stores their attributes, as does every type. When Python does an attribute lookup this requires at least two dictionary lookups.

In PyPy we use an approach similar to the one used by V8 with hidden classes
(except more PyPy specific) called map dictionaries and other optimizations.

  * FFI calls - Calling C from Python is costly and hard to optimize. In PyPy we expose C APIs to Python code via ctypes. This part explains how we can optimize ctypes calls.

  * array module - Users of CPython's array module probably know it can save them quite a bit of memory, however it's also slower than using a list, due to the overhead of boxing and unboxing on every operations. Here we will tie everything together and describe how the array module is much faster with PyPy's JIT, combining our optimizations to: unbox values, remove the dynamicism within traces, and deliver great performance.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor,Maciej Fijalkowski</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/427/pycon-2011--why-is-python-slow-and-how-pypy-can-h</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2011/427_why-is-python-slow-and-how-pypy-can-help.mp4" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2011WhyIsPythonSlowAndHowPyPyCanHelp525.png"></media:thumbnail></item><item><title>PyPy and Unladen Swallow: Making your Python Fast</title><link>http://www.pyvideo.org/video/573/pypy-and-unladen-swallow--making-your-python-fast</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python has a reputation for being a bit slow, but it doesn't have to be that
way. This talk will cover why Python is slow, and what two of the most
exciting virtual machines are doing about it.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Thu, 08 Jul 2010 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/573/pypy-and-unladen-swallow--making-your-python-fast</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/573_pypy-and-unladen-swallow-making-your-python-fast.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-PyPyAndUnladenSwallowMakingYourPythonFast798.png"></media:thumbnail></item><item><title>Building Leafy Chat, DjangoDose, and Hurricane, Lessons Learned on the Real-Time Web with Python (#24)</title><link>http://www.pyvideo.org/video/338/pycon-2010--building-leafy-chat--djangodose--and-</link><description>&lt;p&gt;Description&lt;/p&gt;
Building Leafy Chat, DjangoDose, and Hurricane. Lessons learned on the real-
time web with Python

  
Presented by Alex Gaynor (Eldarion)

  
Websites are getting increasingly dynamic and realtime in order to compete
with desktop applications. This talk is an examination of 3 websites/tools
I've built, all using Python. I'm going to try to explain what we did to build
these, and how you can do the same.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/338/pycon-2010--building-leafy-chat--djangodose--and-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/338_building-leafy-chat-djangodose-and-hurricane-lessons-learned-on-the-real-time-web-with-python-24.ogv" length="207063572" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/338_building-leafy-chat-djangodose-and-hurricane-lessons-learned-on-the-real-time-web-with-python-24.ogv" fileSize="207063572" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/338_building-leafy-chat-djangodose-and-hurricane-lessons-learned-on-the-real-time-web-with-python-24.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010BuildingLeafyChatDjangoDoseAndHurricaneLessonsL504.png"></media:thumbnail></item></channel></rss>
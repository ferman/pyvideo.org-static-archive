<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Julian Berman</title><link>http://www.pyvideo.org/speaker/1411/julian-berman/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1411/julian-berman/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Mon, 25 May 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Bulding an interpreter in RPython</title><link>http://www.pyvideo.org/video/3643/bulding-an-interpreter-in-rpython</link><description>&lt;p&gt;Abstract&lt;/p&gt;
RPython is a language and toolchain for building interpreters, most prominently PyPy, a Python interpreter. But RPython is a powerful tool for writing interpreters for many dynamic languages. We'll learn how to write a simple interpreter in RPython by implementing a parser, bytecode compiler and VM for a small language.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian Berman</dc:creator><pubDate>Mon, 25 May 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3643/bulding-an-interpreter-in-rpython</guid><enclosure url="https://www.youtube.com/watch?v=BkGw-o2jgjc" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/BkGw-o2jgjc/hqdefault.jpg"></media:thumbnail></item><item><title>Design Your Tests</title><link>http://www.pyvideo.org/video/2997/design-your-tests</link><description>&lt;p&gt;Abstract&lt;/p&gt;
While getting started testing often provides noticeable immediate improvement for any developer, it's often not until the realization that tests are things that need *design* to provide maximal benefit that developers begin to appreciate or even *enjoy* them.

We'll investigate how building shallow, transparent layers for your tests makes for better failures, clearer tests, and quicker diagnoses.
&lt;p&gt;Description&lt;/p&gt;
* Life span of a test
    * 5 minute - why does this fail?
    * 5 day - what is this missing?
    * 5 week - do I have coverage for this?
    * 5 month - what's *not* causing this bug?

* Transparent simplicity
    * one or two "iceberg" layers for meaning
        * Higher-order assertions - build collections of state that have meaning for the domain in the tests
        * bulk of the details are in the code itself

        * show an example

    * grouping for organization
        * Mixins

        * show an example

* unittest issues
    * assertion/mixin clutter
    * setUp/tearDown tie grouping to the class layer or to inheritance via super
        * addCleanup
    * weak association / lookup-ability between code and its tests
        * package layout
        * other conventions

* Alternative approaches
    * testtools' matchers
    * py.test `assert` magic</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian Berman</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2997/design-your-tests</guid><enclosure url="http://www.youtube.com/watch?v=xkwBjsjSERU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/xkwBjsjSERU/hqdefault.jpg"></media:thumbnail></item></channel></rss>
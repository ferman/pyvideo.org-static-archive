<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of David Mertz</title><link>http://www.pyvideo.org/speaker/362/david-mertz/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/362/david-mertz/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 03 Oct 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>What I learned about Python – and about Guido's time machine – by reading the python-ideas mailing list</title><link>http://www.pyvideo.org/video/3840/what-i-learned-about-python-and-about-guidos-t</link><description>&lt;p&gt;Abstract&lt;/p&gt;
One of the ways that changes enter the Python language is via their prior discussion on the python-ideas mailing list. Many core contributors read and contribute to this list, some do not, and a large number of other interested Python programmers also participate in the discussion. A recurring element of these fascinating discussions is that ideas which seem compelling at first blush, upon deeper discussion reveal the greater wisdom of doing things just the way Python already does. Not always, of course, but often.
A wonderful case study of this process is the innocuous seeming built-in 'sum()'. This function has an intricate history, with a great deal of dispute over just what its semantics and performance characteristics can or should be. A particular thread on python-ideas, rich with discussions of use cases and subtle semantics, led both to the creation of the 'statistics' module in Python 3.4 (which contains a "private" version of the function, 'statistics._sum()') and to a rejection of performance "optimizations" when operating over collections of collections (which may or may not seem obvious to "sum" in the first place).</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Mertz</dc:creator><pubDate>Fri, 03 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3840/what-i-learned-about-python-and-about-guidos-t</guid><enclosure url="http://archive.org/download/pyconza2014-python-ideas/8%20What%20I%20learned%20about%20Python-.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://archive.org/download/pyconza2014-python-ideas/8%20What%20I%20learned%20about%20Python-.ogv" mime_type="video/ogg"></media:content><media:content url="http://archive.org/download/pyconza2014-python-ideas/8%20What%20I%20learned%20about%20Python-.mp4" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://archive.org/download/pyconza2014-python-ideas/pyconza2014-python-ideas.thumbs/8%20What%20I%20learned%20about%20Python-_000690.jpg"></media:thumbnail></item><item><title>Why you should use Python 3 for text processing</title><link>http://www.pyvideo.org/video/1704/why-you-should-use-python-3-for-text-processing</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python is a great language for text processing.  Each new version of Python--but especially the 3.x series--has enhanced this strength of the language. String (and byte) objects have grown some handy methods and some built-in functions have improved or been added.  More importantly, refinements and additions have been made to the standard library to cover  the most common tasks in text processing.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Mertz</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1704/why-you-should-use-python-3-for-text-processing</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Why_you_should_use_Python_3_fo.mp4?Signature=IyC9JddrmGSi0Ie5Cx%2BsViqQ%2FQ8%3D&amp;Expires=1363656906&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Why_you_should_use_Python_3_fo.mp4?Signature=IyC9JddrmGSi0Ie5Cx%2BsViqQ%2FQ8%3D&amp;Expires=1363656906&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=u950XEl7c20" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/u950XEl7c20/hqdefault.jpg"></media:thumbnail></item><item><title>Coroutines, event loops, and the history of Python generators</title><link>http://www.pyvideo.org/video/668/coroutines-event-loops-and-the-history-of-pytho</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This talk traces lightweight concurrency from Python 2.2's generators, which
enabled semi-coroutines as a mechanism for scheduling "weightless" threads; to
PEP 342, which created true coroutines, and hence made event-driven
programming easier; to 3rd party libraries built around coroutines, from older
GTasklet and peak.events to the current Greenlet/gevent and Twisted Reactor.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Mertz</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/668/coroutines-event-loops-and-the-history-of-pytho</guid><enclosure url="https://www.youtube.com/watch?v=b7R3-_ViNxk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/b7R3-_ViNxk/hqdefault.jpg"></media:thumbnail></item></channel></rss>
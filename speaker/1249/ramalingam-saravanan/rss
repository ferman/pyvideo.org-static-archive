<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Ramalingam Saravanan</title><link>http://www.pyvideo.org/speaker/1249/ramalingam-saravanan/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1249/ramalingam-saravanan/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 04 Oct 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Creating a  browser-based virtual computer lab for teaching and collaboration</title><link>http://www.pyvideo.org/video/3176/creating-a-browser-based-virtual-computer-lab-fo</link><description>&lt;p&gt;Description&lt;/p&gt;
With laptops and tablets becoming more powerful and more ubiquitous in the classroom, traditional computer labs with rows of expensive desktop computers are slowly beginning to lose their relevance. An alternative approach for computer-assisted instruction is to use a browser-based virtual computer lab. The different approaches to providing a virtual computing environment for Python, and the associated challenges, will be discussed. Options for providing a multi-user environment include running a public IPython Notebook server, or using alternative free/commercial solutions that incorporate the notebook interface, such as JiffyLab, Sage Math Cloud, GraphTerm, and Wakari. A virtual computer lab implemented using the GraphTerm server will be described. The advantages of physical computer labs, such as face-to-face interaction, and the challenge of replicating them in a virtual environment will be discussed as well.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ramalingam Saravanan</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3176/creating-a-browser-based-virtual-computer-lab-fo</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3176_Creating_a_browserbased_virtual_computer_lab_for_t.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3176_Creating_a_browserbased_virtual_computer_lab_for_t.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/eue3ysdOO1A" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/eue3ysdOO1A/hqdefault.jpg"></media:thumbnail></item><item><title>Creating a browser based virtual computer lab for classroom instruction</title><link>http://www.pyvideo.org/video/2721/creating-a-browser-based-virtual-computer-lab-for</link><description>&lt;p&gt;Abstract&lt;/p&gt;
With laptops and tablets becoming more powerful and more ubiquitous in the classroom, traditional computer labs with rows of expensive desktops are beginning to lose their relevance. This presentation will discuss browser-based virtual computer labs for teaching Python, using a notebook interface, as an alternative approach to classroom instruction.
&lt;p&gt;Description&lt;/p&gt;
One of the difficulties in using Python for scientific applications is that one needs a fairly complete set of Python data processing and visualization packages to be installed, beyond the standard Python distribution. Freely available scientific Python distributions like Enthought Canopy and Anaconda address this problem. A typical approach to teaching Python is to use a dedicated computer lab, where one of these distributions is installed on a set of machines with identical computing environments for use by students. With laptop computers becoming cheap and ubiquitous, an alternative approach is to allow students to use their own computers, where they install one of the scientific Python distributions by themselves. This approach requires more set-up time, because the software often requires some minor tweaking for each software platform, but requires no dedicated hardware and has the advantage of allowing students to easily run programs after class on their own computers. This presentation discusses a third approach that involves creating a software environment for Python using “cloud computing”. There are already commercial products available that provide well-supported Python computing environments in the cloud. This presentation focuses on alternative “roll your own” solutions using open-source software that are specifically targeted for use in an interactive classroom instruction setting.

Creating a virtual computing lab usually involves instantiating a server using a cloud infrastructure provider, such as Amazon Web Services. A new server can be set-up within minutes, with a scientific Python distribution automatically installed during set-up. Students can then login to their own accounts on the server using a browser-based interface to execute Python programs and visualize graphical output. Typically, each student would use a notebook interface to work on lessons.

Different approaches can be used to create separate accounts for multiple users. The simplest would be to create different user accounts on a Linux virtual machine. If greater isolation is required, lightweight linux containers can be created on-demand for each user. Although IPython Notebook can currently be run as a public server to work with multiple notebooks simultaneously, true multi-user support is expected to be implemented further down the road. However, there are a few open-source projects, such as JiffyLab, that already support a multi-user IPython Notebook environment. Another option is to use the open-source GraphTerm server, which supports a multi-user  “graphical terminal” environment with a notebook interface. The pros and cons of these different approaches to building a virtual computer lab will be discussed.

Also discussed will be additional features that could be useful in a virtual computing lab such as the capability for the instructor to chat with the students and monitor their individual progress using a “dashboard”. Allowing students to collaborate in groups, with ability to view and edit each others’ code, can help promote classroom interaction. Enhancements to the notebook interface, such as “fill in the blanks” notebooks, can facilitate more structured instruction. The implementation of some of these features in the GraphTerm server will be discussed.

LINKS:

[JiffyLab source](https://github.com/ptone/jiffylab)

[GraphTerm source](https://github.com/mitotic/graphterm)

[GraphTerm talk from SciPy 2013](http://conference.scipy.org/proceedings/scipy2013/pdfs/saravanan.pdf)
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ramalingam Saravanan</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2721/creating-a-browser-based-virtual-computer-lab-for</guid><enclosure url="http://www.youtube.com/watch?v=LiZJMYxvJbQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/LiZJMYxvJbQ/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Brandon Rhodes</title><link>http://www.pyvideo.org/speaker/337/brandon-rhodes/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/337/brandon-rhodes/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 01 Aug 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>PyOhio 2011: Names, Objects, and Plummeting From The Cliff</title><link>http://www.pyvideo.org/video/542/pyohio-2011-names-objects-and-plummeting-from</link><description>&lt;p&gt;Description&lt;/p&gt;
Names, Objects, and Plummeting From The Cliff

Presented by Brandon Craig Rhodes

The assignment statement is often the second thing a new Python programmer
learns, right after the "print" statement - but the beginner can get seriously
bogged down in all of the concepts that assignment involves! Using a simple
analogy, this talk will tackle those issues head-on.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><guid>http://www.pyvideo.org/video/542/pyohio-2011-names-objects-and-plummeting-from</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pyohio-2011/542_pyohio-2011-names-objects-and-plummeting-from-the-cliff.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pyohio-NamesObjectsAndPlummetingFromTheCliff414.png"></media:thumbnail></item><item><title>PyOhio 2011: Procedures, Objects, Reusability: &amp;quot;httplib&amp;quot;, &amp;quot;urllib2&amp;quot;, and Their Discontents</title><link>http://www.pyvideo.org/video/521/pyohio-2011-procedures-objects-reusability-q</link><description>&lt;p&gt;Description&lt;/p&gt;
Procedures, Objects, Reusability: httplib, urllib2 and their discontents

Presented by Brandon Craig Rhodes

Python supports two major programming paradigms: procedures, and object
orientation. This talk will claim that, when it comes to code re-use, these
two paradigms are NOT created equal: because object-oriented programming
encourages the programmer to write methods that consider everything else
inside of "self" to be fair game, it encourages highly coupled code that
proves brittle when extended.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><guid>http://www.pyvideo.org/video/521/pyohio-2011-procedures-objects-reusability-q</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pyohio-2011/521_pyohio-2011-procedures-objects-reusability-quot-httplib-quot-quot-urllib2-quot-and-their-discontents.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pyohio-ProceduresObjectsReusabilityHttplibUrllib2AndTheirDiscont815.png"></media:thumbnail></item><item><title>PyOhio 2011: Squinting at Python Objects</title><link>http://www.pyvideo.org/video/524/pyohio-2011-squinting-at-python-objects</link><description>&lt;p&gt;Description&lt;/p&gt;
Squinting at Python Objects

Presented by Brandon Craig Rhodes

Python classes can gain attributes as if by magic. Thanks to properties,
descriptors, and (if all else fails) __getattr__() and __getattribute__(), the
attempt to access obj.something can result in arbitrary code execution. If you
are wondering how your Python program is using memory, this can result in a
problem: each time you look to see if something is there, it **is**, because
it is pulled in dynamically the moment you look for it. In this talk, you will
learn how to prod Python objects gently, and hopefully learn their secrets -
and their memory usage - without actually invoking code.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><guid>http://www.pyvideo.org/video/524/pyohio-2011-squinting-at-python-objects</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pyohio-2011/524_pyohio-2011-squinting-at-python-objects.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pyohio-SquintingAtPythonObjects698.png"></media:thumbnail></item><item><title>Pandas Dataframes At The Cinema</title><link>http://www.pyvideo.org/video/3674/pandas-dataframes-at-the-cinema</link><description>&lt;p&gt;Description&lt;/p&gt;
Using data from the Internet Movie Database, students will use the Pandas data analysis library to search the data and answer questions about it. This will be a more focused version of the tutorial I gave at PyCon this year, with an emphasis on demonstrations that get the students ready to go home and work on the several hours' worth of fun exercises that the full tutorial includes.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3674/pandas-dataframes-at-the-cinema</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3674_Pandas_Dataframes_At_The_Cinema.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3674_Pandas_Dataframes_At_The_Cinema.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/Bn2OAoi3SPk" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/Bn2OAoi3SPk/hqdefault.jpg"></media:thumbnail></item><item><title>Closing Messages</title><link>http://www.pyvideo.org/video/3401/closing-messages</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3401/closing-messages</guid><enclosure url="https://www.youtube.com/watch?v=6_FOOvoBcZI" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/6_FOOvoBcZI/hqdefault.jpg"></media:thumbnail></item><item><title>Oh, Come On Who Needs Bytearrays</title><link>http://www.pyvideo.org/video/3515/oh-come-on-who-needs-bytearrays</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3515/oh-come-on-who-needs-bytearrays</guid><enclosure url="https://www.youtube.com/watch?v=z9Hmys8ojno" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/z9Hmys8ojno/hqdefault.jpg"></media:thumbnail></item><item><title>Pandas From The Ground Up</title><link>http://www.pyvideo.org/video/3395/pandas-from-the-ground-up</link><description>&lt;p&gt;Description&lt;/p&gt;
The typical Pandas user learns one dataframe method at a time, slowly scraping features together through trial and error until they can solve the task in front of them. In this tutorial you will re-learn how to think about dataframes from the ground up, and discover how to select intelligently from their abilities to solve your data processing problems through direct and deliberately-chosen steps.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3395/pandas-from-the-ground-up</guid><enclosure url="https://www.youtube.com/watch?v=5JnMutdy6Fw" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/5JnMutdy6Fw/hqdefault.jpg"></media:thumbnail></item><item><title>How To Shut Down Tolkien</title><link>http://www.pyvideo.org/video/3316/how-to-shut-down-tolkien</link><description>&lt;p&gt;Description&lt;/p&gt;
While Tolkien had friends who could devise ingenious ways to critique his work without sounding critical, he had others whose remarks were merciless and direct — to the point that Tolkien simply stopped sharing new chapters as he wrote The Lord of the Rings. As programmers we share many of the struggles of writers and artists, and we often react just as badly to critique of our code. From Tolkien’s experience we will draw lessons about how to make critique generous instead of damaging, and actionable instead of personal.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Mon, 20 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3316/how-to-shut-down-tolkien</guid><enclosure url="https://www.youtube.com/watch?v=qVlqBxpCG24" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/qVlqBxpCG24/hqdefault.jpg"></media:thumbnail></item><item><title>The Clean Architecture in Python</title><link>http://www.pyvideo.org/video/2840/the-clean-architecture-in-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Even design-conscious programmers find large applications difficult to maintain. Come learn about how the recently propounded “Clean Architecture” applies in Python, and how this high-level design pattern fits particularly well with the features of the Python language and answers questions that experienced programmers have been asking. (An update of my un-recorded talk from PyCon Ireland 2013!)</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2840/the-clean-architecture-in-python</guid><enclosure url="http://964bdd2f965bbc4ca8f5-3ebaa0e988d98119a4fead51a26da83a.r42.cf2.rackcdn.com/pyohio-2014/2840_The_Clean_Architecture_in_Python.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://964bdd2f965bbc4ca8f5-3ebaa0e988d98119a4fead51a26da83a.r42.cf2.rackcdn.com/pyohio-2014/2840_The_Clean_Architecture_in_Python.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/DJtef410XaM" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/DJtef410XaM/hqdefault.jpg"></media:thumbnail></item><item><title>Watch your Python script with strace</title><link>http://www.pyvideo.org/video/2866/watch-your-python-script-with-strace</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Modern operating systems sandbox each process inside of a virtual memory
map from which direct I/O operations are generally impossible.  Instead,
a process has to ask the operating system every time it wants to modify
a file or communicate bytes over the network.  By using operating system
specific tools to watch the system calls a Python script is making --
using "strace" under Linux or "truss" under Mac OS X -- you can study how
a program is behaving and address several different kinds of bugs.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2866/watch-your-python-script-with-strace</guid><enclosure url="http://964bdd2f965bbc4ca8f5-3ebaa0e988d98119a4fead51a26da83a.r42.cf2.rackcdn.com/pyohio-2014/2866_Watch_your_Python_script_with_strace.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://964bdd2f965bbc4ca8f5-3ebaa0e988d98119a4fead51a26da83a.r42.cf2.rackcdn.com/pyohio-2014/2866_Watch_your_Python_script_with_strace.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/-WspqYeZ75Q" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/-WspqYeZ75Q/hqdefault.jpg"></media:thumbnail></item><item><title>The Day of the EXE Is Upon Us</title><link>http://www.pyvideo.org/video/2636/the-day-of-the-exe-is-upon-us</link><description>&lt;p&gt;Abstract&lt;/p&gt;
It was once quite painful to build your Python app as a single .exe file. Support forums filled with lamentations as users struggled with primitive tools. But today, two separate tools exist for compiling your Python to real machine language! Come learn about how one of the biggest problems in commercial and enterprise software has now been solved and how you can benefit from this achievement.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2636/the-day-of-the-exe-is-upon-us</guid><enclosure url="http://www.youtube.com/watch?v=wsczq6j3_bA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/wsczq6j3_bA/hqdefault.jpg"></media:thumbnail></item><item><title>All Your Ducks In A Row: Data Structures in the Standard Library and Beyond</title><link>http://www.pyvideo.org/video/2571/all-your-ducks-in-a-row-data-structures-in-the-s</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Why are Python programmers crazy about lists and dictionaries, when other languages tout bitmaps, linked lists, and B+ trees? Are we missing out? Come learn how data structures are implemented on bare metal, how to select the right data structure, how the list and dictionary cover a wide swath of use cases, and when to dip into the Standard Library or a
 third-party package for an alternative.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2571/all-your-ducks-in-a-row-data-structures-in-the-s</guid><enclosure url="http://www.youtube.com/watch?v=fYlnfvKVDoM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/fYlnfvKVDoM/hqdefault.jpg"></media:thumbnail></item><item><title>Skyfield and 15 Years of Bad APIs</title><link>http://www.pyvideo.org/video/2325/skyfield-and-15-years-of-bad-apis</link><description>&lt;p&gt;Abstract&lt;/p&gt;
I released the first version of PyEphem in 1998.  Built with SWIG, it made astronomical calculations in Python only slightly more convenient than writing C code to make raw calls to the libastro library.  A massive rewrite five years later improved the interface, but a decade of fielding questions from users has convinced me to re-think how an API can better help programmers cope with an unfamiliar and complex domain like astronomy.  This talk will explore how API design, NumPy integration, and modern high-performance Python computation combine in Skyfield, the new pure-Python astronomy library that I will release during the PyCon Canada sprints!</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sat, 10 Aug 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2325/skyfield-and-15-years-of-bad-apis</guid><enclosure url="http://www.youtube.com/watch?v=FVEEndIwOSA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/FVEEndIwOSA/hqdefault.jpg"></media:thumbnail></item><item><title> PyOhio 2013 Keynote: Sine Qua Nons</title><link>http://www.pyvideo.org/video/2258/keynote-4</link><description>&lt;p&gt;Abstract&lt;/p&gt;
What are the key features of a modern dynamic language like Python that
let a programmer make progress even against difficult problems, even on
days when things are not going well?  Starting simple and then ramping
up to complex, Brandon takes us from how beginners can use a Python
dictionary to pair up matching data, to how to use ctypes to work around
limitations in the built-in Python SSL module, as he takes us through
the tools and approaches that for a Python programmer are all part of a
day's work — the features without which we would not be as productive.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sat, 27 Jul 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2258/keynote-4</guid><enclosure url="http://s3.us.archive.org/ndvpyohio2013/Keynote.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvpyohio2013/Keynote.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=_SBwUTx6Y7U" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/_SBwUTx6Y7U/hqdefault.jpg"></media:thumbnail></item><item><title>The Naming of Ducks: Where Dynamic Types Meet Smart Conventions</title><link>http://www.pyvideo.org/video/1676/the-naming-of-ducks-where-dynamic-types-meet-sma</link><description>&lt;p&gt;Abstract&lt;/p&gt;
While Java and C# use static type declarations to eliminate ambiguity,
the Python programmer must survive
through sheer clarity and consistency in naming variables.
We will explore the deep unspoken conventions
that the Python community has developed and honed over two decades
to make Python code readable and meaningful within the freedom
that a dynamically-typed language grants us.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1676/the-naming-of-ducks-where-dynamic-types-meet-sma</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/The_Naming_of_Ducks_Where_Dyna.mp4?Signature=drvwKQMFi5Vt2QItklKi9KnG0n8%3D&amp;Expires=1363836226&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/The_Naming_of_Ducks_Where_Dyna.mp4?Signature=drvwKQMFi5Vt2QItklKi9KnG0n8%3D&amp;Expires=1363836226&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=YklKUuDpX5c" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/YklKUuDpX5c/hqdefault.jpg"></media:thumbnail></item><item><title>Documenting Your Project in Sphinx</title><link>http://www.pyvideo.org/video/1660/documenting-your-project-in-sphinx</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Projects can succeed or fail because of their documentation. When you write, you need to concentrate on your prose—not on how to get text rendered, indexed, highlighted, and cross-referenced. The Sphinx documentation framework exists to make these parts easy so you can focus on writing. This tutorial will use hands-on exercises to teach you to write, theme, and deploy documentation using Sphinx!</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Thu, 14 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1660/documenting-your-project-in-sphinx</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Documenting_Your_Project_in_Sp.mp4?Signature=Ud8cDKrtUj9uvhxSbUlQsh9aUfM%3D&amp;Expires=1364683436&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Documenting_Your_Project_in_Sp.mp4?Signature=Ud8cDKrtUj9uvhxSbUlQsh9aUfM%3D&amp;Expires=1364683436&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=QNHM7q2hLh8" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/QNHM7q2hLh8/hqdefault.jpg"></media:thumbnail></item><item><title>A Python Æsthetic: Beauty and Why I Python</title><link>http://www.pyvideo.org/video/1599/a-python-sthetic-beauty-and-why-i-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Why did I start using Python in the late 1990s? Was it for any of the reasons
that I remain a fan today? In this talk we will explore how Python, even while
training us to avoid and become blind to its rough edges, works to teach us
new ways of making programs beautiful. Even novices should learn new things to
love about Python by listening to this talk!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sat, 10 Nov 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/1599/a-python-sthetic-beauty-and-why-i-python</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/pyconca/pyconca2012/A_Python_Aesthetic_Beauty_and_Warts_in_Languages_and_in_Code.mp4?Signature=qlajo3DZEbMCl67UYbm6TArXkx0%3D&amp;Expires=1352851954&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/pyconca/pyconca2012/A_Python_Aesthetic_Beauty_and_Warts_in_Languages_and_in_Code.mp4?Signature=qlajo3DZEbMCl67UYbm6TArXkx0%3D&amp;Expires=1352851954&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=x-kB2o8sd5c" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/x-kB2o8sd5c/hqdefault.jpg"></media:thumbnail></item><item><title>Python Design Patterns 1</title><link>http://www.pyvideo.org/video/1369/python-design-patterns-1</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The Python community has learned a lot about how to use our language since we
started back in the 1990s, and this talk will use simple one-slide programs to
illustrate the crucial refactorings that can help make a large real-life
application far more testable and maintainable while making its code easier to
re-use. This will not be a re-hash of Gang-of-Four refactorings, but specific
to Python.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sun, 29 Jul 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1369/python-design-patterns-1</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/pyohio/pyohio_2012/Python_Design_Patterns_1.mp4?Signature=S%2FuouH40XJF1DLFhdK%2F5BrfTc3I%3D&amp;Expires=1346601744&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/pyohio/pyohio_2012/Python_Design_Patterns_1.mp4?Signature=S%2FuouH40XJF1DLFhdK%2F5BrfTc3I%3D&amp;Expires=1346601744&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=Er5K_nR5lDQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/Er5K_nR5lDQ/hqdefault.jpg"></media:thumbnail></item><item><title>Python, Linkers, and Virtual Memory</title><link>http://www.pyvideo.org/video/717/python-linkers-and-virtual-memory</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Why does “top” show that your Python process uses 110 MB of virtual memory but
has a resident set size of 9 MB? Does it consume more memory to spawn several
interpreters, or to run one Python and have it fork() further workers? What is
an “undefined symbol,” anyway? Learn about how an operating system manages
memory, loads shared libraries, and what this means for Python servers and
applications.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sun, 11 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/717/python-linkers-and-virtual-memory</guid><enclosure url="https://www.youtube.com/watch?v=twQKAoq2OPE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/twQKAoq2OPE/hqdefault.jpg"></media:thumbnail></item><item><title>Flexing SQLAlchemy's Relational Power</title><link>http://www.pyvideo.org/video/664/flexing-sqlalchemys-relational-power</link><description>&lt;p&gt;Abstract&lt;/p&gt;
How do you take the big step from casual SQLAlchemy user, who treats your
database as a mysterious object store, to advanced power user, who optimizes
critical queries, plans indexing and migrations, and generates efficient
reports? This talk will teach you how databases think; why humanity invented
the Relational Algebra; and how SQLAlchemy grants you access to relational
power.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/664/flexing-sqlalchemys-relational-power</guid><enclosure url="https://www.youtube.com/watch?v=399c-ycBvo4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/399c-ycBvo4/hqdefault.jpg"></media:thumbnail></item><item><title>Documenting Your Project With Sphinx</title><link>http://www.pyvideo.org/video/616/documenting-your-project-with-sphinx</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python projects can succeed or fail because of their documentation. Thanks to
Sphinx, Python now has a “documentation framework” with indexing, syntax
highlighting, and integration with your code. Students will be given a small
undocumented Python package, and during the exercises they will give the
package a tutorial and reference manual. Plus: deployment and theming!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Thu, 08 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/616/documenting-your-project-with-sphinx</guid><enclosure url="https://www.youtube.com/watch?v=L-fXOoxrt0M" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/L-fXOoxrt0M/hqdefault.jpg"></media:thumbnail></item><item><title>SQL for Python Developers</title><link>http://www.pyvideo.org/video/875/sql-for-python-developers</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Relational databases are often the bread-and-butter of large-scale data
storage, yet they are often poorly understood by Python programmers.
Organizations even split programmers into SQL and front-end teams, each of
which jealously guards its turf. These tutorials will take what you already
know about Python programming, and advance into a new realm: SQL programming
and database design.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Wed, 07 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/875/sql-for-python-developers</guid><enclosure url="https://www.youtube.com/watch?v=Thd8yoBou7k" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/Thd8yoBou7k/hqdefault.jpg"></media:thumbnail></item><item><title>The Mighty Dictionary (#55)</title><link>http://www.pyvideo.org/video/276/the-mighty-dictionary-55</link><description>&lt;p&gt;Description&lt;/p&gt;
The Mighty Dictionary

  
Presented by Brandon Craig Rhodes

  
Both newcomers and experienced developers alike love Python's built-in data
types â€” especially dictionaries! But how do dictionaries work? What do they
do better than other container types, and where, on the other hand, are their
weaknesses? Using simple, vivid diagrams that show the secrets of how the
dictionary is implemented, and a series of progressively interesting examples
of its behavior, we will train the Python developer's mind to picture what the
dictionary is doing in just enough detail to make good decisions, as your data
sets get larger, about when to use dictionaries and when other data structures
might be more appropriate.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/276/the-mighty-dictionary-55</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/276_the-mighty-dictionary-55.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/276_the-mighty-dictionary-55.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/276_the-mighty-dictionary-55.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TheMightyDictionary55184-989.jpg"></media:thumbnail></item></channel></rss>
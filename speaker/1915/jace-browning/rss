<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Jace Browning</title><link>http://www.pyvideo.org/speaker/1915/jace-browning/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1915/jace-browning/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 02 Aug 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Synchronizing Objects to YAML using Black Magic</title><link>http://www.pyvideo.org/video/3708/synchronizing-objects-to-yaml-using-black-magic</link><description>&lt;p&gt;Description&lt;/p&gt;
Lately, I've been running into many situations where I'd like to store program configuration and/or data in version control. YORM was born to provide automatic, bidirectional, and human-friendly mappings of Python object attributes to YAML files. In order to explain the inner-workings of this library, I'll be diving into some of the less common features of Python that I learned along the way.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jace Browning</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3708/synchronizing-objects-to-yaml-using-black-magic</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3708_Synchronizing_Objects_to_YAML_using_Black_Magic.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3708_Synchronizing_Objects_to_YAML_using_Black_Magic.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/0woNEKf-wAo" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/0woNEKf-wAo/hqdefault.jpg"></media:thumbnail></item></channel></rss>
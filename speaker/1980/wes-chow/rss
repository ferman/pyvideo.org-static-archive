<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Wes Chow</title><link>http://www.pyvideo.org/speaker/1980/wes-chow/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1980/wes-chow/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 15 Aug 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Sharding Data for Fun &amp; Profit</title><link>http://www.pyvideo.org/video/3799/sharding-data-for-fun-profit</link><description>&lt;p&gt;Description&lt;/p&gt;
The hash function is the veritable hammer for pounding a large array of engineering problems into submission. Want to shard your database? Draw a key from your data, hash it, and voila, instant deterministic load balancing! That’s simple enough, until you look more carefully at distributional effects, failure, and redundancy management. We’ll review well known (consistent hashing), not so well known (rendezvous hashing), and recent (shuffle sharding, copysets) work that goes a long way towards engineering more favorable failure scenarios.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wes Chow</dc:creator><pubDate>Sat, 15 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3799/sharding-data-for-fun-profit</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pygotham-2015/3799_Sharding_Data_for_Fun_Profit.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pygotham-2015/3799_Sharding_Data_for_Fun_Profit.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/dl0JusHHIIQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/dl0JusHHIIQ/hqdefault.jpg"></media:thumbnail></item></channel></rss>
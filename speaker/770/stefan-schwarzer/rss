<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Stefan Schwarzer</title><link>http://www.pyvideo.org/speaker/770/stefan-schwarzer/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/770/stefan-schwarzer/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Thu, 24 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Support Python 2 and 3 with the same code</title><link>http://www.pyvideo.org/video/2974/support-python-2-and-3-with-the-same-code</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Your library supports only Python 2, - but your users keep nagging you about Python 3 support?

As Python 3 gets adopted more and more, users ask for Python 3 support in existing libraries for Python 2. Although there are several approaches, this talk focuses on using the very same code for a Python 2 and a Python 3 version.

The talk discusses the main problems when supporting Python 3 and best practices to apply for compatibility with Python 2 and 3.
&lt;p&gt;Description&lt;/p&gt;
Your library supports only Python 2, - but your users keep nagging you about Python 3 support?

As Python 3 gets adopted more and more, users ask for Python 3 support in existing libraries for Python 2. This talk mentions some approaches for giving users a Python 3 version, but will quickly focus on using the very same code for a Python 2 and a Python 3 version.

This is much easier if you require Python 2.6 and up, and yet a bit easier if you require Python 3.3 as the minimum Python 3 version.

The talk discusses main problems when supporting Python 3 (some are easily solved):

* `print` is a function.

* More Python APIs return iterators that used to return lists.

* There's now a clear distinction between bytes and unicode (text) strings.

* Files are opened as text by default, requiring an encoding to apply on reading and writing.


The talk also explains some best practices:

* Start with a good automatic test coverage.

* Deal with many automatic conversions with a one-time 2to3 run.

* Think about how your library should handle bytes and unicode strings. (Rule of thumb: Decode bytes as early as possible; encode unicode text as late as possible.)

* Should you break compatibility with your existing Python 2 API? (Yes, if there's no other way to design a sane API for Python 2 and 3. If you do it, raise the first part of the version number.)

* Try to keep code that's different for Python 2 and 3 minimal. Put code that needs to be different for Python 2 and 3 into a `compat` module. Or use third-party libraries like `six` or `future`.


Finally, the talk will mention some helpful resources on the web.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Schwarzer</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2974/support-python-2-and-3-with-the-same-code</guid><enclosure url="http://www.youtube.com/watch?v=elAV6aZDMvg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/elAV6aZDMvg/hqdefault.jpg"></media:thumbnail></item><item><title>Debugging mit Python</title><link>http://www.pyvideo.org/video/1447/debugging-mit-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Manche Fehler in Python-Programmen lassen sich mit Print-Anweisungen
aufdecken, in komplizierteren Fällen ist aber ein Debugger gefragt.

Der Vortrag behandelt Grundlagen für die Fehlersuche in Python-Programmen.
Zunächst soll es - für die einfachen Fälle - um Print-Anweisungen gehen.
Danach kommt die Verwendung des mit Python gelieferten Debuggers pdb. Dazu
werden Grundbegriffe wie Programmzeiger und Breakpoint erklärt und gezeigt,
wie man die Befehle des Debuggers für die Fehlersuche benutzt (zum Beispiel
Setzen von Breakpoints, schrittweise Ausführung ohne und mit Funktionsaufrufen
sowie natürlich die Untersuchung von Objekten).

Ich kann den Vortrag wahlweise als 55- oder 25-Minuten-Version halten. Im
ersten Fall würde ich auch noch auf andere Debugger wie pudb, pdb++ und WinPdb
eingehen.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Schwarzer</dc:creator><pubDate>Wed, 31 Oct 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1447/debugging-mit-python</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/pyconde/pyconde2012/Vortrag_Debugging_mit_Python.mp4?Signature=fvYa5Y0wvtJj6mjA1JnXwJmdoto%3D&amp;Expires=1351854220&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/pyconde/pyconde2012/Vortrag_Debugging_mit_Python.mp4?Signature=fvYa5Y0wvtJj6mjA1JnXwJmdoto%3D&amp;Expires=1351854220&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=9JFRWC2KI7k" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/9JFRWC2KI7k/hqdefault.jpg"></media:thumbnail></item><item><title>Nebenläufige Programme mit Python</title><link>http://www.pyvideo.org/video/1448/nebenlaufige-programme-mit-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
In diesem Vortrag soll es um Grundlagen nebenläufiger Programme gehen, wie sie
mit den Modulen threading und multiprocessing möglich sind.

Zuerst wird erklärt, in welchen Fällen Nebenläufigkeit sinnvoll ist. Danach
wird auf die grundsätzlichen Probleme nebenläufiger Programme eingegangen,
insbesondere Änderungen an gemeinsam genutzten Ressourcen (zum Beispiel
Dateien oder auch "nur" Objekte im Speicher) durch mehrere Threads oder
Prozesse. Schließlich wird gezeigt, wie man solche Ressourcen-Zugriffe durch
Locks oder Queues entschärfen kann.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Schwarzer</dc:creator><pubDate>Tue, 30 Oct 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1448/nebenlaufige-programme-mit-python</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/pyconde/pyconde2012/Nebenlaufige_Programme_mit_Pyt.mp4?Signature=hgj654cto48%2BRi1MuwistmFeXFw%3D&amp;Expires=1351855656&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/pyconde/pyconde2012/Nebenlaufige_Programme_mit_Pyt.mp4?Signature=hgj654cto48%2BRi1MuwistmFeXFw%3D&amp;Expires=1351855656&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=6Tb8TdovzGM" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i3.ytimg.com/vi/6Tb8TdovzGM/hqdefault.jpg"></media:thumbnail></item></channel></rss>
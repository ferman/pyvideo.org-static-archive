<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Jeremy Thurgood</title><link>http://www.pyvideo.org/speaker/2006/jeremy-thurgood/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/2006/jeremy-thurgood/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 02 Oct 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Friday Lightning Talks</title><link>http://www.pyvideo.org/video/3943/friday-lightning-talks</link><description>&lt;p&gt;Description&lt;/p&gt;
 * [(0:00:00)](http://youtu.be/MNyOPWT8ncw?t=0h0m0s) **Using Odo to load data** by Tobias Brandt
* [(0:05:23)](http://youtu.be/MNyOPWT8ncw?t=0h5m23s) **Sh** by Adrianna Pińska
* [(0:08:44)](http://youtu.be/MNyOPWT8ncw?t=0h8m44s) **Pygame Zero** by Neil Muller
* [(0:11:57)](http://youtu.be/MNyOPWT8ncw?t=0h11m57s) **How not to hate Javascript** by Adam Jorgensen
* [(0:16:28)](http://youtu.be/MNyOPWT8ncw?t=0h16m28s) **Testing code examples from your slides** by Jeremy Thurgood</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Jorgensen,Adrianna Pińska,Jeremy Thurgood,Neil Muller,Tobias Brandt</dc:creator><pubDate>Fri, 02 Oct 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3943/friday-lightning-talks</guid><enclosure url="http://youtu.be/MNyOPWT8ncw" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/MNyOPWT8ncw/hqdefault.jpg"></media:thumbnail></item><item><title>Property-based testing with Hypothesis</title><link>http://www.pyvideo.org/video/3934/property-based-testing-with-hypothesis</link><description>&lt;p&gt;Description&lt;/p&gt;
Unit testing can be more effective and less tedious when you have an army of robot monkeys at your disposal. Why should humans have to worry about finding the particular combination of Turkish and Tengwar that crashes the serialiser, or the convoluted sequence of operations that corrupts the database?

&gt;     Hypothesis is a Python library for turning unit tests into generative tests,
&gt;     covering a far wider range of cases than you can manually. Rather than just
&gt;     testing for the things you already know about, Hypothesis goes out and
&gt;     actively hunts for bugs in your code. It usually finds them, and when it
&gt;     does it gives you simple and easy to read examples to demonstrate.
&gt;
&gt; -- Hypothesis 1.0 release announcement

Property-based testing lets you think about your tests in terms of general behaviour and invariant properties instead of getting lost in the details of individual examples, and good tools (such as &lt;a href="https://hypothesis.readthedocs.org/en/latest/"&gt;Hypothesis&lt;/a&gt;) will explore quite complex combinations of test data and reduce them to minimum failing cases.

This talk will provide a practical introduction to property-based testing with Hypothesis, and show how you can use it to build more effective test suites with less effort.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Thurgood</dc:creator><pubDate>Fri, 02 Oct 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3934/property-based-testing-with-hypothesis</guid><enclosure url="http://youtu.be/mg5BeeYGjY0" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/mg5BeeYGjY0/hqdefault.jpg"></media:thumbnail></item><item><title>Practical testing</title><link>http://www.pyvideo.org/video/3836/practical-testing</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Automated tests are an important part of any software project, but they're often hard to work with. Good test code should be written with its own set of priorities and is sufficiently different from non-test code that many standard programming practices are unsuitable.
I have spent many years writing (and reading) tests of varying quality and have learned quite a lot from the experience. I hope to share some of that experience and help to remove some of the pain usually associated with writing and maintaining tests.
This talk will cover some of the practical aspects of writing good tests for real code, including:
1. Properties of a good test case 2. How to manage setup and teardown 3. Testing interactions between components 4. Some tools and techniques to make testing easier 1. Helpers 2. Verified fakes 3. Recording doubles</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Thurgood</dc:creator><pubDate>Fri, 03 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3836/practical-testing</guid><enclosure url="http://archive.org/download/pyconza2014-practical-testing/13%20B%20Practical%20testing-.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://archive.org/download/pyconza2014-practical-testing/13%20B%20Practical%20testing-.ogv" mime_type="video/ogg"></media:content><media:content url="http://archive.org/download/pyconza2014-practical-testing/13%20B%20Practical%20testing-.mp4" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://archive.org/download/pyconza2014-practical-testing/pyconza2014-practical-testing.thumbs/13%20B%20Practical%20testing-_002130.jpg"></media:thumbnail></item></channel></rss>
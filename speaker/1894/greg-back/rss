<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Greg Back</title><link>http://www.pyvideo.org/speaker/1894/greg-back/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1894/greg-back/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 01 Aug 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Best Practices for Python Scripting</title><link>http://www.pyvideo.org/video/3675/best-practices-for-python-scripting</link><description>&lt;p&gt;Description&lt;/p&gt;
The Python REPL is an amazing tool for exploring a problem and quickly finding an answer.  But how do you turn that "quick and dirty" snippet into an elegant, reusable module? In this talk, you'll learn how to isolate input, output, configuration options and more from your core logic to transform that block of code into a package and script that behave well in command line environments.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Back</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3675/best-practices-for-python-scripting</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3675_Best_Practices_for_Python_Scripting.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3675_Best_Practices_for_Python_Scripting.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/lNjKBhD9x1M" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/lNjKBhD9x1M/hqdefault.jpg"></media:thumbnail></item></channel></rss>
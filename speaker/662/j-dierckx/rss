<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of J Dierckx</title><link>http://www.pyvideo.org/speaker/662/j-dierckx/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/662/j-dierckx/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Thu, 05 Jul 2012 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Camelot 101</title><link>http://www.pyvideo.org/video/1282/camelot-101</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2012] J Dierckx A Cuni - 4 JULY 2012 in "Track Pizza Napoli"


&lt;p&gt;Description&lt;/p&gt;
Camelot , as seen on EuroPython 2010 and 2011 is a framework for developing
desktop database applications at warp speed. It is to desktop applications
what Django is to web applications. Some see it as a replacement for MS
Access, but its tight integration with SQLAlchemy enables a vast amount of
more advanced features and possibilities. This tutorial style course will
enable you to get started with your own Camelot project. We will tackle the
hurdles met when going through the lifecycle of a desktop application First
Example : We start our little Camelot project, have a look at the concepts and
terminology used within Camelot. We go through the different parts of the
application and look at the possibilities to customize them. Declarative
Models and Views : Then we move on by defining a relational model and use
introspection together with a declarative definition of our view to generate
table and form views. We look at the various options that can be used to
create and reuse form and table definitions. Actions and Reports : Next we’ll
dive into the details of actions the user can trigger, we discuss and
experiment with the standard actions Camelot offers. One of those actions can
be the generation of a nicely formatted Word document. Advanced Model
Definition : Once an application grows, more advanced model definition is
needed. We will try out some advanced features of SQLAlchemy and see how they
interact with the graphical interface. Fine tuning of the GUI : Here we have a
look at how Qt’s model-view-delegate framework works and how it is used by
Camelot. This will enable us to fully customize the graphical interface to our
needs. Deployment and Users : The last step of the development process is
getting the application to the users. We will discuss the deployment options
and list the things to be aware of when submitting an application to its
users. Q &amp; A : Throw all Camelot questions you have in the group and try to
resolve them together.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A Cuni,J Dierckx</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1282/camelot-101</guid><enclosure url="http://www.youtube.com/watch?v=x4hec861h2w" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/x4hec861h2w/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Brett Cannon</title><link>http://www.pyvideo.org/speaker/166/brett-cannon/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/166/brett-cannon/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 11 Apr 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>How to make your code Python 2/3 compatible</title><link>http://www.pyvideo.org/video/3427/how-to-make-your-code-python-23-compatible</link><description>&lt;p&gt;Description&lt;/p&gt;
You know Python 3 is an improvement over Python 2 and you want to use it. Unfortunately you have legacy Python 2 source code that needs to stay compatible. But don't fret! This talk will show you that you can make your code be Python 2/3 source-compatible using various tools to pick up the nitty-gritty work and help modernize your Python code to newer Python 2 practices.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3427/how-to-make-your-code-python-23-compatible</guid><enclosure url="https://www.youtube.com/watch?v=KPzDX5TX5HE" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/KPzDX5TX5HE/hqdefault.jpg"></media:thumbnail></item><item><title>Opening Statements - PyCon 2014 (2014/04/11)</title><link>http://www.pyvideo.org/video/2679/opening-statements-pycon-2014-20140411</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Fri, 11 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2679/opening-statements-pycon-2014-20140411</guid><enclosure url="http://www.youtube.com/watch?v=L_LLYTm-QnM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/L_LLYTm-QnM/hqdefault.jpg"></media:thumbnail></item><item><title>From Source to Code: How CPython's Compiler Works</title><link>http://www.pyvideo.org/video/2331/from-source-to-code-how-cpythons-compiler-works</link><description>&lt;p&gt;Abstract&lt;/p&gt;
How the heck does CPython take a blob of bytes you call source code and create another blob of bytes called bytecode which it is able to execute to make the magic of Python programs work? This talk's aim is to provide a conceptual answer to that question. The overall process of tokenizing, parsing, creating an AST, and then finally emitting bytecode will be covered. 

If you have no clue what any of those previous words meant, don't worry! This talk will be accessible to people who are not compiler experts. We'll also cover how various parts of the compiler are exposed through Python's standard library so you can play with what you learn afterwards.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Sat, 10 Aug 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2331/from-source-to-code-how-cpythons-compiler-works</guid><enclosure url="http://www.youtube.com/watch?v=R31NRWgoIWM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/R31NRWgoIWM/hqdefault.jpg"></media:thumbnail></item><item><title>How Import Works</title><link>http://www.pyvideo.org/video/1707/how-import-works</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This talk will go over how the simple ``from sys import version`` turns out to be slightly complicated. The details of imports -- from how the import statement is interpreted to deciding what object to return -- will be discussed. While the talk will discuss things from the perspective of Python 3.3 (and thus importlib), the overall semantics will (mostly) apply to older versions of Python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Sun, 17 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1707/how-import-works</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/How_Import_Works.mp4?Signature=sQ7pDz3BBhMJR04cSsXNxR%2BhBN8%3D&amp;Expires=1363823628&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/How_Import_Works.mp4?Signature=sQ7pDz3BBhMJR04cSsXNxR%2BhBN8%3D&amp;Expires=1363823628&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=AqnxyRuenAg" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/AqnxyRuenAg/hqdefault.jpg"></media:thumbnail></item><item><title>Python 3.3: Trust Me, It's Better than 2.7</title><link>http://www.pyvideo.org/video/1730/python-33-trust-me-its-better-than-27</link><description>&lt;p&gt;Abstract&lt;/p&gt;
In this talk I will try to convince you that Python 3.3 is superior to Python 2.7 by going over the differences between Python 2.7 and Python 3.3 along with benchmark information to show where Python 3.3 shines in comparison to Python 2.7 (and vice-versa). If I accomplish my goal, you will walk out of this talk convinced that Python 2.7 is not the final version of Python you want to support.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1730/python-33-trust-me-its-better-than-27</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Python_33_Trust_Me_Its_Better_.mp4?Signature=KqAFSIQTjnQUwh3mopY6%2BrlIwCw%3D&amp;Expires=1363838166&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Python_33_Trust_Me_Its_Better_.mp4?Signature=KqAFSIQTjnQUwh3mopY6%2BrlIwCw%3D&amp;Expires=1363838166&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=f_6vDi7ywuA" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/f_6vDi7ywuA/hqdefault.jpg"></media:thumbnail></item><item><title>Panel: Python VMs</title><link>http://www.pyvideo.org/video/421/panel-python-vms</link><description>&lt;p&gt;Description&lt;/p&gt;
Panel: Python VMs

Presented by Jacob Kaplan-Moss, Brett Cannon, Maciej Fijalkowski, Frank
Wierzbicki, Dino Viehland

Python is lucky enough to have a healthy ecosystem of virtual machines (VMs)
exist. CPython, Jython, IronPython, and PyPy are all used extensively by
people in real-world situations. This panel brings together a representative
from each of the major VMs to discuss where they are now, going in the future,
and to answer questions from the community.

Abstract

All four major Python VMs will be represented:

  * [CPython](http://python.org/): Brett Cannon 
  * [Jython](http://www.jython.org/): Frank Wierzbicki 
  * [IronPython](http://ironpython.net/): Dino Viehland 
  * [PyPy](http://pypy.org/): Maciej Fijalkowski 
Moderation will be handled by Jacob Kaplan-Moss of Django.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon,Dino Viehland,Frank J Wierzbicki,Jacob Kaplan-Moss,Maciej Fijalkowski</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/421/panel-python-vms</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2011/421_panel-python-vms.mp4" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2011PanelPythonVMs871.png"></media:thumbnail></item><item><title>Import this, that, and the other thing: custom importers (#9)</title><link>http://www.pyvideo.org/video/341/pycon-2010--import-this--that--and-the-other-thin</link><description>&lt;p&gt;Description&lt;/p&gt;
Import this, that, and the other thing. Custom importers

  
Presented by Brett Cannon

  
Since Python 2.3, the ability has existed to customize the import process so
that one can support code stored in alternative formats, e.g. zipimport and
its support of importing code from a zip file. The aim of this talk is to make
sure you understand how the custom import mechanism works and how to write
your own custom importers using importlib from Python 3.1.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/341/pycon-2010--import-this--that--and-the-other-thin</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/341_import-this-that-and-the-other-thing-custom-importers-9.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/341_import-this-that-and-the-other-thing-custom-importers-9.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/341_import-this-that-and-the-other-thing-custom-importers-9.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ImportThisThatAndTheOtherThingCustomImporters824.png"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Allison Kaptur</title><link>http://www.pyvideo.org/speaker/1187/allison-kaptur/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1187/allison-kaptur/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 06 Sep 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Keynote: Ways that we (as professional or hobby programmers) can be more effective learners</title><link>http://www.pyvideo.org/video/3872/keynote-ways-that-we-as-professional-or-hobby-p</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Kaptur</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3872/keynote-ways-that-we-as-professional-or-hobby-p</guid><enclosure url="http://youtu.be/Mcc6JEhDSpo" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/Mcc6JEhDSpo/hqdefault.jpg"></media:thumbnail></item><item><title>Bytes in the Machine: Inside the CPython interpreter</title><link>http://www.pyvideo.org/video/3420/bytes-in-the-machine-inside-the-cpython-interpre</link><description>&lt;p&gt;Description&lt;/p&gt;
Have you ever wondered how the CPython interpreter works? Do you know where to find a 1,500 line switch statement in CPython? I'll talk about the structure of the interpreter that we all use every day by explaining how Ned Batchelder and I chased down a mysterious bug in Byterun, a Python interpreter written in Python. We'll also see visualizations of the VM as it executes your code.


</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Kaptur</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3420/bytes-in-the-machine-inside-the-cpython-interpre</guid><enclosure url="https://www.youtube.com/watch?v=HVUTjQzESeo" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/HVUTjQzESeo/hqdefault.jpg"></media:thumbnail></item><item><title>Exploring is never boring: understanding CPython without reading the code</title><link>http://www.pyvideo.org/video/3465/exploring-is-never-boring-understanding-cpython</link><description>&lt;p&gt;Description&lt;/p&gt;
Have you started to read the source code of CPython but not gotten as far as you wanted? Maybe you want to understand more about CPython but don't know where to begin. I'll present a number of strategies for getting more familiar with Python under the hood that go beyond ""just read it!"" This talk isn't about contributing - it's about getting into the code base and discovering interesting things.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Kaptur</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3465/exploring-is-never-boring-understanding-cpython</guid><enclosure url="https://www.youtube.com/watch?v=ZSIRGLmQTLk" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/ZSIRGLmQTLk/hqdefault.jpg"></media:thumbnail></item><item><title>Import-ant Decisions</title><link>http://www.pyvideo.org/video/2567/import-ant-decisions</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Suppose `import` didn't exist, and we had to invent it from scratch. We'll look at the problem - code sharing and reuse across modules - and different ways we could solve it. We'll come up with `import` from parallel universes and then reinvent python's actual implementation. Finally, we'll import - using python's design - without using the `import` keyword.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Kaptur</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2567/import-ant-decisions</guid><enclosure url="http://www.youtube.com/watch?v=aS5kXzbsLLQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/aS5kXzbsLLQ/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Marco Buttu</title><link>http://www.pyvideo.org/speaker/1842/marco-buttu/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1842/marco-buttu/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 30 May 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Lessons learned about testing and TDD</title><link>http://www.pyvideo.org/video/3582/lessons-learned-about-testing-and-tdd</link><description>&lt;p&gt;Description&lt;/p&gt;
Prima o poi, sperabilmente, il nostro software andrà in produzione. Questo è il momento in cui gli errori di gioventù si pagano cari, senza alcuno sconto. Se non abbiamo scritto regression test, siamo veramente nei guai, guai seri! Se li abbiamo scritti, ma senza adottare il TDD, probabilmente aumenterà il tempo necessario per il bug fix e la manutenzione, sia perché non abbiamo massimizzato la copertura del codice, sia perché i test risulteranno complessi e con duplicazioni.
In questo talk l’autore parlerà dei suoi errori di gioventù, del perché ha adottato il TDD come disciplina per lo sviluppo e di quelle che considera le best practice. Verranno mostrati degli esempi di test di accettazione, funzionali, di integrazione e unitari. Esempi reali, ma semplici ed eloquenti, volti ad evidenziare non solo l’utilità dei test, ma anche quella di scriverli prima del codice. Il contesto è quello del Sardinia Radio Telescope.
Slides: http://marco-buttu.github.io/pycon_testing/
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Buttu</dc:creator><pubDate>Sat, 30 May 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3582/lessons-learned-about-testing-and-tdd</guid><enclosure url="https://www.youtube.com/watch?v=Ptu_d9-wDlU" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/Ptu_d9-wDlU/maxresdefault.jpg"></media:thumbnail></item><item><title>Il modello ad oggetti di Python</title><link>http://www.pyvideo.org/video/3621/il-modello-ad-oggetti-di-python</link><description>&lt;p&gt;Description&lt;/p&gt;
Come sappiamo in Python ogni nome è legato ad un oggetto, e questo è il motivo per cui si dice: everything in Python is an object. Ma in realtà cosa sia un oggetto, non sempre ci è ben chiaro, e anche nella documentazione ufficiale difatti si trovano imprecisioni in proposito.
Lo scopo di questo talk è illustrare il modello ad oggetti di Python, in modo sia da chiarire il significato delle relazioni tra oggetti, sia i termini oggetto, istanza, classe e tipo. Vedremo quanto sia importante capire il concetto di metaclasse, perché anche se mai ne definiremo una, programmando in Python ne avremo a che fare quotidianamente.
A questo punto sapremo che se una classe ha un attributo, non significa che anche le sue istanze lo debbano avere. Capiremo che non ha senso fare distinzioni tra oggetti e classi, mentre ha senso farle tra classi e non-classi.
Slides: http://marco-buttu.github.io/pycon_objmodel/
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Buttu</dc:creator><pubDate>Fri, 29 May 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3621/il-modello-ad-oggetti-di-python</guid><enclosure url="https://www.youtube.com/watch?v=Wv2U38kGI4A" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/Wv2U38kGI4A/maxresdefault.jpg"></media:thumbnail></item></channel></rss>
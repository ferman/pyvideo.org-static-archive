<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of A. Jesse Jiryu Davis</title><link>http://www.pyvideo.org/speaker/1186/a-jesse-jiryu-davis/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/1186/a-jesse-jiryu-davis/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 16 Aug 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>How Do Python Coroutines Work?</title><link>http://www.pyvideo.org/video/3765/how-do-python-coroutines-work</link><description>&lt;p&gt;Description&lt;/p&gt;
Python 3's new “asyncio” module is an efficient async framework similar to Node. But unlike Node, it emphasizes a modern idiom called "coroutines", rather than callbacks. Coroutines promise the best of two worlds: the efficiency of callbacks, but with a natural and robust coding style similar to synchronous programming.

In barely 30 minutes I live-code a Python 3 async framework. First, I show how an async framework uses non-blocking sockets, callbacks, and an event loop. This version of the framework is very efficient, but callbacks make a mess of the code. Therefore, I implement coroutines using Python generators and two classes called Future and Task, and update my little framework to use coroutines instead of callbacks.

The live-coding demo isn't just a magic trick: watch to see how simply a coroutine-based async framework can be implemented, and gain a deep understanding of this miraculous new programming idiom in the Python 3 standard library.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A. Jesse Jiryu Davis</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3765/how-do-python-coroutines-work</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pygotham-2015/3765_How_Do_Python_Coroutines_Work.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pygotham-2015/3765_How_Do_Python_Coroutines_Work.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/idLtMISlgy8" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/idLtMISlgy8/hqdefault.jpg"></media:thumbnail></item><item><title>Eventually Correct: Testing Async Apps</title><link>http://www.pyvideo.org/video/3419/eventually-correct-testing-async-apps</link><description>&lt;p&gt;Description&lt;/p&gt;
Async frameworks like Tornado and asyncio scramble our usual strategies for writing sequential code. This is most problematic when writing tests: how can you validate the outcome when you don’t know when to expect it? This talk introduces you to methods and practices for unittesting async applications.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A. Jesse Jiryu Davis</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3419/eventually-correct-testing-async-apps</guid><enclosure url="https://www.youtube.com/watch?v=GpvCSkxLiZo" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/GpvCSkxLiZo/hqdefault.jpg"></media:thumbnail></item><item><title>Python Performance Profiling: The Guts And The Glory</title><link>http://www.pyvideo.org/video/3394/python-performance-profiling-the-guts-and-the-gl-0</link><description>&lt;p&gt;Description&lt;/p&gt;
Your Python program is too slow, and you need to optimize it. Where do you start? With the right tools, you can optimize your code where it counts. We’ll explore the guts of the Python profiler “Yappi” to understand its features and limitations. We’ll learn how to find the maximum performance wins with minimum effort.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A. Jesse Jiryu Davis</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3394/python-performance-profiling-the-guts-and-the-gl-0</guid><enclosure url="https://www.youtube.com/watch?v=4uJWWXYHxaM" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/4uJWWXYHxaM/hqdefault.jpg"></media:thumbnail></item><item><title>Python Performance Profiling: The Guts And The Glory</title><link>http://www.pyvideo.org/video/3251/python-performance-profiling-the-guts-and-the-gl</link><description>&lt;p&gt;Description&lt;/p&gt;
Your Python program is too slow, and you need to optimize it. Where do you start? With the right tools, you can optimize your code where it counts. We'll explore the guts of the Python profiler Yappi to understand its features and limitations, and learn how to find the maximum performance wins with minimum effort.


About the speaker

Author of Motor, an async MongoDB driver for Tornado, and of Toro, a library of locks and queues for Tornado coroutines. Author of GreenletProfiler. Contributor to Python, PyMongo, MongoDB, Yappi, Tornado, and Tulip.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A. Jesse Jiryu Davis</dc:creator><pubDate>Fri, 27 Jun 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3251/python-performance-profiling-the-guts-and-the-gl</guid><enclosure url="https://www.youtube.com/watch?v=BOKcZjI5zME" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/BOKcZjI5zME/hqdefault.jpg"></media:thumbnail></item><item><title>What Is Async, How Does It Work, and When Should I Use It?</title><link>http://www.pyvideo.org/video/3276/what-is-async-how-does-it-work-and-when-should-0</link><description>&lt;p&gt;Description&lt;/p&gt;
Python's asynchronous frameworks, like asyncio, Tornado, and Twisted, are increasingly important for writing high-performance web applications. Even if you're an experienced web programmer, you may lack a rigorous understanding of how these frameworks work and when to use them. Let's see how asyncio's event loop works, and learn how to efficiently handle very large numbers of concurrent connections.

Attendees will learn when to use async and when not to. They'll learn about asyncio, a major new feature in the Python 3.4 standard library: what it is, how it works, and how to use it for high-concurrency web programming.


About the speaker

Author of Motor, an async MongoDB driver for Tornado, and of Toro, a library of locks and queues for Tornado coroutines. Author of GreenletProfiler. Contributor to Python, PyMongo, MongoDB, Yappi, Tornado, and Tulip.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A. Jesse Jiryu Davis</dc:creator><pubDate>Thu, 26 Jun 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3276/what-is-async-how-does-it-work-and-when-should-0</guid><enclosure url="https://www.youtube.com/watch?v=kdzL3r-yJZY" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/kdzL3r-yJZY/hqdefault.jpg"></media:thumbnail></item><item><title>What Is Async, How Does It Work, And When Should I Use It?</title><link>http://www.pyvideo.org/video/2565/what-is-async-how-does-it-work-and-when-should</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python's asynchronous frameworks, like Tulip, Tornado, and Twisted, are increasingly important for writing high-performance web applications. Even if you're an experienced web programmer, you may lack a rigorous understanding of how these frameworks work and when to use them. Let's see how Tulip's event loop works, and learn how to efficiently handle very large numbers of concurrent connections.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A. Jesse Jiryu Davis</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2565/what-is-async-how-does-it-work-and-when-should</guid><enclosure url="http://www.youtube.com/watch?v=9WV7juNmyE8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/9WV7juNmyE8/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Benjamin Peterson</title><link>http://www.pyvideo.org/speaker/359/benjamin-peterson/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/359/benjamin-peterson/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 11 Apr 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>The (Slightly) Less Sorry State of SSL</title><link>http://www.pyvideo.org/video/3393/the-slightly-less-sorry-state-of-ssl</link><description>&lt;p&gt;Abstract&lt;/p&gt;
We show off the security improvements made to the standard library TLS
and networking modules over the last year.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benjamin Peterson</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3393/the-slightly-less-sorry-state-of-ssl</guid><enclosure url="https://www.youtube.com/watch?v=4o-xqqidvKA" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/4o-xqqidvKA/hqdefault.jpg"></media:thumbnail></item><item><title>Garbage Collection in Python</title><link>http://www.pyvideo.org/video/2633/garbage-collection-in-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This talk will explore how garbage collection is implemented in CPython and PyPy. See how CPython deals reference counting's shortcomings with a special GC for cycle collection. Then dive into PyPy's sophisticated and high-performing GC implementations. The particularly thorny issue of finalizers in reference cycles will also be addressed.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benjamin Peterson</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2633/garbage-collection-in-python</guid><enclosure url="http://www.youtube.com/watch?v=iHVs_HkjdmI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/iHVs_HkjdmI/hqdefault.jpg"></media:thumbnail></item><item><title>The Guts of Unicode in Python</title><link>http://www.pyvideo.org/video/1768/the-guts-of-unicode-in-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This talk will examine how Python's internal Unicode representation has changed from its introduction through the latest major changes in Python 3.3. I'll present properties of the current Unicode implementation like algorithmic complexity and standard compliance. The talk will also compare Unicode in Python with some other languages. Finally, I'll look into the future of Python's Unicode.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benjamin Peterson</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1768/the-guts-of-unicode-in-python</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/The_Guts_of_Unicode_in_Python.mp4?Signature=vGQF0Hp4sSFsf9CBkKuQwdqutsg%3D&amp;Expires=1363840015&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/The_Guts_of_Unicode_in_Python.mp4?Signature=vGQF0Hp4sSFsf9CBkKuQwdqutsg%3D&amp;Expires=1363840015&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=Nfqh6lr3frQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/Nfqh6lr3frQ/hqdefault.jpg"></media:thumbnail></item><item><title>How the PyPy JIT works</title><link>http://www.pyvideo.org/video/662/how-the-pypy-jit-works</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The Python community is abuzz about the major speed gains PyPy can offer pure
Python code. But how does PyPy JIT actually work? This talk will discuss how
the PyPy JIT is implemented. It will include descriptions of the tracing,
optimization, and assembly generation phases. I will demonstrate each step
with a example loop.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benjamin Peterson</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/662/how-the-pypy-jit-works</guid><enclosure url="https://www.youtube.com/watch?v=NIcijUt-HlE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/NIcijUt-HlE/hqdefault.jpg"></media:thumbnail></item></channel></rss>
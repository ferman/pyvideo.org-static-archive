<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of Van Lindberg</title><link>http://www.pyvideo.org/speaker/226/van-lindberg/rss</link><description></description><atom:link href="http://www.pyvideo.org/speaker/226/van-lindberg/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 12 Apr 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Keynote - Van Lindberg - Pycon 2015</title><link>http://www.pyvideo.org/video/3494/keynote-van-lindberg-pycon-2015</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Van Lindberg</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3494/keynote-van-lindberg-pycon-2015</guid><enclosure url="https://www.youtube.com/watch?v=lvlfTZzJ2_Q" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/lvlfTZzJ2_Q/hqdefault.jpg"></media:thumbnail></item><item><title>Keynote - Van Lindberg</title><link>http://www.pyvideo.org/video/2688/keynote-van-lindberg</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Van Lindberg</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2688/keynote-van-lindberg</guid><enclosure url="http://www.youtube.com/watch?v=uQU3ugtYKNo" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i1.ytimg.com/vi/uQU3ugtYKNo/hqdefault.jpg"></media:thumbnail></item><item><title>PyCon 2014 Awards</title><link>http://www.pyvideo.org/video/2702/pycon-2014-awards</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The awards portion of Van Lindberg's keynote at PyCon 2014.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Van Lindberg</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2702/pycon-2014-awards</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2014/pycon2014_awards.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2014/pycon2014_awards.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2014/pycon2014_awards.mp4" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="/static/videos/img/no_thumbnail.png"></media:thumbnail></item><item><title>Keynote</title><link>http://www.pyvideo.org/video/1666/keynote-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Van Lindberg is a software engineer and practicing attorney. What he does most, though, is translate - from "lawyer" to "engineer" and back. He likes working with both computer code and legal code to get things done.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Van Lindberg</dc:creator><pubDate>Sun, 17 Mar 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1666/keynote-0</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Keynote-0.mp4?Signature=1BehI01RPWL4HryrzApj8Q1EOd0%3D&amp;Expires=1363829412&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Keynote-0.mp4?Signature=1BehI01RPWL4HryrzApj8Q1EOd0%3D&amp;Expires=1363829412&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=2wr8veJzZiU" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/2wr8veJzZiU/hqdefault.jpg"></media:thumbnail></item><item><title>Graph Processing in Python</title><link>http://www.pyvideo.org/video/627/graph-processing-in-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Graphs are everywhere - from your distributed source code control to Twitter
analytics. This session presents a set of three problems and shows how they
can be decomposed into operations on graphs, and then demonstrates solutions
using the various graph libraries available for (or accessible to) Python.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Van Lindberg</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/627/graph-processing-in-python</guid><enclosure url="https://www.youtube.com/watch?v=Mv3xgBQJPaE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://img.youtube.com/vi/Mv3xgBQJPaE/hqdefault.jpg"></media:thumbnail></item><item><title>How to kill a patent with Python</title><link>http://www.pyvideo.org/video/425/pycon-2011--how-to-kill-a-patent-with-python</link><description>&lt;p&gt;Description&lt;/p&gt;
How to kill a patent with Python

Presented by Van Lindberg

Finding the right piece of "prior art" - technical documentation that
described a patented piece of technology before the patent was filed - is like
finding a needle in a very big haystack. This session will talk about how I am
making that process faster and more accurate through the use of natural
language processing, graph theory, machine learning, and lots of Python.

Abstract

From my work consulting on a number of patent cases, I am frequently asked to
find "prior art" - patents and publications that describe a technology before
a certain date. The problem is that the indexing mechanisms for patents and
publications are not as good as they could be, making good prior art searching
more of an art than a science. When I decided to do better, I reached for
Python.

  * Part I (5 mins): The USPTO as a data source.* The full-text of each patent is available from the USPTO (and now from Google.) What does this data look like? How can it be harvested and normalized to create data structures that we can work with? 
  * Part II (15 mins, in two parts):* Once the patents have been cleaned and normalized, they can be turned into data structures that we can use to evaluate their relationship to other documents. This is done in two ways - by modeling each patent as a document vector and a graph node. 
  * Part IIA (7 mins): Patents as document vectors.* Once we have a patent as a data structure, we can treat the patent as a vector in an n-dimensional space. In moving from a document into a vector space, we will touch on normalization, stemming, TF/IDF, Latent Semantic Indexing (LSI) and Latent Dirichlet Allocation (LDA). 
  * Part IIB (7 mins): Patents as technology graphs.* This will show building graph structures using the connections between patents - both the built-in connections in the patents themselves as well as the connections discovered while working with the patents as vectors. We apply some social network analysis to partition the patent graph and find other documents in the same technology space. 
  * Part III (5 mins): What have we built?* Now that we have done all this analysis, we can see some interesting things about the patent database as a whole. How does the patent database act as a map to the world of technology? And how has this helped with the original problem - finding better prior art?

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Van Lindberg</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/425/pycon-2011--how-to-kill-a-patent-with-python</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2011/425_how-to-kill-a-patent-with-python.mp4" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2011HowToKillAPatentWithPython889.png"></media:thumbnail></item></channel></rss>
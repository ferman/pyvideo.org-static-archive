<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of EuroPython 2011</title><link>http://www.pyvideo.org/category/19/europython-2011/rss</link><description></description><atom:link href="http://www.pyvideo.org/category/19/europython-2011/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Mon, 27 Feb 2012 00:00:00 -0600</lastBuildDate><ttl>500</ttl><item><title>Browse and print problems and solutions</title><link>http://www.pyvideo.org/video/1006/browse-and-print-problems-and-solutions</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Jonathan Fine - 21 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
With the growth of the web, how we publish is changing. Paper alone is not
enough, web pages are also required. And for many web pages it is not enough
to rely on the browser’s print capabilities. Sphinx, used since 2008 for
Python’s documentation, is a creative response to this tension.

This talk will take a broader view of the problem. For example, many browsers
support web fonts for display but not for printing. Mathematics on web pages
is still difficult, but SVG holds out much promise not only for mathematics
but for tables and other complex typeset material. Achieving accessibility
remains difficult.

Based on over 15 year’s experience in print and electronic publishing, this
talk will survey problems and emerging solutions. Software and sites covered
include LaTeX, PDF, SVG, MathJax, web-fonts, PediaPress, Sphinx and arXiv.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Fine</dc:creator><pubDate>Mon, 27 Feb 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/1006/browse-and-print-problems-and-solutions</guid><enclosure url="http://www.youtube.com/watch?v=ilwSRRLlOnE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/ilwSRRLlOnE/hqdefault.jpg"></media:thumbnail></item><item><title>EuroPython 2011: Video Reportage!</title><link>http://www.pyvideo.org/video/1007/europython-2011-video-reportage</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Here is a report that condenses in 3 minutes the adventure of 2011! Thanks to
all participants, speakers and sponsors who made this great event in Italy
dedicated to Python!


&lt;p&gt;Description&lt;/p&gt;
Montage of EuroPython 2011.

</description><pubDate>Thu, 11 Aug 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1007/europython-2011-video-reportage</guid><enclosure url="http://www.youtube.com/watch?v=eu_vAisNHVA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/eu_vAisNHVA/hqdefault.jpg"></media:thumbnail></item><item><title>EuroPython 2012: Join us in Florence on July!</title><link>http://www.pyvideo.org/video/1008/europython-2012-join-us-in-florence-on-july</link><description>&lt;p&gt;Abstract&lt;/p&gt;
We hope to have you among the participants of 2012! EuroPython is the official
European conference about the Python programming language. It is aimed at
everyone in the Python community, of all skill levels, both users and
programmers.


&lt;p&gt;Description&lt;/p&gt;
Looking forward to EuroPython 2012.

</description><pubDate>Thu, 11 Aug 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1008/europython-2012-join-us-in-florence-on-july</guid><enclosure url="http://www.youtube.com/watch?v=BDiEbi0yCY8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/BDiEbi0yCY8/hqdefault.jpg"></media:thumbnail></item><item><title>Man Page of the Warrior of Light</title><link>http://www.pyvideo.org/video/1009/man-page-of-the-warrior-of-light</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Semen Trygubenko - 22 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Structured as an adaptation of Paulo Coelho's teachings for the striving for
excellence member of programming community, this talk will cover values- and
principles-based foundations for building good patterns and other technical
and social aspects of being a good programmer.

With examples in Python.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Semen Trygubenko</dc:creator><pubDate>Wed, 10 Aug 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1009/man-page-of-the-warrior-of-light</guid><enclosure url="http://www.youtube.com/watch?v=uh92G5RDiiA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/uh92G5RDiiA/hqdefault.jpg"></media:thumbnail></item><item><title>A Python Takeover</title><link>http://www.pyvideo.org/video/1031/a-python-takeover</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mark Ramm-Christensen - 23 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
Two years ago I started working on SourceForge with a couple of python
developers. Back then the site was written in PHP and was in some ways buried
in technical debt. Everything is different today, we have a complete set of
tools for Ticket tracking, Wiki documents, Git, Mercurial, Subversion, and IRC
- all written in Python, and now released as open source software.

This is the story of how the amazing libraries, tools, and talent in the
Python web community has radically changed an established company, and allowed
us to reinvent sourceforge.net.

This talk will go over our tech stack, talk about the libraries we used, the
way we solved scalability, internationalization, and performance issues
issues. Ultimately we know that without python, we could not have built a
flexible plugin based system, and gotten permission from management to open
source it.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Ramm-Christensen</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1031/a-python-takeover</guid><enclosure url="http://www.youtube.com/watch?v=k-wbWT8KwAI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/k-wbWT8KwAI/hqdefault.jpg"></media:thumbnail></item><item><title>Beyond Python Enhanced Generators</title><link>http://www.pyvideo.org/video/1030/beyond-python-enhanced-generators</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Erik Groeneveld - 23 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Right after the introduction of PEP342 (Enhanced Generators) we started to
decompose programs into generators. It was soon discovered that for real-life
problems one would need something like "yield from", as is described in
PEP380. At that time, we already had a similar solution called
'[compose](http://weightless.io/compose)', which we adapted to PEP380.

After 5 years working with 'compose', we found a small set of other features
that are essential if you want to use Enhanced Generators not only as a way of
lightweight command scheduling, but also a a pipe-line, or parser. Indeed, the
latter concepts are what real co-routines are about.

This talk introduces what is needed on top of PEPs 342 and 380 based on
experience with decomposing big enterprise search engines into co-routines.
Parts of it have been presented on SPA (2008) and EuroPython (2010).
Understanding of Enhanced Generators is a prerequisite.

Experience has shown that the topic is subtle enough to require quite some
time for full understanding, hence the suggestion for a 90 min slot.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Groeneveld</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1030/beyond-python-enhanced-generators</guid><enclosure url="http://www.youtube.com/watch?v=yWR00Y6tkC8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/yWR00Y6tkC8/hqdefault.jpg"></media:thumbnail></item><item><title>Building a Scientific Software Application with the Enthought Tool Suite</title><link>http://www.pyvideo.org/video/1029/building-a-scientific-software-application-with-t</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mark Dickinson - 24 June 2011 in "Training Pizza Margherita
"


&lt;p&gt;Description&lt;/p&gt;
The Enthought Tool Suite (ETS) is a collection of Python-based open source
components that form a foundation for nearly every application that we deliver
to our customers. In this talk I'll demonstrate how to use ETS to rapidly
develop an example scientific software application. We'll concentrate
particularly on introducing Traits, Traits UI, and the Chaco and Mayavi
visualisation tools.

Prerequisites: some previous experience of working with Python and NumPy /
SciPy is recommended.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Dickinson</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1029/building-a-scientific-software-application-with-t</guid><enclosure url="http://www.youtube.com/watch?v=F4qHeJqlYbk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/F4qHeJqlYbk/hqdefault.jpg"></media:thumbnail></item><item><title>Combining Embedded and Interactive Python in a Debugger:  A Case Study</title><link>http://www.pyvideo.org/video/1028/combining-embedded-and-interactive-python-in-a-de</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Caroline Tice - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
LLDB is an open source compiler currently under development. LLDB incorporates
Python in several different ways: From the command line, one can drop into an
interactive Python script interpreter, entering normal Python interactive
commands and having them interpreted and executed. In addition, the LLDB
debugger has a programming API that allows users to call actual debugger
functions and access real debugger objects. This API is run through SWIG and
converted into a Python module that gets automatically imported into the
interactive interpreter inside LLDB. The upshot of this is that, in the Python
mode, users can call the API functions as if they were regular Python
functions. This is turn means that users can do things like hit a breakpoint,
call the appropriate API functions to get the actual current frame object,
check to see if the caller function several frames up the stack is a
particular function, and if so, perform some other interesting action. LLDB
also allows for breakpoint commands to be written in Python (which therefore
allows them to call the API functions), as well as having a command that
interprets and executes a single line of Python.

Because the API and all of the debugger functionality is available in a Python
module, it is also possible to write a debugger front end completely in Python
and have it import the LLDB module and call the LLDB API functions (which
calls into the LLDB shared library), to create a new debugger front end. Our
test suite takes advantage of this to run tests on the LLDB library without
having to start up an interactive LLDB debubgger session.

There were many interesting problems encountered and overcome in getting all
of this to work. LLDB combines both interactive Python and embedded Python.
There were some interesting things worked out so that a single Python
environment dictionary is used for the entire debugger session: A user can pop
into and out of the interactive interpreter and have access at any time to
anything defined in any previous visit to the interactive interpreter (within
the same debug session); breakpoint commands have access to everything defined
in the interactive session; so do embedded script commands. It gets even more
complicated, because LLDB can have multiple debugger sessions alive at once,
and each debugger session has its own Python interpreter with its own
dictionary and must not be allowed to interfere with another session's state.
In this talk I will discuss how we implemented many of these features in LLDB,
pointing out some of the more interesting problems we encountered and how we
overcame them, and demonstrate it all working in LLDB.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Caroline Tice</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1028/combining-embedded-and-interactive-python-in-a-de</guid><enclosure url="http://www.youtube.com/watch?v=a6oHHGIV3r4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/a6oHHGIV3r4/hqdefault.jpg"></media:thumbnail></item><item><title>Data Driven Cache Invalidation</title><link>http://www.pyvideo.org/video/1027/data-driven-cache-invalidation</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Magnus Hagander - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
In todays world, nobody (should) deploy a web application facing the internet
without having a proper caching system in place. There are many different
solutions to choose from, from manual use of memcached through framework
integrated caching to external caches like Squid or Varnish. Most modern
frameworks come with integrated functionality for at least one of these
methods, and often more than one.

However, they often relies on all traffic going through the same framework to
work properly - a caching layer in Rails is hard to share with one in Django.
This talk will show a way to break the design rules of these frameworks just a
little, and have the database help solve this problem.

This talk will use a small application written in Python using Django to
illustrate the examples, but the method is language independent.
Unsurprisingly, the database used is PostgreSQL.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Magnus Hagander</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1027/data-driven-cache-invalidation</guid><enclosure url="http://www.youtube.com/watch?v=U_IZVEZImq4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/U_IZVEZImq4/hqdefault.jpg"></media:thumbnail></item><item><title>Deploying web applications to the cloud with Python</title><link>http://www.pyvideo.org/video/1026/deploying-web-applications-to-the-cloud-with-pyth</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Nate Aune - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
How can Python help you deploy web applications to the cloud? Amazon EC2
provides virtual machines on demand but as a developer you still have to
configure these machines and push your code to them. Fabric is a Python
library that lets you execute commands on a remote machine, and Boto is a
Python library for interfacing with Amazon web services. By using Fabric and
Boto, you can easily create repeatable deployments and provision new resources
as needed with minimal effort.

This talk will introduce Amazon Web Services and how to launch new machines
using simple Boto scripts, and how to get started making your own repeatable
deployments using Fabric scripts.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nate Aune</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1026/deploying-web-applications-to-the-cloud-with-pyth</guid><enclosure url="http://www.youtube.com/watch?v=zvwi-PLrCgE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/zvwi-PLrCgE/hqdefault.jpg"></media:thumbnail></item><item><title>Derivatives Analytics with Python &amp; Numpy</title><link>http://www.pyvideo.org/video/1025/derivatives-analytics-with-python-numpy</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Yves Hilpisch - 24 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
In financial engineering and derivatives analytics, C/C++/Java/VBA and other
languages are still dominating. Visixion has developed with
[DEXISION](http://www.dexision.com) the first full fledged derivatives
analytics suite with Python as core language.

DEXISION is an On Demand application that is completely Open Source based
(LAMP). For derivatives valuation, it uses Monte Carlo simulation - an
approach known to be computationally demanding. However, Numpy provides the
performance and functionality needed to implement financial simulation
algorithms in a fast and compact manner.

The talk illustrates the architecture of our analytics suite and demonstrates
how to implement fast and compact simulation algorithms with Python and Numpy.
The talk shows that the Python/Numpy combination reaches sufficient speed for
productive financial applications - something still widely doubted.

[No prerequisites.]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yves Hilpisch</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1025/derivatives-analytics-with-python-numpy</guid><enclosure url="http://www.youtube.com/watch?v=c4WltP4-Xlk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/c4WltP4-Xlk/hqdefault.jpg"></media:thumbnail></item><item><title>Developing Desktop and mobile apps with PySide and QML</title><link>http://www.pyvideo.org/video/1024/developing-desktop-and-mobile-apps-with-pyside-an</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Thomas Perl - 24 June 2011 in "Training Pizza Margherita "


&lt;p&gt;Description&lt;/p&gt;
PySide offers Python bindings to the Qt libraries. This allows rapid
development of great UI-based Python applications. With the addition of QML in
Qt 4.7, this now gives developers a chance to develop touch-based, rich
applications directly with Python. This talk introduces PySide development,
combined with QML, and shows some real-world examples of mobile PySide
applications.

This talk is based on my PySide/QML on [MeeGo tutorials](http://thp.io/2010
/meego-python/), and shows some of the possibilities. It is aimed at Python
developers looking for a GUI toolkit to create fluent, hardware-accelerated
cross-platform UIs using QML.

Materials available at:
[http://thp.io/2011/europython/](http://thp.io/2011/europython/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Perl</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1024/developing-desktop-and-mobile-apps-with-pyside-an</guid><enclosure url="http://www.youtube.com/watch?v=isDQXSv5kGw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/isDQXSv5kGw/hqdefault.jpg"></media:thumbnail></item><item><title>Django productivity tips and tricks</title><link>http://www.pyvideo.org/video/1023/django-productivity-tips-and-tricks</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Simone Federici - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
I will show in this talk some tips, tricks and best practices for some
recurring patterns in the django application development.

This is not a list of tools and applications, but rather a homemade summary of
code snippets and design best practices. All in all, the goal is: no mistakes
and go faster.

Topics include: python, users, forms, jquery, virtualenv, distribute,
buildbot, etc. …

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Federici</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1023/django-productivity-tips-and-tricks</guid><enclosure url="http://www.youtube.com/watch?v=l5E3BZOZ7Qg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/l5E3BZOZ7Qg/hqdefault.jpg"></media:thumbnail></item><item><title>Fun with Python's newer tools</title><link>http://www.pyvideo.org/video/1022/fun-with-pythons-newer-tools</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Raymond Hettinger - 23 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Spend ten minutes each learning to work with Counters, named tuples, new
string formatting, and the LRU cache. Learn the basic API, see how it works
under the hood, enjoy a simple example, and then have fun pushing it to the
limit in interesting ways.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1022/fun-with-pythons-newer-tools</guid><enclosure url="http://www.youtube.com/watch?v=twrNGyl1sbc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/twrNGyl1sbc/hqdefault.jpg"></media:thumbnail></item><item><title>Healthcare process management in Python: a use case</title><link>http://www.pyvideo.org/video/1021/healthcare-process-management-in-python-a-use-ca</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Federico Caboni - 24 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
In this talk I'll describe our successful experience in introducing Python
into a system for blood collection tube labeling in laboratory and hospital
environments, based on IHE Technical Frameworks –the industry standard for
modeling and streamlining healthcare processes– and designed to avoid human
errors and ensure process traceability.

During the talk I will explain why we chose Python in the first place, how
we've been able to leverage the language's features and characteristics for
our specific field and what problems and limitations we faced.

I will show specific instances of Python usage in different parts of the
project, including a low-level driver for laboratory automation machinery, an
asynchronous messaging module, the implementation of IHE-compliant actors and
the inevitable end-user web application, implemented with Django.

Using Python greatly helped us in building our system, allowing very rapid
prototyping cycles for both hardware and software, but during the talk I'll
also point out what we found was missing, and what would be nice to have to
ensure Python has its proper place as a viable platform for designing
streamlined healthcare workflows based on established international standards.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1021/healthcare-process-management-in-python-a-use-ca</guid><enclosure url="http://www.youtube.com/watch?v=btyuUwcfLW0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/btyuUwcfLW0/hqdefault.jpg"></media:thumbnail></item><item><title>Introduction to Qt</title><link>http://www.pyvideo.org/video/1020/introduction-to-qt</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Matti Airas - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
This presentation introduces Nokia's Qt Development Frameworks and their
relationship to Python. After an overview of Qt and the Qt ecosystem, Qt's
history and future roadmap are discussed. Different Python bindings, PyQt and
PySide in particular, are introduced. Finally, hands-on examples of Qt Quick
with Python are shown.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matti Airas</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1020/introduction-to-qt</guid><enclosure url="http://www.youtube.com/watch?v=oY0h-ZKrdA8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/oY0h-ZKrdA8/hqdefault.jpg"></media:thumbnail></item><item><title>JSON data + RML template = PDF report</title><link>http://www.pyvideo.org/video/1019/json-data-rml-template-pdf-report</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Stefano Cotta Ramusino - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
The main problem with reports generated in Python is how to separate the
content from the style using ReportLab library, because all informations
should be saved in a single source file that, by example, is impossible to
understand for your graphic designer.

So the solution: just modularizes all components you need and identify simple
container formats for your data input (JSON) and document template (ReportLab
RML).

Now with the power of Genshi and XInclude we will create dynamic templates
that include specific snippets (e.g., to generate on the fly a decent graph
with matplotlib or cairoplot to fill some lacks of ReportLab) and we will
detach the stylesheet from the template structure.

And at the end you can also have the internationalization service in the PDF
report generation!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Cotta Ramusino</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1019/json-data-rml-template-pdf-report</guid><enclosure url="http://www.youtube.com/watch?v=yf34NCtdxVI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/yf34NCtdxVI/hqdefault.jpg"></media:thumbnail></item><item><title>Precompiling and deploying Python to any Linux, Mac OS X or FreeBSD system</title><link>http://www.pyvideo.org/video/1018/precompiling-and-deploying-python-to-any-linux-m</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Peter Szabo - 23 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
If a Python application has lots of dependencies and requires specific
versions of some of its dependencies, then users can easily get bored or
frustrated installing the application. To make the installation faster and
have less side effects, application authors can create bundles which contain
the application, all its dependencies and possibly the Python interpreter.
This talk presents a way of creating bundles using StaticPython, and compares
it to bb-freeze. StaticPython is a single-file statically linked version of
Python for 32-bit Linux (i386), containing all standard and some extra Python
modules and C extensions.

Link to [slides](http://pts-mini-gpl.googlecode.com/svn/trunk/staticpython/doc
/slides_2011-06-23/pts_staticpython_2011-06-23.html)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Péter Szabó</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1018/precompiling-and-deploying-python-to-any-linux-m</guid><enclosure url="http://www.youtube.com/watch?v=Lil248rRPYw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/Lil248rRPYw/hqdefault.jpg"></media:thumbnail></item><item><title>Refactoring PyChart</title><link>http://www.pyvideo.org/video/1017/refactoring-pychart</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Jacob Hallen - 23 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
PyChart is a very nice program for producing print quality graphs. However, it
came equipped with a rather strange API, where every class was called T. It
was also using the global namespace in strange and disturbing ways.
Furthermore, it mixed multiple distinct tasks in some classes.

I will show how I went about refactoring the package in order to make a nice
and clean API. This talk is focused on teaching refactoring methodology to
beginner and intermediate level programmers. It will also give a brief
introduction to how to make beautiful graphs with PyChart.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Hallén</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1017/refactoring-pychart</guid><enclosure url="http://www.youtube.com/watch?v=Av6KcdWvWnU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/Av6KcdWvWnU/hqdefault.jpg"></media:thumbnail></item><item><title>Scraping Techniques to Extract Advertisements from Web Pages</title><link>http://www.pyvideo.org/video/1016/scraping-techniques-to-extract-advertisements-fro</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mirko Urru,Stefano Cotta Ramusino - 24 June 2011 in "Track
Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Online Advertising is an emerging research field, at the intersection of
Information Retrieval, Machine Learning, Optimization, and Microeconomics. Its
main goal is to choose the right ads to present to a user engaged in a given
task, such as Sponsored Search Advertising or Contextual Advertising. The
former puts ads on the page returned from a Web search engine following a
query. The latter puts ads within the content of a generic, third party, Web
page. The ads themselves are selected and served by automated systems based on
the content displayed to the user.

Web scraping is the set of techniques used to automatically get some
information from a website instead of manually copying it. In particular,
we're interested in studying and adopting scraping techniques for: i.
accessing tags as object members ii. finding out tags whose name, contents or
attributes match selection criteria iii. accessing tag attributes by using a
dictionary-like syntax.

In this talk, we focus on the adoption of scraping techniques in the
contextual advertising field. In particular, we present a system aimed at
finding the most relevant ads for a generic web page p. Starting from p, the
system selects a set of its inlinks (i.e., the pages that link p) and extracts
the ads contained into them. Selection is performed querying the Google search
engine, whereas extraction is made by using suitable scraping techniques.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mirko Urru,Stefano Cotta Ramusino</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1016/scraping-techniques-to-extract-advertisements-fro</guid><enclosure url="http://www.youtube.com/watch?v=IL4o0HSGOsU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/IL4o0HSGOsU/hqdefault.jpg"></media:thumbnail></item><item><title>Snakes on a cloud: the OpenStack project</title><link>http://www.pyvideo.org/video/1015/snakes-on-a-cloud-the-openstack-project</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Thierry Carrez - 23 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
OpenStack is an innovative open source project written in Python, backed by
Rackspace Hosting and NASA, building a massively-scalable and reliable cloud
computing platform.

The first part of this talk will clarify the place of OpenStack in the general
"cloud" landscape and explain why a fully open cloud infrastructure stack is
necessary to avoid vendor lock-in. We'll then focus on the OpenStack project
goals, its developer community, its open design and release processes, and the
developer tools it chose.

The second part of the talk will present into more technical details the
different components of OpenStack: Nova (compute) and Swift (storage),
including the Python libraries that are used (libvirt, SQLAlchemy, eventlet…).
A Q&amp;A session at the end of the talk will give the audience a chance to clear
any remaining dark area.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thierry Carrez</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1015/snakes-on-a-cloud-the-openstack-project</guid><enclosure url="http://www.youtube.com/watch?v=k9NGWSqcmDI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/k9NGWSqcmDI/hqdefault.jpg"></media:thumbnail></item><item><title>Sqlkit: empowering database access</title><link>http://www.pyvideo.org/video/1014/sqlkit-empowering-database-access</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Alessandro Dentella - 23 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
It's very easy to access databases with Python, and there are many ORMs
allowing a high level of abstraction. Still, it's a long road from there to
interactive handling of data, even for very simple tasks.

Sqlkit tries to act as a bridge, offering some mega-widgets that allow you to
build GUI applications or directly access data using the 'sqledit'
application, shipped with sqlkit; sqlkit is built with PyGTK and SQLAlchemy.

This presentation covers some of the most powerful features of sqlkit, and
shows how easy it is to build small programs for personal use, as well as rich
and complex applications. It primarily focuses on two points: how easy it is
to create data forms (eventually with one2many or many2many, thanks to a
original definition of layouts), and the template system based on OpenOffice
which allows easy report creation.

This presentation shows how sqlkit can be used both as application development
framework and as a tool to help us while developing other applications (e.g.:
Django, OpenERP,… ).

To deliver a gradual presentation, we'll use the configuration system of
sqledit, starting from a minimal configuration (a single URL) we'll add
elements to that until we'll have a full application.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Dentella</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1014/sqlkit-empowering-database-access</guid><enclosure url="http://www.youtube.com/watch?v=UwV2Hdb8XQQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/UwV2Hdb8XQQ/hqdefault.jpg"></media:thumbnail></item><item><title>sqlmap - security development in Python</title><link>http://www.pyvideo.org/video/1010/sqlmap-security-development-in-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Miroslav Stampar - 23 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
The "sqlmap" is one of the largest, widely used and most active Python
projects in the IT security community (more than 2000 commits in one year
period with community of over 100 active testers). It combines it's
developers' strong security knowledge together with analytical, mathematical
and Python development skills to provide IT professionals with vibrant
features.

Talk would be consisted of several parts: short introduction to project and
developers, developing and testing environment, programming cycle, program's
workflow, technologies used, common pitfalls and how we've circumvent them,
usage of mathematical models, optimizations, project's future goals.

The significant part of this talk would be the immediate insight into the
developing process of probably the world's most advanced open-source Python IT
security project today.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miroslav Stampar</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1010/sqlmap-security-development-in-python</guid><enclosure url="http://www.youtube.com/watch?v=O3mdKNjsdlQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/O3mdKNjsdlQ/hqdefault.jpg"></media:thumbnail></item><item><title>The London Python Code Dojo - an Education in Developer Education</title><link>http://www.pyvideo.org/video/1013/the-london-python-code-dojo-an-education-in-dev</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Nicholas Tollervey - 24 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
The London Python Code Dojo is a community organised monthly meeting for
Python programmers in the UK. Variously described as social coding, developer
training, "Scrapheap Challenge" for Pythonistas and "I didn't learn coding
like this when I was a lad", we've forked the traditional code-dojo format and
turned it into something very different.

This talk will explain and explore what happens in the dojo, how it's
organised and why various changes were made to the classic dojo format.
Reference will also be made to influences from music education and philosophy
of education.

Hopefully, by the end of the talk you'll all want to go organise a dojo!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas Tollervey</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1013/the-london-python-code-dojo-an-education-in-dev</guid><enclosure url="http://www.youtube.com/watch?v=vMjnjmUcldA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/vMjnjmUcldA/hqdefault.jpg"></media:thumbnail></item><item><title>The political implications of having fun (while programming open source)</title><link>http://www.pyvideo.org/video/1012/the-political-implications-of-having-fun-while-p</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Benno Luthiger - 23 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
What are the implications for the society if people enjoy their work, because
this work is perceived as rewarding by itself? It is this question that
occupies me since I have finished my Ph.D. research about the motivation of
open source programmers. In my research, I have been able to show that fun is
an important driver for open source programmers. Moreover, fun plays an
important role not only for hobbyists, but for developers who are paid for
their work too (open or closed source).

These findings contrast with the traditional efforts of leftist parties and
labor unions. For those political organizations, labor is perceived as
compulsion and exploitation and, therefore, people have to be liberated from
labor. The resulting political praxis is to send people into retirement as
soon as possible and, on the other hand, to make the life for unemployed
people carefree.

Is the software developers‘ world a little Shangri-La, apart from the real
world, delineated by the leftist parties, or is the open source model
generalizable? What happens with the values generated through the labor if the
work as such is rewarding? The open source mode of production is part of our
modern reality and in my presentation I would like to consider this big
reality from the perspective of open source.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benno Luthiger</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1012/the-political-implications-of-having-fun-while-p</guid><enclosure url="http://www.youtube.com/watch?v=SVXq0LfuPUE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/SVXq0LfuPUE/hqdefault.jpg"></media:thumbnail></item><item><title>What is Google App Engine?</title><link>http://www.pyvideo.org/video/1011/what-is-google-app-engine</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] wesley chun - 23 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
Google App Engine is a unique hosting platform that lets you build
applications and run them in Google's data centers using the massive global
infrastructure built to run the Internet's most powerful company. App Engine
offers a development environment that uses familiar technologies (Java and
Python) and provides a powerful and robust set of APIs to users while
maintaining security and independence from other apps running in the cloud. It
is always free to get started so you can try it out with no risk, and if you
need additional computing resources, you can purchase additional computing
resources beyond the free quota limits. (If you enable billing and trust us
with your credit card, we will extend your free quotas even further; you won't
get charged until you exceed those _extended_ quotas.) Scale your application
to millions of users and pay only for what you use at competitive market
pricing.

In this session, we provide an update of the newest features found in the most
recent releases of the App Engine platform. We also share some suggestions for
best practices to existing App Engine developers.

Beginners to the App Engine platform will be interested in the introductory
workshop which may be offered (see description below).

Google App Engine workshop

In this tutorial, we'll give you a comprehensive introduction to the platform
in two/three components:

  * 1-hour Introduction to Cloud computing and Google App Engine seminar
  * 3-hour App Engine hands-on workshop/codelab

In the first hour, we review Cloud Computing as an industry and where Google
App Engine fits into the picture. Specifically, we discuss App Engine as a
PaaS solution because of the inherent challenges of building web and other
applications. We'll outline the architecture of App Engine, what it's major
components are, introduce its features and APIs, discuss the service and how
it works (including information on the free quotas), present some information
about current users and usage, including integration with Google Apps, and
finally, give an overview of its enterprise edition called Google App Engine
for Business.

After the approximately one-hour lecture, we'll show you how to create
applications that run on App Engine by building a simple but real web
application from the ground up via a hands-on coding laboratory. Although
based on the online tutorial, this codelab goes up and beyond what's in the
documentation: you will get a more detailed step-by-step instructions to
replicate that example as well as have the opportunity to extend your
application with some of the newer APIs that come with App Engine. The codelab
will cover the Users service, non-relational Datastore, and Memcache APIs.
Time-permitting, we'll also discuss some of the newest features found in
recent App Engine releases.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wesley chun</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1011/what-is-google-app-engine</guid><enclosure url="http://www.youtube.com/watch?v=YiimQ3zyxRQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/YiimQ3zyxRQ/hqdefault.jpg"></media:thumbnail></item><item><title>Diversity as a Dependency</title><link>http://www.pyvideo.org/video/1053/diversity-as-a-dependency</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Anna Ravenscroft - 20 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
The PSF recently adopted a diversity statement. While some argue that we
should do this just because it's "the right thing to do", others question why
we, as a technical community, should even worry about diversity. This talk
addresses the diversity question, not in moralistic or ethical terms, but in
pragmatic ones. Studies on creativity and productivity demonstrate the
potential benefits of diversity for the Python community. Making Python the
best language it can be is not merely helped by increasing diversity, but may
be dependent on diversity.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Ravenscroft</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1053/diversity-as-a-dependency</guid><enclosure url="http://www.youtube.com/watch?v=GMGi9FpiNTk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/GMGi9FpiNTk/hqdefault.jpg"></media:thumbnail></item><item><title>Emulating Stackless and greenlet with each other</title><link>http://www.pyvideo.org/video/1052/emulating-stackless-and-greenlet-with-each-other</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Peter Szabo - 20 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
Stackless Python and the greenlet package for CPython are two different
implementations of coroutine support for Python. (Coroutines are fundamental
building blocks of I/O frameworks like gevent, Eventlet, Concurrence and
Syncless to conveniently handle thousands of socket connections at a time
without creating threads.) Stackless and greenlet implement a different
interface. However, each is powerful enough so that it can be used to emulate
the other one. In this talk we explore the differences and discuss design
decisions and testing strategies of the emulations we have implemented.

[Slides](http://syncless.googlecode.com/svn/trunk/doc/slides_2011-06-20/pts_em
u_coro_2011-06-20.html)

[Slides for the bonus sub-talk](http://syncless.googlecode.com/svn/trunk/doc/s
lides_2010-11-29/pts_coro_2010-11-29.html)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Péter Szabó</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1052/emulating-stackless-and-greenlet-with-each-other</guid><enclosure url="http://www.youtube.com/watch?v=aNl7GrnKTcs" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/aNl7GrnKTcs/hqdefault.jpg"></media:thumbnail></item><item><title>Exploit your GPU power with PyCUDA (and friends)</title><link>http://www.pyvideo.org/video/1051/exploit-your-gpu-power-with-pycuda-and-friends</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Stefano Brilli - 22 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
CUDA technology permits to exploit the power of modern NVIDIA GPUs. In this
talk, after a brief introduction to GPU architecture, we will focus on how
CUDA got inside Python through libraries like PyCUDA and others…

By some examples we will show the main concepts and techniques for good GPU
programming.

This talk targets anyone who wants to know how to exploit this technology from
Python, the suitable use cases, the using techniques and the do-not-using
techniques to get the best from his own GPU

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Brilli</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1051/exploit-your-gpu-power-with-pycuda-and-friends</guid><enclosure url="http://www.youtube.com/watch?v=M5ckXyiiu7g" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/M5ckXyiiu7g/hqdefault.jpg"></media:thumbnail></item><item><title>Exploring CPython's bytecode</title><link>http://www.pyvideo.org/video/1050/exploring-cpythons-bytecode</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Floris Bruynooghe - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
The CPython interpreter always compiles your source code to bytecode, usually
stored in .pyc files. This bytecode is then loaded and executed in the CPython
virtual machine.

This talk will explore the bytecode from the outside in. Starting with how to
read a .pyc file, following the steps the interpreter takes to arrive and a
usable python module. It then dives into the structure of the bytecode itself
and the principles of the virtual machine, detailing how the VM executes this
bytecode to do useful work.

Having seen all these details you should have a good idea of the various
innards of CPython and how to manipulate these to create weird, wonderful,
dangerous and occasional useful hacks.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Floris Bruynooghe</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1050/exploring-cpythons-bytecode</guid><enclosure url="http://www.youtube.com/watch?v=c08Ee2gQ3pY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/c08Ee2gQ3pY/hqdefault.jpg"></media:thumbnail></item><item><title>Good API design</title><link>http://www.pyvideo.org/video/1049/good-api-design</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Alex Martelli - 20 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Designing interfaces so that other code can interact with ours (whether our
code is a library, framework, application, website…) is a very common and
clearly crucial activity, but it's fraught with dangers - there's a lot stuff
we all keep doing wrong time after time. This talk shows some common
categories of API design errors encountered in the wild, with tips on how to
avoid them when you design your next API.

Goals: to show you how to focus resources and attention to help avoid mistakes
in API design. Prereqs: experience designing and developing software, esp.
software which needs to interact w/other existing software.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1049/good-api-design</guid><enclosure url="http://www.youtube.com/watch?v=LsfrMjcIudA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/LsfrMjcIudA/hqdefault.jpg"></media:thumbnail></item><item><title>High-performance computing on gamer PCs</title><link>http://www.pyvideo.org/video/1048/high-performance-computing-on-gamer-pcs</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Yann Le Du - 20 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
In Electron Paramagnetic Resonance Imaging, we are faced with a deconvolution
problem that has a strong impact on the image actually reconstructed. Faced
with the need of mapping the distribution of organic matter in Terrestrial and
Martian rock samples for applications in exobiology, we needed to see how to
extract a maximum amount of information from our data: our approach uses
reservoir computing artificial neural networks coupled to a particle swarm
algorithm that evolves the reservoirs’ weights.

The code runs on the Hybrid Processing Units for Science (HPU4Science) cluster
located at the Laboratoire de Chimie de la Matière Condensée de Paris (LCMCP).
The cluster is composed of a central data storage machine and a heterogeneous
ensemble of 6 decentralized nodes. Each node is equipped with a Core2 Quad or
i7 CPU and 3-7 NVIDIA Graphical Processing Units (GPUs) including the GF110
series. Each of the 28 GPUs independently explores a different parameter space
sphere of the same problem. Our application shows a sustained real performance
of 15.6 TFLOPS. The HPU4Science cluster cost $36,090 resulting in a 432.3
MFLOPS/$ cost performance.

That talk is meant to demonstrate on a practical case how consumer grade
computer hardware coupled to a very popular computer language can be used to
tackle a difficult yet very elementary scientific problem: how do you go from
formulating the problem, to choosing the right hardware and software, and all
the way to programming the algorithms using the appropriate development tools
and methodologies (notably Literate Programming). On the math side, the talk
requires a basic understanding of matrix algebra and of the discretization
process involved when computing integrals.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yann Le Du</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1048/high-performance-computing-on-gamer-pcs</guid><enclosure url="http://www.youtube.com/watch?v=5epAiVgitL0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/5epAiVgitL0/hqdefault.jpg"></media:thumbnail></item><item><title>How to build complex web applications having fun?</title><link>http://www.pyvideo.org/video/1047/how-to-build-complex-web-applications-having-fun</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Andrew Mleczko - 22 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
Web development is a complexity challenge nowadays. Growing number of
functionalities results in customer expectations increase which makes project
design more difficult. Using proper tools that suite your customer needs is
essential.

In this talk I would like to present two successful stories using closely
together Pyramid and Plone. Basing on these examples I wished to highlight the
main reasons for using Plone as a CMS only and letting Pyramid do the rest
(vertical application). Moreover, I will underscore good and bad practices
during integration process and how to make farsighted architectural decisions
in a right moment.

Prerequisites: be familiarized with common python web framework concepts.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Mleczko</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1047/how-to-build-complex-web-applications-having-fun</guid><enclosure url="http://www.youtube.com/watch?v=tJ8mufRrW60" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/tJ8mufRrW60/hqdefault.jpg"></media:thumbnail></item><item><title>How to make intelligent web-apps</title><link>http://www.pyvideo.org/video/1046/how-to-make-intelligent-web-apps</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Deepak Thukral - 22 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
The primary goal of this talk is twofold: to evaluate the need of data mining
and introduce some very cool, simple yet powerful machine learning techniques
to audience such as classification, clustering, collaborative filtering,
recommendation etc in your Python web applications. This talk will conclude
with some explanation and limitations of machine learning algorithms.

Basic knowledge of Python is sufficient. However some experience with Django,
meshups, machine learning or data hunger is encouraged. All talk material and
django apps will be available after talk under MIT license.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Deepak Thukral</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1046/how-to-make-intelligent-web-apps</guid><enclosure url="http://www.youtube.com/watch?v=u3oVf_Z4kmI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/u3oVf_Z4kmI/hqdefault.jpg"></media:thumbnail></item><item><title>Introduction to Gevent</title><link>http://www.pyvideo.org/video/1045/introduction-to-gevent</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Denis Bilenko - 20 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
[Gevent](http://gevent.org) is a coroutine-based library that enables you to
write highly-concurrent network and web applications. learn in detail what
Gevent is, what it does and how it does it.

I will introduce a coroutine-based approach to network programming, explain it
benefits and pitfalls. We will walk through the Gevent API, including the most
recent additions, and understand how it is implemented. I will make a quick
overview of the most interesting 3rd party add-on and applications after that.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Denis Bilenko</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1045/introduction-to-gevent</guid><enclosure url="http://www.youtube.com/watch?v=FITsetDUKJ0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/FITsetDUKJ0/hqdefault.jpg"></media:thumbnail></item><item><title>Managing the cloud with libcloud</title><link>http://www.pyvideo.org/video/1044/managing-the-cloud-with-libcloud</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Tomaž Muraus - 22 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
libcloud is an open-source client library for interacting with different cloud
providers.

The primary goal of the library is to abstract all the provider differences
away and expose common functionality in a nice, clean and concise API.

This talk will address the following topics:

  * Why a library like this was built in the first place
  * Different problems we have encountered while building it (not all the providers always play nice)
  * An introduction to the library API (compute, storage and load-balancer part)
  * How to use it to build something useful and fun
  * How to participate and contribute
  * Roadmap and plans for the future

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tomaž Muraus</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1044/managing-the-cloud-with-libcloud</guid><enclosure url="http://www.youtube.com/watch?v=R8fC4efkj2s" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/R8fC4efkj2s/hqdefault.jpg"></media:thumbnail></item><item><title>MiG - A Complete Grid Middleware (mostly) in Python</title><link>http://www.pyvideo.org/video/1043/mig-a-complete-grid-middleware-mostly-in-pyth</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Jonas Bardino - 22 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Grid computing was all the buzz in the beginning of the millennium and still
has serious attention in different forms although many of the original grand
promises were never delivered. The general level of ambitions have instead
slowly but steadily degraded to those of the latest buzz word, Cloud.

We as a project have proven that most of the original promises _can_ actually
be delivered and we have done so using Python almost solely as the
implementation language. The choice of Python provided us with a stable and
versatile base for quickly getting this far and it significantly eases
extending and maintaining our middleware in the future. MiG is currently about
50000 lines of source code but it still offers more features than competing
grid systems with millions of lines of code.

Apart from introducing the open source MiG middleware and summarizing how we
got here, this talk will outline some of the core technologies used to reach
that goal and underline why it can make a lot of sense to choose Python for
complex HPC projects like MiG, too. Talk keywords include Network Programming,
Open Source Python projects, Science and Math and Web-based Systems. There's
no special intended audience, but a certain level of Python knowledge and
experience may be an advantage. Please refer to
[http://code.google.com/p/migrid/](http://code.google.com/p/migrid/) for
further MiG information.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonas Bardino</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1043/mig-a-complete-grid-middleware-mostly-in-pyth</guid><enclosure url="http://www.youtube.com/watch?v=aRYvBuYXcjk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/aRYvBuYXcjk/hqdefault.jpg"></media:thumbnail></item><item><title>New beauty in Camelot</title><link>http://www.pyvideo.org/video/1042/new-beauty-in-camelot</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Erik Janssens,Jeroen Dierckx - 22 June 2011 in "Track
Ravioli "


&lt;p&gt;Description&lt;/p&gt;
Camelot is a Python framework that leverages SQLAlchemy and QT to build rich
desktop applications. The model - view definition used was inspired by the
Django Admin interface. Some see it as a replacement for MS Access, but it's
underlying libraries allow much more advanced features.

In this talk we will focus on the changes and new features that were
introduced in Camelot and more importantly, how they can be used in your
applications. Those features range from Matplotlib chart integration and new
types of actions to displaying custom SQLAlchemy queries in a table view.

We will share our experiences with large scale deployment of Python and
Camelot applications to the desktop of the user. In a number of case studies
we will point out the mistakes we made and how they were corrected.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Janssens,Jeroen Dierckx</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1042/new-beauty-in-camelot</guid><enclosure url="http://www.youtube.com/watch?v=DanjGO0VEAs" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/DanjGO0VEAs/hqdefault.jpg"></media:thumbnail></item><item><title>Objects and classes in Python (and JavaScript)</title><link>http://www.pyvideo.org/video/1041/objects-and-classes-in-python-and-javascript</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Jonathan Fine - 23 June 2011 in "Training Pizza Napoli "


&lt;p&gt;Description&lt;/p&gt;
Python has a well-thought out system for classes. Beginners can use it without
understanding it all. Experts can use it to produce code that is both elegant
and powerful (such as models and class-based views in Django). Python classes
can be used for many purposes.

This tutorial arises from the author's experience in using classes to solve
problems, such as:

  * Add custom methods and attributes to objects that are, at root, just an integer
  * Construct dictionaries whose values are functions
  * Construct classes on-the-fly
  * Implement JavaScript object semantics in Python (advanced topic)

The outline syllabus is:

  * Review of the class statement in Python (and decorators)
  * Subclassing built-in types such as int and tuple
  * How to define classes without using a class statement
  * How to define a dispatch dictionary using a class statement
  * Metaclasses as syntactic sugar for class construction
  * Metaclasses to provide new class semantics
  * Review of JavaScript object semantics
  * Using Python classes to implement JavaScript object semantics

For Guido on the history of Python classes see:

  * [http://python-history.blogspot.com/2010/06/new-style-classes.html](http://python-history.blogspot.com/2010/06/new-style-classes.html)
  * [http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html](http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html)
  * [http://python-history.blogspot.com/2010/06/method-resolution-order.html](http://python-history.blogspot.com/2010/06/method-resolution-order.html)

This tutorial is for Intermediate or Advanced Python programmers. (Beginners
will find it very hard going.) The aim of the course is to explain exactly
what happens when a class in constructed, and to learn ways of using this
knowledge.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Fine</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1041/objects-and-classes-in-python-and-javascript</guid><enclosure url="http://www.youtube.com/watch?v=e0tK-Kawx3E" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/e0tK-Kawx3E/hqdefault.jpg"></media:thumbnail></item><item><title>Pitfalls of Continuous Deployment</title><link>http://www.pyvideo.org/video/1040/pitfalls-of-continuous-deployment</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] David Cramer - 22 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
Practice iterative development like the pros. Release sooner, faster, and more
often.

Continuous deployment (and testing) has started to become a reality for many
companies. It brings to light one of the many problems that face large product
teams, but also creates some of its own. This talk will focus on the pros and
cons of continuous deployment, how DISQUS switched from the recurring release
cycle to continuous releases, as well as providing tips and arguments for
adopting it in your workplace.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1040/pitfalls-of-continuous-deployment</guid><enclosure url="http://www.youtube.com/watch?v=smUceHEg1P0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/smUceHEg1P0/hqdefault.jpg"></media:thumbnail></item><item><title>Playing tasks with Django-Celery</title><link>http://www.pyvideo.org/video/1039/playing-tasks-with-django-celery</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mauro Rocco - 22 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Celery is an open source task queueing system based on distributed message
passing.

I will talk about the tools that Celery offers for task distribution and how
to monitor and manage the system using a Django web interface. This talk will
also focus on how we use Celery at Jamendo and our real solutions to some
common issues you may encounter when developing a back-office based on Celery.

The talk will cover the following topics:

  * A brief overview of Celery and the AMPQ protocol AMPQ protocol overview, Celery introduction: Celery, RabbitMQ code examples

  * The impact of Celery on the Jamendo work-flow; examples with real tasks. Here I will talk about the Jamendo back-office infrastructure and some of our common tasks. I will discuss the improvements made by introducing a new back-office system based on Celery. I will show some code snippets and go over some real scenarios.

  * Overview of the Django Celery admin interface and some Jamendo extensions. Let's talk about the Django-Celery interface that allows one to monitor or schedule tasks directly from the Django admin. I will explain which common additional features are necessary and how to add them.

  * Common "gotchas" we encountered while working with Celery and how we solved them.

  * Global task locks

  * Centralized logging: be able to read all the logs of all celery workers on different servers and filter them for real-time debugging

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mauro Rocco</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1039/playing-tasks-with-django-celery</guid><enclosure url="http://www.youtube.com/watch?v=HgN8rOstPjc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/HgN8rOstPjc/hqdefault.jpg"></media:thumbnail></item><item><title>Pricing products using Python graphs and sets</title><link>http://www.pyvideo.org/video/1038/pricing-products-using-python-graphs-and-sets</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Rob Collins - 22 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
We will look at the limitations of available rule engines when it comes to
complex pricing rules. Rob has been part of a Python team writing a pricing
engine based on network graphs. We will show:

  * Why pricing is not easy
  * Rule engine anti-patterns, e.g. to change one price requires a week's development time, and has to be fitted into a release cycle
  * How to make pricing rules data driven, usable by the business
  * How the use of graphs and sets reduces the complexity

Rob is joined by David Layton of Grey Squirrel Consulting, who is a fellow
contractor working with Rob on the pricing project. He is an American
expatriate and Python developer, currently living and working in London. His
background is in scientific computing, CRMs and Business Intelligence.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rob Collins</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1038/pricing-products-using-python-graphs-and-sets</guid><enclosure url="http://www.youtube.com/watch?v=TN9nIBxDXU8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/TN9nIBxDXU8/hqdefault.jpg"></media:thumbnail></item><item><title>PyPy hands-on</title><link>http://www.pyvideo.org/video/1037/pypy-hands-on</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Antonio Cuni,Armin Rigo - 21 June 2011 in "Training Pizza
Margherita"


&lt;p&gt;Description&lt;/p&gt;
The session is divided into two parts, of roughly 2 hours each. People who are
interested only in the first part, can leave the session after it. However,
the first part is a prerequisite for the second one, thus people are not
advised to join in the middle of the session.

The session is meant to be highly interactive. People are invited to bring
their own laptop and try things by themselves.

## Part 1: Run your application under PyPy

This tutorial is targeted to Python users who want to run their favorite
Python application under PyPy, and exploit the most of it. The following
topics will be covered:

    
    - how to fix/avoid CPython implementation details (e.g., refcounting)
    
    - general overview of how the PyPy JIT works
    
    - how to optimize your program for the PyPy JIT
    
    - how to view and interpret the traces produced by the JIT
    
    - how to tweak the parameters of the JIT and the GC
    
    - how to use existing CPython C extensions on PyPy, and fix them if necessary
    

## Part 2: Write your own interpreter with PyPy

PyPy is not only a Python interpreter, but also a toolchain to implement
dynamic languages. This tutorial is targeted to people who want to implement
their own programming languages, or who simply want to know more about how the
PyPy JIT works internally.

The students will be given the source code for a toy language implemented in
RPython. They will learn:

    
    - how to translate it to C using the PyPy translation toolchain
    
    - what are the "hints" needed by the JIT generator, and how to place them
    

Then, they will be challenged to add the proper hints to the toy interpreter,
to get the best result with the JIT.

**THINGS TO DO BEFORE THE TRAINING**

You are encouraged to bring your laptop to the training session.

Make sure that the following prerequisites are met:

  * Install PyPy 1.5:

    * [http://pypy.org/download.html](http://pypy.org/download.html)

    * [http://doc.pypy.org/en/latest/getting-started.html#installing-pypy](http://doc.pypy.org/en/latest/getting-started.html#installing-pypy)

  * Make sure that `setuptools` or `distribute` are installed (look at the URL above for instructions)

  * Clone the pypy repository, and update to the 1.5 version::

$ hg clone [http://bitbucket.org/pypy/pypy](http://bitbucket.org/pypy/pypy)

$ cd pypy

$ hg up -r release-1.5

  * Clone the jitviewer repository and install it on pypy::

$ hg clone
[http://bitbucket.org/pypy/jitviewer](http://bitbucket.org/pypy/jitviewer)

$ cd jitviewer

$ /path/to/pypy-1.5/bin/pypy setup.py develop

If you intend to follow also the second part ("Write your own interpreter with
PyPy"), you need to make sure you have a working [developing
environment](http://doc.pypy.org/en/latest/getting-started-python.html
#translating-the-pypy-python-interpreter)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni,Armin Rigo</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1037/pypy-hands-on</guid><enclosure url="http://www.youtube.com/watch?v=qcqEAE4QoeA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/qcqEAE4QoeA/hqdefault.jpg"></media:thumbnail></item><item><title>Python 103: Mmmm... Understanding Python's Memory Model, Mutability, and Methods</title><link>http://www.pyvideo.org/video/1035/python-103-mmmm-understanding-pythons-memory</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] wesley chun - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
In Python 101, you learned basic Python syntax, what its flow control
mechanisms and basic data types are and how they work. You learned how to
write functions and developed executable Python scripts that actually work!
You probably also learned how to create files, how to open, read from or write
to them, and close them. Perhaps you've even learned a little bit of object-
oriented programming, developed a couple of Python classes, most with user-
defined methods, and have no problems creating instances to use in your
applications.

In Python 102 (or equivalent in experience), you explored further, using
default values and variable arguments for functions, discovered how to catch
exceptions and write handlers for them… perhaps you've even created your own
exceptions. You have found some useful Python standard library modules and
using them actively in your own applications. You've quite comfortable with
OOP, creating classes and using instances regularly in your programs. In fact,
you've been coding Python for 6 months to a couple of years now. You're much
more serious about Python now because you're no longer a "beginner." You've
even taken notice at the growing number of jobs requesting or requiring Python
skills.

As an aspiring Python developer, you are starting to be more aware of the
entire ecosystem around you, and think you may be ready for "prime-time" and
feel able to take on a full-time position as a Python programmer. However, if
you have experienced one or more of the below questions or problems, this talk
may be for you:

  * Throughout this time, you've experienced strange bugs in your code. In particular, you notice that things don't always behave the way you expect and have spent a good amount of time debugging various parts of your software that you thought were actually correct - you work around them but are disturbed and don't have the time nor committment to fully investigate.

  * You've created classes and objects just fine but wish that you could use some of Python's operators (like +, in, len(), etc.) with your objects, which feel like they're "2nd-class" citizens compared to the standard data types.

  * Do you know what functional evaluation strategy means? Have you been asked or considered whether Python is "call-by-value" or "call-by-reference"? It is important to you, and can you clearly explain your answer?

  * What does "mutability" mean? What is the difference between mutable and immutable objects? Which Python objects are mutable and which aren't?

  * Can you clearly explain both the output in the two code snippets below, and even more importantly, _why_ the output is the way it is?

SNIPPET A x = 42 y = x x += 1 print x print y

SNIPPET B x = [1, 2, 3] y = x x[0] = 4 print x print y

  * Have you seen odd behavior in container or collection objects like lists or dictionaries? For example, you may have copied those types of objects and discovered weird things happening to both the original and the copy, or that you seen something not quite right if you loop through it and remove items from it. 

This is what Python 103 is for… to fill in all the missing gaps, to answer all
the questions (including those above) that do not seem to have easy-to-find
answers on Google, but only if you have the desire to learn more about the
interpreter to take your Python skills to the next level.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wesley chun</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1035/python-103-mmmm-understanding-pythons-memory</guid><enclosure url="http://www.youtube.com/watch?v=HHFCFJSPWrI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/HHFCFJSPWrI/hqdefault.jpg"></media:thumbnail></item><item><title>Python at Cloudkick</title><link>http://www.pyvideo.org/video/1034/python-at-cloudkick</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Tomaž Muraus - 22 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Cloudkick is a server management and monitoring software as a service used by
thousands of different companies all across the globe.

The service is built in and powered by many different programming languages
and technologies, but the web application and majority of the backend services
are written in Python.

In this talk I will present how and where we use Python (Django, Twisted,
txamqp, Piston, …), different problems we have encountered while building our
service and how we worked around them, good practices and real-world advices
on building effective Twisted services and much more.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tomaž Muraus</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1034/python-at-cloudkick</guid><enclosure url="http://www.youtube.com/watch?v=R9jo6HMlgLo" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/R9jo6HMlgLo/hqdefault.jpg"></media:thumbnail></item><item><title>Python + Oracle = Prosperity &amp; Performance</title><link>http://www.pyvideo.org/video/1036/python-oracle-prosperity-performance</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Todd Trichler - 23 June 2011 in "Training Pizza Napoli "


&lt;p&gt;Description&lt;/p&gt;
Have you ever wanted or perhaps needed to access data stored in a corporate
Oracle database from within your Python environment?

This session will help developers get up and running using Python with Oracle:
- Learn the basics of working with cx_Oracle - Learn how to use VirtualBox to
set up a Python &amp; Oracle test and developement environment. - Discover
features within Oracle that you can use to build more performant python based
applications. - Leave with all the resources you need to certify your python
app to run against a production Oracle11gR2 database, or hone those skills for
the next job. - Get a quick intro to Oracle Linux along the way.

No prior experience with Oracle is required, some basic understanding of
databases would be helpful.

Look forward to meeting you @ EuroPython 2011 - Todd

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Todd Trichler</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1036/python-oracle-prosperity-performance</guid><enclosure url="http://www.youtube.com/watch?v=_ANajHy3ufk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/_ANajHy3ufk/hqdefault.jpg"></media:thumbnail></item><item><title>Visualization and Analysis of Large Scale Datasets with Python</title><link>http://www.pyvideo.org/video/1033/visualization-and-analysis-of-large-scale-dataset</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Christine Moran - 23 June 2011 in "Training Pizza Margherita
"


&lt;p&gt;Description&lt;/p&gt;
In this talk I will introduce ParaView, an open source application developed
by researchers around the world for parallel visualization and analysis of
large scale datasets, which in can be used to visualize and analyze terabytes
of data in real time. ParaView’s core algorithms are implemented in C/C++ but
all its major functionality can be scripted from python with ease. I’ll give a
short introduction to AstroViz, a parallel visualization tool for
astrophysical simulations implemented as an opensource plugin to ParaView,
which I have been lead developer on since 2009. The focus of the talk will be
on driving ParaView from within python however, both general out of the box
use and customized extensions.

I also have access to several parallel supercomputers so if there’s a huge
dataset we as a crowd would like to tackle visualizing during the course of
the week that would be fun project. The end of the talk will be a short
brainstorm of cool applications of analysis and visualization of large scale
datasets.

[http://www.paraview.org/](http://www.paraview.org/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Moran</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1033/visualization-and-analysis-of-large-scale-dataset</guid><enclosure url="http://www.youtube.com/watch?v=y2eKgo3gw-0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/y2eKgo3gw-0/hqdefault.jpg"></media:thumbnail></item><item><title>What makes Python so AWESOME</title><link>http://www.pyvideo.org/video/1032/what-makes-python-so-awesome</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Raymond Hettinger - 20 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
In a world of many programming languages, the popularity of Python continues
to grow without bound. We examine what makes it special and how it influences
the way we program:

  * what gives python its texture and feel
  * what features support rapid development
  * where does the readability come from
  * what features support economy of expression
  * look at the mix of lightweight tools and industrial grade tools
  * how easy is it to learn python? how hard is it to master
  * what can python do that other languages can't
  * what is the role of the python community
  * why does the license matter
  * does python just have zen or is there a python attitude?

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1032/what-makes-python-so-awesome</guid><enclosure url="http://www.youtube.com/watch?v=u1sVfGEBKWQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/u1sVfGEBKWQ/hqdefault.jpg"></media:thumbnail></item><item><title>5 Years of Bad Ideas</title><link>http://www.pyvideo.org/video/1060/5-years-of-bad-ideas</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Armin Ronacher - 20 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
What was my motivation for working with Python after two years of PHP? There
is so much you can do. Functions are objects you can pass around, you can
decompile functions to see how they work internally, you can alias a bound
method to a global function and it will just work. You can change import
semantics, override the method resolution order, you can write metaclasses,
you can hook into the CPython interpreter API and much more.

Five years later I came to the conclusion that this is really not what Python
is about and that a lot of what I did was interesting but not necessarily a
good idea. This talk is a 45 minute recompilation of things I really shouldn't
have done in the first place. Expect a bunch of neat and interesting hacks
that showcase the possibilities of the language.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Armin Ronacher</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1060/5-years-of-bad-ideas</guid><enclosure url="http://www.youtube.com/watch?v=8e0l_Dt28MQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/8e0l_Dt28MQ/hqdefault.jpg"></media:thumbnail></item><item><title>Advanced Python</title><link>http://www.pyvideo.org/video/1059/advanced-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Raymond Hettinger - 21 June 2011 in "Training Pizza
Margherita"


&lt;p&gt;Description&lt;/p&gt;
This tutorial will work through a series of real-world examples, showing how
an understanding of the tools built into the Python interpreter or included in
the standard library can be combined to solve difficult problems clearly and
Pythonically. We will also discuss when and how to reach beyond the standard
library when needed to address difficult algorithmic and optimization
problems.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1059/advanced-python</guid><enclosure url="http://www.youtube.com/watch?v=paK0-lkksIc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/paK0-lkksIc/hqdefault.jpg"></media:thumbnail></item><item><title>Building a hosting platform with Python</title><link>http://www.pyvideo.org/video/1058/building-a-hosting-platform-with-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Andrew Godwin - 20 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
At ep.io we built a Python hosting platform from the ground up, designed to
run large numbers of web applications on a small number of physical machines
both securely and in a reasonably scalable way. This talk will show you how we
built our infrastructure - using Redis, eventlet, PostgreSQL and more - and
what lessons we learnt from our first few thousand deploys.

See how we split services into multiple processes and greenthreads; the pains
of building a cooperatively-multitasking PTY module; how Redis isn't the
answer to everything, but is still very useful; how to persuade third-party
software to work securely in a shared environment; and how important it is to
have good logging, especially when you have more than five servers.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Godwin</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1058/building-a-hosting-platform-with-python</guid><enclosure url="http://www.youtube.com/watch?v=Sg6RmIty9-w" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/Sg6RmIty9-w/hqdefault.jpg"></media:thumbnail></item><item><title>Challenges in developing a large Django site</title><link>http://www.pyvideo.org/video/1057/challenges-in-developing-a-large-django-site</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Simon Willison - 22 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Django makes it easy to build web sites and applications on tight deadlines -
but how does it deal with sites that scale up in both traffic and complexity?
Using Lanyrd.com as a case study, this talk will explore tricks and techniques
for taking advantage of what Django has to offer while coping with the
unexpected challenges raised by a highly dynamic social web application.

Topics covered will include performance monitoring and optimisation, advanced
caching tricks, denormalisation with Solr and Redis and finding the right
balance between technical elegance and pragmatism.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Willison</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1057/challenges-in-developing-a-large-django-site</guid><enclosure url="http://www.youtube.com/watch?v=4EmKiBCCZ3o" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/4EmKiBCCZ3o/hqdefault.jpg"></media:thumbnail></item><item><title>Debugging and profiling techniques</title><link>http://www.pyvideo.org/video/1056/debugging-and-profiling-techniques</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Giovanni Bajo - 22 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
This talk will give on overview over some common problems related to profiling
and debugging CPython applications (especially desktop-based ones).

The following subjects will be covered:

  * Debugging of memory/resource leaks (circular references, **del**, weakref, garbage collector, etc.). We will show in details how the memory management of Python objects work and we will show a few tricks to track memory leaks
  * Python code profiling (profile/hotshots/cProfile, design of small tests, etc.). We will show how to measure, profile, and analyse an application to spot performance problems and solve them.
  * Post-mortem step-by-step debugging of C/C++ extension under Windows. We will show how to setup Visual Studio for debugging, how to see a traceback in case of an unexpected segfault, and how to further debug and solve the crash.

This talk is aimed at intermediate Python programmers, who have already
developed non-trivial Python applications but have never "jumped through" the
interpreter abstraction layer. If you feel a little lost when you see a
segfault from a Python program or you don't have a clear idea how memory is
collected in Python, this talk is perfect for you.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1056/debugging-and-profiling-techniques</guid><enclosure url="http://www.youtube.com/watch?v=6jD34p8PokU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/6jD34p8PokU/hqdefault.jpg"></media:thumbnail></item><item><title>Developing cutting-edge applications with PyQt</title><link>http://www.pyvideo.org/video/1055/developing-cutting-edge-applications-with-pyqt</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Lorenzo Mancini,Matteo Bertozzi - 23 June 2011 in "Training
Pizza Margherita "


&lt;p&gt;Description&lt;/p&gt;
(Presented with Matteo Bertozzi)

Python's high development speed and Qt's gargantuan feature set allow for
comfortable development of complex desktop applications. Still, what does one
need to do to best leverage this awesome combination? And more importantly,
what crucial advantages exist to decide its adoption in favour of more
traditional tecniques?

During this training, we'll start from a white canvas and show how to develop
a desktop application using the best tools Qt offers. You'll learn how to
compose complex GUIs from basic building blocks, and how to use QPainter, one
of the most advanced 2D painting systems in the open source world. Qt's Webkit
integration will be discussed, along with the recent Qt Quick technology,
which allows one to create smooth and fluid user interfaces. Qt's solution to
common deployment problems, like handling a serious translation workflow, will
be presented. At the end, we'll package our PyQt application so it's ready to
be distributed for download.

Walk away with a sound understanding of why you should choose PyQt for your
next desktop project.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lorenzo Mancini,Matteo Bertozzi</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1055/developing-cutting-edge-applications-with-pyqt</guid><enclosure url="http://www.youtube.com/watch?v=vd2T_LNn3C0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/vd2T_LNn3C0/hqdefault.jpg"></media:thumbnail></item><item><title>Distributing Python programs through PyInstaller</title><link>http://www.pyvideo.org/video/1054/distributing-python-programs-through-pyinstaller</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Giovanni Bajo - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
The talk will focus on how to distribute multi-platform proprietary Python
applications, using [PyInstaller](http://www.pyinstaller.org).

PyInstaller takes a program written in Python and turns it into a static
executable (binary) that does not depend upon an existing Python installation,
nor third party library. The executable can then be packed and shipped in many
different ways (through installer wizards, deb/rpm packages, etc.).

PyInstaller is a good multi-platform alternative to tools like py2exe and
py2app, but it found troubles to gain acceptance in a market that seems
strongly tied to older tools. Instead, PyInstaller puts forward important new
features: for instance, it works on the most important desktop platforms
(Windows, Linux/UNIX, Mac), and it has got an automatic and fully transparent
support for all the workarounds needed to make applications using complex
libraries like Matplotlib or PyQt work within a static executable.

In detail, the following points will be discussed:

  * Distribution of a priopriertary software: initial requests
  * PyInstaller: how it works (basic tutorial)
  * The secrets of PyInstaller: technical details
  * Import hooks: effectively handling third party extensions
  * Flexibility with PyInstaller: what goes in and what stays out
  * Linux: static binaries for a single distribution or cross-distributions
  * Mac: creation of bundles for graphic applications

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1054/distributing-python-programs-through-pyinstaller</guid><enclosure url="http://www.youtube.com/watch?v=MoL2nDYcW1U" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/MoL2nDYcW1U/hqdefault.jpg"></media:thumbnail></item><item><title>Advanced Aspects of the Django Ecosystem: Haystack, Celery &amp; Fabric</title><link>http://www.pyvideo.org/video/1078/advanced-aspects-of-the-django-ecosystem-haystac</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Simon Willison - 21 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Django benefits from a thriving third-party ecosystem. This talk will take a
deep look at three of the components I have found most useful in my own
projects: Haystack for full-text search, Celery for offline processing and
Fabric for automated eployments. I'll discuss how we use them for Lanyrd.com,
and demonstrate why they deserve a permanent place in your toolbox.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Willison</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1078/advanced-aspects-of-the-django-ecosystem-haystac</guid><enclosure url="http://www.youtube.com/watch?v=8SQbN5vhLto" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/8SQbN5vhLto/hqdefault.jpg"></media:thumbnail></item><item><title>Best Practices for Python in the Cloud</title><link>http://www.pyvideo.org/video/1077/best-practices-for-python-in-the-cloud</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Gisle Aas - 21 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
Abstract: Whether you’re an independent developer or development manager in a
large company, “the cloud” is on everyone’s mind. But just because it’s in the
cloud, doesn’t mean development and deployment is effortless. The cloud
presents infrastructure and development challenges in a new way.

In this presentation, ActiveState's Gisle Aas will share best practices in
building and deploying a Python-centric LAMP stack(s) on the cloud for a range
of web-based applications from simple Django site to HPC GPU Clusters.

Based on ActiveState’s experiences, Gisle will discuss the challenges faced
and lessons learned in building an infrastructure to deploy web applications
to the cloud with Python.

You will learn about:

  * Which packages are critical for a secure, Python-centric LAMP stack (and what it takes to build them)! 
  * Tips for developing, deploying, and scaling Python applicaitons in the cloud 
  * How to use Python to connect and build infrastructure to support and manage your deployment

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gisle Aas</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1077/best-practices-for-python-in-the-cloud</guid><enclosure url="http://www.youtube.com/watch?v=nQWVlXlJwp0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/nQWVlXlJwp0/hqdefault.jpg"></media:thumbnail></item><item><title>Building a Scientific Software Application with the Enthought Tool Suite</title><link>http://www.pyvideo.org/video/1076/building-a-scientific-software-application-with-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mark Dickinson - 24 June 2011 in "Training Pizza Margherita
"


&lt;p&gt;Description&lt;/p&gt;
The Enthought Tool Suite (ETS) is a collection of Python-based open source
components that form a foundation for nearly every application that we deliver
to our customers. In this talk I'll demonstrate how to use ETS to rapidly
develop an example scientific software application. We'll concentrate
particularly on introducing Traits, Traits UI, and the Chaco and Mayavi
visualisation tools.

Prerequisites: some previous experience of working with Python and NumPy /
SciPy is recommended.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Dickinson</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1076/building-a-scientific-software-application-with-0</guid><enclosure url="http://www.youtube.com/watch?v=N_1EIkfQbv4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/N_1EIkfQbv4/hqdefault.jpg"></media:thumbnail></item><item><title>Building a website with PyHP and Liwe</title><link>http://www.pyvideo.org/video/1075/building-a-website-with-pyhp-and-liwe</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Fabio Rotondo - 22 June 2011 in "Training Pizza Napoli "


&lt;p&gt;Description&lt;/p&gt;
In this session, you will start learning how to create a simple PyHP + LiWE
website.

Then, we'll show you how to create new custom modules for your website and
we'll show up some great features of the LiWE ecosystem.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabio Rotondo</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1075/building-a-website-with-pyhp-and-liwe</guid><enclosure url="http://www.youtube.com/watch?v=ssiC75EclxI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/ssiC75EclxI/hqdefault.jpg"></media:thumbnail></item><item><title>Challenges in developing a large Django site</title><link>http://www.pyvideo.org/video/1074/challenges-in-developing-a-large-django-site-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Simon Willison - 22 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Django makes it easy to build web sites and applications on tight deadlines -
but how does it deal with sites that scale up in both traffic and complexity?
Using Lanyrd.com as a case study, this talk will explore tricks and techniques
for taking advantage of what Django has to offer while coping with the
unexpected challenges raised by a highly dynamic social web application.

Topics covered will include performance monitoring and optimisation, advanced
caching tricks, denormalisation with Solr and Redis and finding the right
balance between technical elegance and pragmatism.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Willison</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1074/challenges-in-developing-a-large-django-site-0</guid><enclosure url="http://www.youtube.com/watch?v=GyC7ilNTNiY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/GyC7ilNTNiY/hqdefault.jpg"></media:thumbnail></item><item><title>Data Plumbing with Python</title><link>http://www.pyvideo.org/video/1073/data-plumbing-with-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Pavlos Christoforou - 21 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
Point Nine provides operations outsourcing and support to large and complex
financial institutions.

As part of our day to day responsibilities we are required to process our
client's trading activity which generally involves receiving data in various
formats and through various protocols, apply transformations, validations and
enrichment processes and distribute the resulting data to various third
parties, in short Data Plumbing.

The goal of this talk is to introduce the audience to the (vast) field of
financial data processing which we believe presents a tremendous opportunity
for python and it's community and provide a brief overview of Point Nine's
deployment of Python as the main framework for all data plumbing activities.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pavlos Christoforou</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1073/data-plumbing-with-python</guid><enclosure url="http://www.youtube.com/watch?v=Bb3YEqtHvGs" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/Bb3YEqtHvGs/hqdefault.jpg"></media:thumbnail></item><item><title>Developing cutting-edge applications with PyQt</title><link>http://www.pyvideo.org/video/1072/developing-cutting-edge-applications-with-pyqt-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Lorenzo Mancini,Matteo Bertozzi - 23 June 2011 in "Training
Pizza Margherita "


&lt;p&gt;Description&lt;/p&gt;
(Presented with Matteo Bertozzi)

Python's high development speed and Qt's gargantuan feature set allow for
comfortable development of complex desktop applications. Still, what does one
need to do to best leverage this awesome combination? And more importantly,
what crucial advantages exist to decide its adoption in favour of more
traditional tecniques?

During this training, we'll start from a white canvas and show how to develop
a desktop application using the best tools Qt offers. You'll learn how to
compose complex GUIs from basic building blocks, and how to use QPainter, one
of the most advanced 2D painting systems in the open source world. Qt's Webkit
integration will be discussed, along with the recent Qt Quick technology,
which allows one to create smooth and fluid user interfaces. Qt's solution to
common deployment problems, like handling a serious translation workflow, will
be presented. At the end, we'll package our PyQt application so it's ready to
be distributed for download.

Walk away with a sound understanding of why you should choose PyQt for your
next desktop project.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lorenzo Mancini,Matteo Bertozzi</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1072/developing-cutting-edge-applications-with-pyqt-0</guid><enclosure url="http://www.youtube.com/watch?v=6ko-tO-3bJ0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/6ko-tO-3bJ0/hqdefault.jpg"></media:thumbnail></item><item><title>Experiences making CPU-bound tasks run much faster</title><link>http://www.pyvideo.org/video/1071/experiences-making-cpu-bound-tasks-run-much-faste</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Ian Ozsvald - 22 June 2011 in "Training Pizza Margherita "


&lt;p&gt;Description&lt;/p&gt;
UPDATE - post-event I've created a [49 page PDF write-
up](http://ianozsvald.com/2011/06/29/high-performance-python-tutorial-v0-1
-from-my-4-hour-tutorial-at-europython-2011/) which summarises the 4 hour
tutorial

As a long-time R&amp;D consultant I'm often working to make slow, experimental
code run faster for tasks like physics simulation, flood modeling and natural
language processing. Python allows a smooth progression from rough-and-ready
(but slow) algorithms through to finely tuned tasks that efficiently use as
much CPU power as you can bring to bear. Speed-ups of 10-500* can be expected
for the Mandelbrot code we'll use.

In this talk I'll cover a set of libraries that make CPU-bound tasks run much
faster. We'll begin with a look at profiling using RunSnakeRun and
line_profiler to identify our bottleneck. We'll take a look at slow algorithms
in Python and how they can run faster using numpy and numexpr.

Next we'll cover the use of multiprocessing to utilise multiple CPU cores
along with Cython or ShedSkin to easily use C code in a friendly Python
wrapper. Multiprocessing on a quad-core system can often provide a 4* speed-up
for the right tasks. Next parallelpython will let us run our code on a network
of machines.

Finally we'll look at pyCUDA to utilise an NVIDIA GPU. CUDA can give the best
improvements for mathematical problems (over 100* on the right tasks) but
works on a narrower set of problems.

How it'll work: The tutorial will be hands on, you'll be converting example
files from normal Python to faster variants using the tools below. All of it
is optional, you'll get the most benefit by having everything installed. We'll
work in groups and open discussion is encouraged.

NOTE - you are expected to have all these tools installed _before_ the
tutorial (if you don't, you might find it hard to follow what's going on!).

I'll be using Python 2.7.1 on a Macbook (Snow Leopard). All of these tools run
on Windows and Linux, as long as your versions are fairly recent everything
should run just fine.

My versions (roughly ordered by importance):

  * Python 2.7.1
  * RunSnakeRun 2.0.1b6 (with wxPython 2.8.12.0 Unicode)
  * line_profiler (1.0b2)
  * Cython 0.14.1
  * ShedSkin 0.7.1
  * numpy 1.5.1
  * numexpr 1.4.2
  * ParallelPython 1.6.1
  * pyCUDA HEAD from git as of 14th June 2011 (with CUDA 4.0 drivers)
  * PyPy 1.5

Some background reading:

  * [http://ianozsvald.com/2010/07/14/22937-faster-python-math-using-pycuda/](http://ianozsvald.com/2010/07/14/22937-faster-python-math-using-pycuda/)
  * [http://ianozsvald.com/2008/11/17/making-python-math-196-faster-with-shedskin/](http://ianozsvald.com/2008/11/17/making-python-math-196-faster-with-shedskin/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Ozsvald</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1071/experiences-making-cpu-bound-tasks-run-much-faste</guid><enclosure url="http://www.youtube.com/watch?v=F7NOKSP_vlQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/F7NOKSP_vlQ/hqdefault.jpg"></media:thumbnail></item><item><title>Exploring CPython's bytecode</title><link>http://www.pyvideo.org/video/1070/exploring-cpythons-bytecode-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Floris Bruynooghe - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
The CPython interpreter always compiles your source code to bytecode, usually
stored in .pyc files. This bytecode is then loaded and executed in the CPython
virtual machine.

This talk will explore the bytecode from the outside in. Starting with how to
read a .pyc file, following the steps the interpreter takes to arrive and a
usable python module. It then dives into the structure of the bytecode itself
and the principles of the virtual machine, detailing how the VM executes this
bytecode to do useful work.

Having seen all these details you should have a good idea of the various
innards of CPython and how to manipulate these to create weird, wonderful,
dangerous and occasional useful hacks.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Floris Bruynooghe</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1070/exploring-cpythons-bytecode-0</guid><enclosure url="http://www.youtube.com/watch?v=YeSn9aovFCg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/YeSn9aovFCg/hqdefault.jpg"></media:thumbnail></item><item><title>Gestione di processi clinici in Python: un caso d'uso</title><link>http://www.pyvideo.org/video/1175/gestione-di-processi-clinici-in-python-un-caso-d</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Federico Caboni - 23 June 2011 in "Track Italiana Big Mac "


&lt;p&gt;Description&lt;/p&gt;
In questo seminario descriverò la nostra esperienza positiva d'uso di Python
per lo sviluppo di un sistema di etichettatura di provette per il prelievo
sanguigno in ambito di laboratorio e corsia ospedaliera. Il sistema è basato
sui Technical Framework di IHE –standard industriale per la modellazione di
processi clinici– ed è progettato per ridurre gli errori umani e assicurare la
tracciabilità del processo.

Durante il seminario spiegherò perché abbiamo scelto Python in primo luogo, e
descriverò come siamo stati in grado di sfruttarne le caratteristiche
peculiari nello specifico del nostro dominio, esaminando le limitazioni e i
problemi affrontati.

Mostrerò specifici casi d'uso di Python in parti differenti del progetto, come
un driver di basso livello per la gestione della robotica di laboratorio, un
modulo di comunicazione asincrona, l'implementazione di attori IHE, e
l'inevitabile applicazione web sviluppata in Django.

Usare Python ha contribuito enormemente alla progettazione del sistema, e ci
ha consentito di adottare cicli di prototipizzazione estremamente rapidi, sia
per l'hardware che per il software. Durante il seminario parlerò anche di ciò
che, secondo noi, ancora manca perché Python possa guadagnarsi il posto che
gli spetta come piattaforma credibile per l'implementazione di processi
clinici basati sui più diffusi standard internazionali.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1175/gestione-di-processi-clinici-in-python-un-caso-d</guid><enclosure url="http://www.youtube.com/watch?v=l7e6NmyWclM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/l7e6NmyWclM/hqdefault.jpg"></media:thumbnail></item><item><title>Latest advances in the Google APIs platform</title><link>http://www.pyvideo.org/video/1069/latest-advances-in-the-google-apis-platform</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Ali Afshar - 21 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
This talk will give an outline of the advances that Google have made in API
delivery over the last year, and how it is relevant to you as a Python
developer. The talk is suitable for beginners and advanced developers.

We will describe the underlying platform, and the built-in features that all
Google APIs inherit.

We will focus on how the Python libraries for this API platform are generated
and can be used as a single library that doesn't require updating with API
updates, as Python lends itself perfectly to the nature of this platform.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ali Afshar</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1069/latest-advances-in-the-google-apis-platform</guid><enclosure url="http://www.youtube.com/watch?v=pJqSbhGIhWU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/pJqSbhGIhWU/hqdefault.jpg"></media:thumbnail></item><item><title>PyHP and the art of dating girls</title><link>http://www.pyvideo.org/video/1068/pyhp-and-the-art-of-dating-girls</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Fabio Rotondo - 21 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
This will be both technical and light talk, introducing these important
subjects:

  * the new scripting language PyHP, a solution to create dynamic web pages using the Python scripting language server side, a-la PHP, but smarter.

  * the LiWE (Lightweight Web Environment) Web Framework, a new and robust web framework written in both JavaScript and Python that will help you creating amazing websites.

  * how this new amazing technologies can help you date girls (this will be the light and funny part of the talk)

Prerequisites:

  * Very basic knowledge of PHP
  * Basic Python
  * Basic / None JavaScript

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabio Rotondo</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1068/pyhp-and-the-art-of-dating-girls</guid><enclosure url="http://www.youtube.com/watch?v=2pMUt1cIiEk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/2pMUt1cIiEk/hqdefault.jpg"></media:thumbnail></item><item><title>PyPy hands-on</title><link>http://www.pyvideo.org/video/1067/pypy-hands-on-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Antonio Cuni,Armin Rigo - 21 June 2011 in "Training Pizza
Margherita"


&lt;p&gt;Description&lt;/p&gt;
The session is divided into two parts, of roughly 2 hours each. People who are
interested only in the first part, can leave the session after it. However,
the first part is a prerequisite for the second one, thus people are not
advised to join in the middle of the session.

The session is meant to be highly interactive. People are invited to bring
their own laptop and try things by themselves.

## Part 1: Run your application under PyPy

This tutorial is targeted to Python users who want to run their favorite
Python application under PyPy, and exploit the most of it. The following
topics will be covered:

    
    - how to fix/avoid CPython implementation details (e.g., refcounting)
    
    - general overview of how the PyPy JIT works
    
    - how to optimize your program for the PyPy JIT
    
    - how to view and interpret the traces produced by the JIT
    
    - how to tweak the parameters of the JIT and the GC
    
    - how to use existing CPython C extensions on PyPy, and fix them if necessary
    

## Part 2: Write your own interpreter with PyPy

PyPy is not only a Python interpreter, but also a toolchain to implement
dynamic languages. This tutorial is targeted to people who want to implement
their own programming languages, or who simply want to know more about how the
PyPy JIT works internally.

The students will be given the source code for a toy language implemented in
RPython. They will learn:

    
    - how to translate it to C using the PyPy translation toolchain
    
    - what are the "hints" needed by the JIT generator, and how to place them
    

Then, they will be challenged to add the proper hints to the toy interpreter,
to get the best result with the JIT.

**THINGS TO DO BEFORE THE TRAINING**

You are encouraged to bring your laptop to the training session.

Make sure that the following prerequisites are met:

  * Install PyPy 1.5:

    * [http://pypy.org/download.html](http://pypy.org/download.html)

    * [http://doc.pypy.org/en/latest/getting-started.html#installing-pypy](http://doc.pypy.org/en/latest/getting-started.html#installing-pypy)

  * Make sure that `setuptools` or `distribute` are installed (look at the URL above for instructions)

  * Clone the pypy repository, and update to the 1.5 version::

$ hg clone [http://bitbucket.org/pypy/pypy](http://bitbucket.org/pypy/pypy)

$ cd pypy

$ hg up -r release-1.5

  * Clone the jitviewer repository and install it on pypy::

$ hg clone
[http://bitbucket.org/pypy/jitviewer](http://bitbucket.org/pypy/jitviewer)

$ cd jitviewer

$ /path/to/pypy-1.5/bin/pypy setup.py develop

If you intend to follow also the second part ("Write your own interpreter with
PyPy"), you need to make sure you have a working [developing
environment](http://doc.pypy.org/en/latest/getting-started-python.html
#translating-the-pypy-python-interpreter)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni,Armin Rigo</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1067/pypy-hands-on-0</guid><enclosure url="http://www.youtube.com/watch?v=J1ZTPi06awk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/J1ZTPi06awk/hqdefault.jpg"></media:thumbnail></item><item><title>Python at Cloudkick</title><link>http://www.pyvideo.org/video/1065/python-at-cloudkick-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Tomaž Muraus - 22 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Cloudkick is a server management and monitoring software as a service used by
thousands of different companies all across the globe.

The service is built in and powered by many different programming languages
and technologies, but the web application and majority of the backend services
are written in Python.

In this talk I will present how and where we use Python (Django, Twisted,
txamqp, Piston, …), different problems we have encountered while building our
service and how we worked around them, good practices and real-world advices
on building effective Twisted services and much more.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tomaž Muraus</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1065/python-at-cloudkick-0</guid><enclosure url="http://www.youtube.com/watch?v=eKz5-hzGZoM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/eKz5-hzGZoM/hqdefault.jpg"></media:thumbnail></item><item><title>Python + Oracle = Prosperity &amp; Performance</title><link>http://www.pyvideo.org/video/1066/python-oracle-prosperity-performance-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Todd Trichler - 23 June 2011 in "Training Pizza Napoli "


&lt;p&gt;Description&lt;/p&gt;
Have you ever wanted or perhaps needed to access data stored in a corporate
Oracle database from within your Python environment?

This session will help developers get up and running using Python with Oracle:
- Learn the basics of working with cx_Oracle - Learn how to use VirtualBox to
set up a Python &amp; Oracle test and developement environment. - Discover
features within Oracle that you can use to build more performant python based
applications. - Leave with all the resources you need to certify your python
app to run against a production Oracle11gR2 database, or hone those skills for
the next job. - Get a quick intro to Oracle Linux along the way.

No prior experience with Oracle is required, some basic understanding of
databases would be helpful.

Look forward to meeting you @ EuroPython 2011 - Todd

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Todd Trichler</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1066/python-oracle-prosperity-performance-0</guid><enclosure url="http://www.youtube.com/watch?v=jUrgMpBkynI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/jUrgMpBkynI/hqdefault.jpg"></media:thumbnail></item><item><title>Python's other collection types and algorithms</title><link>http://www.pyvideo.org/video/1064/pythons-other-collection-types-and-algorithms</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Andrew Dalke - 21 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
It's impossible to use Python without learning about lists, dictionaries and
tuples, and most people have at least heard about sets. These four collection
types are so important and useful that Python has special syntax for creating
them.

Fewer people know about Python's other built-in collection data types and
algorithms. A deque supports fast appends and pops from both ends and is great
for breath-first searches, the heapq module helps you construct a priority
queue on top of lists, and the bisect module is handy for quick binary
searches of an already sorted list.

The defaultdict uses the dict **missing** hook as a better solution to
setdefault, OrderedDict is a dictionary that preserves insertion order, and
Counter is a dictionary specialized for counting hashable objects. A
namedtuple is handy if you want to support both index and attribute lookups
for the same item, and a frozenset is a hashable form of a set which can be
used as keys in a dictionary or set.

My talk will go over these 8 different classes and modules. I'll give concrete
examples of how to use them and why they are useful. The target audience is
intermediate programmers who are familiar with the Python's standard data
types and with data types in general, but who don't know all of the
functionality available in modern Python.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Dalke</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1064/pythons-other-collection-types-and-algorithms</guid><enclosure url="http://www.youtube.com/watch?v=7QiuxqEpq2o" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/7QiuxqEpq2o/hqdefault.jpg"></media:thumbnail></item><item><title>Remote execution of Python scripts using Viri</title><link>http://www.pyvideo.org/video/1063/remote-execution-of-python-scripts-using-viri</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Marc Garcia - 21 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
Viri is a system for automatic distribution and execution of Python code on
remote machines. This is especially useful when dealing with a large group of
hosts.

With Viri, Sysadmins can write their own scripts, and easily distribute and
execute them on any number of remote machines. Depending on the number of
computers to administrate, Viri can save thousands of hours, that Sysadmins
would spend transferring files, logging into remote hosts, and waiting for the
scripts to finish. Viri automates the whole process.

Viri can also be useful for remotely managing host settings. It should work
together with an application where the information about hosts would be
maintained. This information can include cron tasks, firewall rules, backup
settings,etc. After a simple Integration of this application with your Viri
infrastructure, you can change any settings in the application, and see how it
gets applied on the target host automatically.

The talk will cover next topics:

  * Introduction to Viri
  * Live demo on how to install Viri, write a Viri task, and execute it in a remote host
  * Security concerns using Viri

Check [Viri project page](http://www.viriproject.com)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc Garcia</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1063/remote-execution-of-python-scripts-using-viri</guid><enclosure url="http://www.youtube.com/watch?v=SGz5RZEOMFE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/SGz5RZEOMFE/hqdefault.jpg"></media:thumbnail></item><item><title>Social Network Analysis con Python</title><link>http://www.pyvideo.org/video/1174/social-network-analysis-con-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Enrico Franchi - 24 June 2011 in "Track Italiana Big Mac "


&lt;p&gt;Description&lt;/p&gt;
La popolarità dell'analisi dei network è cresciuta molto con la recente
diffusione dei social network. Si tratta di un argomento multidisciplinare,
con importanti contributi dai ricercatori di svariate aree come fisica,
sociologia, matematica ed informatica

Tuttavia, l'analisi dei network è anche uno strumento utile per i
programmatori. Le tecniche base che saranno introdotte in questo talk possono
infatti essere usate ad esempio per i) testare la robustezza e la resistenza
ai fallimenti di un network, e ii) comprendere a fondo la struttura di un
social network, cosa che può portare ad intuizioni su mode e trend a partire
dai moderni servizi di networking.

Insieme a questi concetti, sarà mostrato del codice Python che sfrutterà sia
dei tool esistenti per l'analisi dei network che dei package di calcolo
numerico. L'attenzione sarà principalmente sul codice, mostrato e discusso
insieme alla teoria su cui è basato.

Gli unici prerequisiti consigliati per seguire questo talk sono delle abilità
matematiche di base e la conoscenza a livello introduttivo del linguaggio di
programmazione Python.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Enrico Franchi</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1174/social-network-analysis-con-python</guid><enclosure url="http://www.youtube.com/watch?v=oN02lznMDE8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/oN02lznMDE8/hqdefault.jpg"></media:thumbnail></item><item><title>Sqlkit: database ad accesso immediato</title><link>http://www.pyvideo.org/video/1173/sqlkit-database-ad-accesso-immediato</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Alessandro Dentella - 21 June 2011 in "Track Italiana Big
Mac"


&lt;p&gt;Description&lt;/p&gt;
È molto facile accedere ad un database con Python e ci sono molti ORM che
permettono un alto livello di astrazione. Da qui c'é ancora una lunga strada
per arrivare a manipolare interattivamente i dati anche per semplici compiti.

Sqlkit cerca di coprire questa distanza fornendo alcuni mega-widgets che
permettono di costruire ogni applicazione GUI o accedere direttamente ai dati
con l'applicazione 'sqledit', che viene distribuita con sqlkit. Sqlkit è
costruita con PyGTK e SQLAlchemy.

Questa presentazione esplora alcune fra le più potenti caratteristiche di
sqlkit e mostra quanto sia semplice costruire piccoli programmini ad uso
personale o applicazioni ricche ed articolate. Si focalizza principalmente su
due punti: quanto sia facile creare maschere per editare dati (anche relazioni
on2many o many2many, grazie al modo originale di definire i layout) e al
sistema di template basato su OpenOffice che rende incredibilmente semplice
creare report.

Questa presentazione vuole mostrare come sqlkit può essere usato sia come
framework di sviluppo di applicazioni, sia come strumento che ci aiuta mentre
sviluppiamo altre applicazioni (es.: Django, OpenERP,… ).

Per rendere la presentazione più graduale, sfrutteremo il sistema di
configurazione di sqledit Partendo da una configurazione minima -un URL-
aggiungeremo elementi fino ad ottenere una vera applicazione.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Dentella</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1173/sqlkit-database-ad-accesso-immediato</guid><enclosure url="http://www.youtube.com/watch?v=nx04zGh3gME" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/nx04zGh3gME/hqdefault.jpg"></media:thumbnail></item><item><title>Ubuntu e la programmazione occasionale</title><link>http://www.pyvideo.org/video/1172/ubuntu-e-la-programmazione-occasionale</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Paolo Sammicheli - 21 June 2011 in "Track Italiana Big Mac"


&lt;p&gt;Description&lt;/p&gt;
In questo talk, mosteremo i tool e l'infastruttura che rende molto semplice la
creazione di progetti Python in Ubunut, e la loro distribuzione a milioni di
utenti. Verranno mostrati vari tool: Launchpad, Quickly e i PPA (personal
package archiving).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Sammicheli</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1172/ubuntu-e-la-programmazione-occasionale</guid><enclosure url="http://www.youtube.com/watch?v=qkB-ZqqyYrY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/qkB-ZqqyYrY/hqdefault.jpg"></media:thumbnail></item><item><title>Using Python in Software for the Medical Industry</title><link>http://www.pyvideo.org/video/1062/using-python-in-software-for-the-medical-industry</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] wesley chun - 21 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
The medical industry has long been dominated by custom software written by
manufacturers of medical equipment. With the widespread use of lower-cost
computing power and abundance of software developers using cost-beneficial
open source development tools, it is no surprise that this is a rapidly-
growing field in software engineering. In this talk, I will describe some of
my experiences using Python and other open source tools, temporarily
transitioning from the world of the web and Internet development, jumping into
the medical industry, an experience much like being a fish out of water. The
experiences of working in this field, specifically developing software for use
in clinical trials. We describe the use of open source tools for such software
development, the required integration with closed-source software, and the
documentation rigor that is necessary in a field under the jurisdiction of the
US Food and Drug Administration (FDA). In particular, I'll describe direct
experience in building an application for the use of analyzing spinal
fractures and the various tools that make up the application suite, whose
primary development language was Python. We will also discuss the particular
role of the my employer at the time in the clinical trials process and
elaborate on the data flow that was necessary for all medical applications
developed at the firm, not just the one in particular.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wesley chun</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1062/using-python-in-software-for-the-medical-industry</guid><enclosure url="http://www.youtube.com/watch?v=SFi7LpBr-JY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/SFi7LpBr-JY/hqdefault.jpg"></media:thumbnail></item><item><title>Web API Mashups in a Python Application</title><link>http://www.pyvideo.org/video/1061/web-api-mashups-in-a-python-application</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Johan Euphrosine - 21 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
This talk will cover: - How to use OAuth into your webapp so users can give
permission to access their data stored in third party web application. - How
your webapp can interact with their Web API using RESTful JSON protocols.

This talk is suitable for beginners already familiar with any WSGI web
framework.

This talk will be illustrated with code samples using Google App Engine and
Google APIs client library.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Johan Euphrosine</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1061/web-api-mashups-in-a-python-application</guid><enclosure url="http://www.youtube.com/watch?v=Z_q-52ap-Vg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/Z_q-52ap-Vg/hqdefault.jpg"></media:thumbnail></item><item><title>A Deep-Dive Into Python Classes</title><link>http://www.pyvideo.org/video/1079/a-deep-dive-into-python-classes</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mark Smith - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
This talk aims to lift the lid on the system that governs how types behave in
Python - everything except Metaclasses.

The talk answers questions such as:

  * What is a class, and how can we think of them?
  * How are classes instantiated?
  * How are attributes obtained from a class or an instance?
  * Why do I get a different thing when accessing a method via its class instead of its instance?
  * How do the classmethod and staticmethod decorators work?
  * How can I modify classes and instances after they've been initialised?
  * Does any of this allow me to do any clever tricks?

Attendees should understand at least the basics of object oriented programming
in Python. This talk doesn't aim to explain object-orientation, o-o design, or
how Python represents objects in C.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Smith</dc:creator><pubDate>Fri, 15 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1079/a-deep-dive-into-python-classes</guid><enclosure url="http://www.youtube.com/watch?v=7IIxc4yNo6M" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/7IIxc4yNo6M/hqdefault.jpg"></media:thumbnail></item><item><title>Emulating Stackless and greenlet with each other</title><link>http://www.pyvideo.org/video/1083/emulating-stackless-and-greenlet-with-each-other-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Peter Szabo - 20 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
Stackless Python and the greenlet package for CPython are two different
implementations of coroutine support for Python. (Coroutines are fundamental
building blocks of I/O frameworks like gevent, Eventlet, Concurrence and
Syncless to conveniently handle thousands of socket connections at a time
without creating threads.) Stackless and greenlet implement a different
interface. However, each is powerful enough so that it can be used to emulate
the other one. In this talk we explore the differences and discuss design
decisions and testing strategies of the emulations we have implemented.

[Slides](http://syncless.googlecode.com/svn/trunk/doc/slides_2011-06-20/pts_em
u_coro_2011-06-20.html)

[Slides for the bonus sub-talk](http://syncless.googlecode.com/svn/trunk/doc/s
lides_2010-11-29/pts_coro_2010-11-29.html)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Péter Szabó</dc:creator><pubDate>Thu, 14 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1083/emulating-stackless-and-greenlet-with-each-other-0</guid><enclosure url="http://www.youtube.com/watch?v=rR0EZhe_UZk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/rR0EZhe_UZk/hqdefault.jpg"></media:thumbnail></item><item><title>Introduction to Python Database Programming</title><link>http://www.pyvideo.org/video/1082/introduction-to-python-database-programming</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Marc-Andre Lemburg - 21 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
The talk will give an introduction to the concepts used in the Python Database
API and relational databases in general. Connection, cursors and transactions
are discussed, and their use in a typical Python database application are
demonstrated. The talk will also touch upon some advanced database programming
techniques and discuss best practices.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc-André Lemburg</dc:creator><pubDate>Thu, 14 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1082/introduction-to-python-database-programming</guid><enclosure url="http://www.youtube.com/watch?v=43lq4qZDEOE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/43lq4qZDEOE/hqdefault.jpg"></media:thumbnail></item><item><title>The London Python Code Dojo - an Education in Developer Education</title><link>http://www.pyvideo.org/video/1081/the-london-python-code-dojo-an-education-in-de-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Nicholas Tollervey - 24 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
The London Python Code Dojo is a community organised monthly meeting for
Python programmers in the UK. Variously described as social coding, developer
training, "Scrapheap Challenge" for Pythonistas and "I didn't learn coding
like this when I was a lad", we've forked the traditional code-dojo format and
turned it into something very different.

This talk will explain and explore what happens in the dojo, how it's
organised and why various changes were made to the classic dojo format.
Reference will also be made to influences from music education and philosophy
of education.

Hopefully, by the end of the talk you'll all want to go organise a dojo!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas Tollervey</dc:creator><pubDate>Thu, 14 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1081/the-london-python-code-dojo-an-education-in-de-0</guid><enclosure url="http://www.youtube.com/watch?v=qpTAKS2jqZE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/qpTAKS2jqZE/hqdefault.jpg"></media:thumbnail></item><item><title>Ubuntu and the opportunistic programming</title><link>http://www.pyvideo.org/video/1080/ubuntu-and-the-opportunistic-programming</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Paolo Sammicheli - 20 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
We will show the tools and the infrastructure that makes easy creating own
python project in Ubuntu and distributing it to millions of users. It will be
shown several tools: Launchpad, Quickly and and the Ubuntu's PPA (personal
package archiving).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Sammicheli</dc:creator><pubDate>Thu, 14 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1080/ubuntu-and-the-opportunistic-programming</guid><enclosure url="http://www.youtube.com/watch?v=3iqlzW8C3gw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/3iqlzW8C3gw/hqdefault.jpg"></media:thumbnail></item><item><title>Deploying web applications to the cloud with Python</title><link>http://www.pyvideo.org/video/1155/deploying-web-applications-to-the-cloud-with-pyt-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Nate Aune - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
How can Python help you deploy web applications to the cloud? Amazon EC2
provides virtual machines on demand but as a developer you still have to
configure these machines and push your code to them. Fabric is a Python
library that lets you execute commands on a remote machine, and Boto is a
Python library for interfacing with Amazon web services. By using Fabric and
Boto, you can easily create repeatable deployments and provision new resources
as needed with minimal effort.

This talk will introduce Amazon Web Services and how to launch new machines
using simple Boto scripts, and how to get started making your own repeatable
deployments using Fabric scripts.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nate Aune</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1155/deploying-web-applications-to-the-cloud-with-pyt-0</guid><enclosure url="http://www.youtube.com/watch?v=BTpjJkTXFSQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/BTpjJkTXFSQ/hqdefault.jpg"></media:thumbnail></item><item><title>Derivatives Analytics with Python &amp; Numpy</title><link>http://www.pyvideo.org/video/1154/derivatives-analytics-with-python-numpy-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Yves Hilpisch - 24 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
In financial engineering and derivatives analytics, C/C++/Java/VBA and other
languages are still dominating. Visixion has developed with
[DEXISION](http://www.dexision.com) the first full fledged derivatives
analytics suite with Python as core language.

DEXISION is an On Demand application that is completely Open Source based
(LAMP). For derivatives valuation, it uses Monte Carlo simulation - an
approach known to be computationally demanding. However, Numpy provides the
performance and functionality needed to implement financial simulation
algorithms in a fast and compact manner.

The talk illustrates the architecture of our analytics suite and demonstrates
how to implement fast and compact simulation algorithms with Python and Numpy.
The talk shows that the Python/Numpy combination reaches sufficient speed for
productive financial applications - something still widely doubted.

[No prerequisites.]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yves Hilpisch</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1154/derivatives-analytics-with-python-numpy-0</guid><enclosure url="http://www.youtube.com/watch?v=NXcWrxzq5KI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/NXcWrxzq5KI/hqdefault.jpg"></media:thumbnail></item><item><title>Developing a Cad application as an hobby. My exciting hobby is now my job</title><link>http://www.pyvideo.org/video/1152/developing-a-cad-application-as-an-hobby-my-exci</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Matteo Boscolo - 22 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
PythonCAD is a CAD package written, surprisingly enough, in Python using the
PyQt interface. The PythonCAD project aims to produce a scriptable, open-
source, easy to use CAD package for Linux (Cross Platforms).

I start developing PythonCAD in my spare time and now python is the
programming language that I mostly use. I think that will be very interesting
to tell my story and how I learn python pyqt ,sqlite, sympy… and how python
and pycon and OpenERP change my job.

The goal will be to tell at the new python programmer how easy to use is
python even for complex problem. I can explain why I chose pyqt .. what kind
of trouble I have found and how I solve it. Starting from python going to pyqt
and at the end how to deploy a python application with pyInstaller …

I also explain my actual project OpenPLM an OpenERP module to manage PLM data
into OpenERP

see you soon Matteo

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matteo Boscolo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1152/developing-a-cad-application-as-an-hobby-my-exci</guid><enclosure url="http://www.youtube.com/watch?v=OqpkB1wv5bs" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/OqpkB1wv5bs/hqdefault.jpg"></media:thumbnail></item><item><title>Developing Desktop and mobile apps with PySide and QML</title><link>http://www.pyvideo.org/video/1153/developing-desktop-and-mobile-apps-with-pyside-a-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Thomas Perl - 24 June 2011 in "Training Pizza Margherita "


&lt;p&gt;Description&lt;/p&gt;
PySide offers Python bindings to the Qt libraries. This allows rapid
development of great UI-based Python applications. With the addition of QML in
Qt 4.7, this now gives developers a chance to develop touch-based, rich
applications directly with Python. This talk introduces PySide development,
combined with QML, and shows some real-world examples of mobile PySide
applications.

This talk is based on my PySide/QML on [MeeGo tutorials](http://thp.io/2010
/meego-python/), and shows some of the possibilities. It is aimed at Python
developers looking for a GUI toolkit to create fluent, hardware-accelerated
cross-platform UIs using QML.

Materials available at:
[http://thp.io/2011/europython/](http://thp.io/2011/europython/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Perl</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1153/developing-desktop-and-mobile-apps-with-pyside-a-0</guid><enclosure url="http://www.youtube.com/watch?v=aoXee8Y-3w0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/aoXee8Y-3w0/hqdefault.jpg"></media:thumbnail></item><item><title>Distributing Python programs through PyInstaller</title><link>http://www.pyvideo.org/video/1151/distributing-python-programs-through-pyinstaller-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Giovanni Bajo - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
The talk will focus on how to distribute multi-platform proprietary Python
applications, using [PyInstaller](http://www.pyinstaller.org).

PyInstaller takes a program written in Python and turns it into a static
executable (binary) that does not depend upon an existing Python installation,
nor third party library. The executable can then be packed and shipped in many
different ways (through installer wizards, deb/rpm packages, etc.).

PyInstaller is a good multi-platform alternative to tools like py2exe and
py2app, but it found troubles to gain acceptance in a market that seems
strongly tied to older tools. Instead, PyInstaller puts forward important new
features: for instance, it works on the most important desktop platforms
(Windows, Linux/UNIX, Mac), and it has got an automatic and fully transparent
support for all the workarounds needed to make applications using complex
libraries like Matplotlib or PyQt work within a static executable.

In detail, the following points will be discussed:

  * Distribution of a priopriertary software: initial requests
  * PyInstaller: how it works (basic tutorial)
  * The secrets of PyInstaller: technical details
  * Import hooks: effectively handling third party extensions
  * Flexibility with PyInstaller: what goes in and what stays out
  * Linux: static binaries for a single distribution or cross-distributions
  * Mac: creation of bundles for graphic applications

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1151/distributing-python-programs-through-pyinstaller-0</guid><enclosure url="http://www.youtube.com/watch?v=MRjpZCw8Fg8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/MRjpZCw8Fg8/hqdefault.jpg"></media:thumbnail></item><item><title>Diversity as a Dependency</title><link>http://www.pyvideo.org/video/1150/diversity-as-a-dependency-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Anna Ravenscroft - 20 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
The PSF recently adopted a diversity statement. While some argue that we
should do this just because it's "the right thing to do", others question why
we, as a technical community, should even worry about diversity. This talk
addresses the diversity question, not in moralistic or ethical terms, but in
pragmatic ones. Studies on creativity and productivity demonstrate the
potential benefits of diversity for the Python community. Making Python the
best language it can be is not merely helped by increasing diversity, but may
be dependent on diversity.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Ravenscroft</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1150/diversity-as-a-dependency-0</guid><enclosure url="http://www.youtube.com/watch?v=PLYI46Ou-wI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/PLYI46Ou-wI/hqdefault.jpg"></media:thumbnail></item><item><title>Django productivity tips and tricks</title><link>http://www.pyvideo.org/video/1149/django-productivity-tips-and-tricks-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Simone Federici - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
I will show in this talk some tips, tricks and best practices for some
recurring patterns in the django application development.

This is not a list of tools and applications, but rather a homemade summary of
code snippets and design best practices. All in all, the goal is: no mistakes
and go faster.

Topics include: python, users, forms, jquery, virtualenv, distribute,
buildbot, etc. …

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Federici</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1149/django-productivity-tips-and-tricks-0</guid><enclosure url="http://www.youtube.com/watch?v=bvdhd5kl-nw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/bvdhd5kl-nw/hqdefault.jpg"></media:thumbnail></item><item><title>django-rdflib and postgresql - the best of both worlds</title><link>http://www.pyvideo.org/video/1086/django-rdflib-and-postgresql-the-best-of-both-w</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Stefan Talpalaru - 21 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
rdflib is a python library implementing a database with various triples back-
end, parser, data serializers, SPARQL is a Python interface to extract/insert
triples. We integrated it in Django reusing the database connection and
exposing an ORM interface, along with full-text search on literals. This
presentation shows a django-rdflib case study with a PostgreSQL backend in
[Brain Architecture Management System](http://brancusi1.usc.edu) - a
neuroscientific project for the University of Southern California. Benefits of
the flexible RDF structure will be shown, allowing researchers to insert free
format data, making data public with a customizable serialization and use the
powerful full-text search integrated in PostgreSQL.

Objective: show attendees an effective combination of RDF, PostgreSQL full-
text search and Django ORM via django-rdflib.

Requirements: Django familiarity.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Talpalaru</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1086/django-rdflib-and-postgresql-the-best-of-both-w</guid><enclosure url="http://www.youtube.com/watch?v=zP7p_wbOjbw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/zP7p_wbOjbw/hqdefault.jpg"></media:thumbnail></item><item><title>django-rdflib e postgresql - il meglio dei due mondi</title><link>http://www.pyvideo.org/video/1177/django-rdflib-e-postgresql-il-meglio-dei-due-mo</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Stefan Talpalaru - 24 June 2011 in "Track Italiana Big Mac "


&lt;p&gt;Description&lt;/p&gt;
rdflib è una libreria python che fornisce una base di dati con vari back-end
per le triple, dei parser, serializzatori, SPARQL è un'interfaccia in python
per estrarre/inserire le triple. L'abbiamo integrata con Django tramite il
riutilizzo della connessione alla base di dati fornendo un'interfaccia ORM e
la capacità di fare ricerca full-text sui valori letterali. La presentazione
contiene un studio di caso per django-rdflib con un back-end postgresql in
Brain Architecture Management System (http://brancusi1.usc.edu) - un progetto
neuroscientifico per University of Southern California. Si vedranno i benefici
della struttura flessibile del RDF che permette ai ricercatori di introdurre
dati in formatto libero, rendere i dati pubblici con una serializzazione
personalizzata e usare la potente ricerca full-text fornita da postgresql.

Scopo: introdurre al pubblico una combinazione di RDF, la ricerca full-text di
postgresql e l'ORM di Django tramite django-rdflib.

Requisiti: familiarità con Django.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Talpalaru</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1177/django-rdflib-e-postgresql-il-meglio-dei-due-mo</guid><enclosure url="http://www.youtube.com/watch?v=ujP5LiQdgyI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/ujP5LiQdgyI/hqdefault.jpg"></media:thumbnail></item><item><title>Django: trucchi per migliorare la produttività</title><link>http://www.pyvideo.org/video/1186/django-trucchi-per-migliorare-la-produttivita</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Simone Federici - 22 June 2011 in "Track Italiana Big Mac "


&lt;p&gt;Description&lt;/p&gt;
Proverò ad illustrare in questi 60 minuti alcuni consigli e best practices, da
utilizzare nello sviluppo di applicazioni django based.

Non è un mero elenco di tools e/o applicazioni, bensì un bignami di snippets e
tips architetturali. Tutto sommato l’obbiettivo è non sbagliare e andare più
veloci.

Argomenti trattati: python, users, forms, jquery, virtualenv, distribute,
buildbot, ecc…

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Federici</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1186/django-trucchi-per-migliorare-la-produttivita</guid><enclosure url="http://www.youtube.com/watch?v=TuCYD1qnNcw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/TuCYD1qnNcw/hqdefault.jpg"></media:thumbnail></item><item><title>Exploit your GPU power with PyCUDA (and friends)</title><link>http://www.pyvideo.org/video/1148/exploit-your-gpu-power-with-pycuda-and-friends-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Stefano Brilli - 22 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
CUDA technology permits to exploit the power of modern NVIDIA GPUs. In this
talk, after a brief introduction to GPU architecture, we will focus on how
CUDA got inside Python through libraries like PyCUDA and others…

By some examples we will show the main concepts and techniques for good GPU
programming.

This talk targets anyone who wants to know how to exploit this technology from
Python, the suitable use cases, the using techniques and the do-not-using
techniques to get the best from his own GPU

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Brilli</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1148/exploit-your-gpu-power-with-pycuda-and-friends-0</guid><enclosure url="http://www.youtube.com/watch?v=67Nk4a-izKM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/67Nk4a-izKM/hqdefault.jpg"></media:thumbnail></item><item><title>Flow-based programming made easy with PyF 2.0</title><link>http://www.pyvideo.org/video/1147/flow-based-programming-made-easy-with-pyf-20</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Jonathan Schemoul - 24 June 2011 in "Training Pizza Napoli "


&lt;p&gt;Description&lt;/p&gt;
PyF is a python framework to ease flow based programming and allow massive
data crunching on multiple CPUs. We boast an optional web-based interface to
visually design processing tubes, batch scheduling, report generation and
email alerts.

The Framework is easily extensible by writing plugins, a lot of features like
data persistence, reporting and web scrapping are already part of the
ecosystem.

This presentation will focus on an introduction to PyF architecture and
higher-level designer ui use and how it could be useful to you.

If available, an additional training session will focus on working with the
framework to create your own flow-based processes and plugins.

For more information: [http://www.pyfproject.org/](http://www.pyfproject.org/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Schemoul</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1147/flow-based-programming-made-easy-with-pyf-20</guid><enclosure url="http://www.youtube.com/watch?v=w_zl52L6CU4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/w_zl52L6CU4/hqdefault.jpg"></media:thumbnail></item><item><title>Fun with Python's newer tools</title><link>http://www.pyvideo.org/video/1146/fun-with-pythons-newer-tools-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Raymond Hettinger - 23 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Spend ten minutes each learning to work with Counters, named tuples, new
string formatting, and the LRU cache. Learn the basic API, see how it works
under the hood, enjoy a simple example, and then have fun pushing it to the
limit in interesting ways.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1146/fun-with-pythons-newer-tools-0</guid><enclosure url="http://www.youtube.com/watch?v=Dop2EoBwyR4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/Dop2EoBwyR4/hqdefault.jpg"></media:thumbnail></item><item><title>Generazione di codice in Python : dal documento al codice C++ passando per la modellizzazione UML.</title><link>http://www.pyvideo.org/video/1185/generazione-di-codice-in-python-dal-documento-a</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Francesco Bochicchio - 24 June 2011 in "Track Italiana Big
Mac "


&lt;p&gt;Description&lt;/p&gt;
Intendo presentare un programma di utilità che ho sviluppato per aiutare me e
i miei colleghi nel nostro attuale progetto.Space Software Italia Questo
programma esegue le seguenti attività: - Analizza un documento Microsoft Word
- generato automaticamente - allo scopo di estrarne le informazioni relative
alle strutture dati da usare per comunicare con dispositivi e/o programmi
software. Tali informazioni sono memorizzate in un modello UML, generato
interfacciandosi con il CASE tool usato in azienda (Rational Rose). - Utilizza
i dati in un modello UML - di solito una versione migliorata a mano di quello
generato automaticamente - per generare un set di classi C++, una per
messaggio, che forniscono i metodi per serializzare/deserializzare i messaggi
usando le API specifiche del progetto. Il programma è stato scritto in Python
2.x ed utilizza i seguenti moduli esterni: - pywin32: per interfacciare sia MS
Word che il tool CASE usando lo standard COM. - ply : per analizzare il file
in cui il tool CASE memorizza il modello,

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Bochicchio</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1185/generazione-di-codice-in-python-dal-documento-a</guid><enclosure url="http://www.youtube.com/watch?v=jfBGt_g0Z4M" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/jfBGt_g0Z4M/hqdefault.jpg"></media:thumbnail></item><item><title>Getting ready for PostgreSQL 9.1</title><link>http://www.pyvideo.org/video/1145/getting-ready-for-postgresql-91</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Gabriele Bartolini,Harald Armin Massa,Marco Nenciarini - 22
June 2011 in "Training Pizza Napoli "


&lt;p&gt;Description&lt;/p&gt;
PostgreSQL is an advanced, versatile open-source database management system
that integrates perfectly with Python. It is developed by a very active
international community and is distributed under the BSD-like PostgreSQL
License.

Enterprise-class features (including SQL standard compliance, ACID
transactions, disaster recovery, high availability, replication, partitioning
and general extensibility) make PostgreSQL suitable for business critical
environments seeking to reduce the TCO of their database solutions without
altering their functional needs. PostgreSQL 9.0, released in September 2010,
was the first version of PostgreSQL with Hot Standby, a built-in master/slave
replication mechanism. Asynchronous replication through the standard and
consolidated log shipping technique (previously used with Warm Standby for
high availability) has been enhanced with streaming replication.

Version 9.1, expected to be out later in 2011, will add synchronous
replication to PostgreSQL, making it the first DBMS that allows developers and
users to control the replication strategy at transactional granularity. Come
to the talk and discover all the major new features of PostgreSQL 9.1,
including extensions management, writable common table expressions (WCTE),
etc.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Bartolini,Harald Armin Massa,Marco Nenciarini</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1145/getting-ready-for-postgresql-91</guid><enclosure url="http://www.youtube.com/watch?v=71i5FlW30s0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/71i5FlW30s0/hqdefault.jpg"></media:thumbnail></item><item><title>Good API design</title><link>http://www.pyvideo.org/video/1144/good-api-design-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Alex Martelli - 20 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Designing interfaces so that other code can interact with ours (whether our
code is a library, framework, application, website…) is a very common and
clearly crucial activity, but it's fraught with dangers - there's a lot stuff
we all keep doing wrong time after time. This talk shows some common
categories of API design errors encountered in the wild, with tips on how to
avoid them when you design your next API.

Goals: to show you how to focus resources and attention to help avoid mistakes
in API design. Prereqs: experience designing and developing software, esp.
software which needs to interact w/other existing software.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1144/good-api-design-0</guid><enclosure url="http://www.youtube.com/watch?v=bv89IOFvn7o" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/bv89IOFvn7o/hqdefault.jpg"></media:thumbnail></item><item><title>Hacking PyLongObject on Python 3.2</title><link>http://www.pyvideo.org/video/1143/hacking-pylongobject-on-python-32</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Cesare Di Mauro - 24 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
Beginning with Python 3 the old integer ("int") type has gone leaving the
place to "long", which replaced it giving a unique, uniform type to deal with
integers. However longs need a more complex structure which effectively
dropped a bit of Python 3.x performance. Looking at their implementation, an
idea grown that can help to improve the situation on common sceneries (using
"short" integers). A slightly changed structure will be presented and compared
with the old PyIntObject and the current Python 3.2 PyLongObject, along with
some optimizations, thoughts, and issues found on the road, which will show
the effort required by such change on a Python core element.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cesare Di Mauro</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1143/hacking-pylongobject-on-python-32</guid><enclosure url="http://www.youtube.com/watch?v=9tzd45ho8gE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/9tzd45ho8gE/hqdefault.jpg"></media:thumbnail></item><item><title>Healthcare process management in Python: a use case</title><link>http://www.pyvideo.org/video/1142/healthcare-process-management-in-python-a-use-c-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Federico Caboni - 24 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
In this talk I'll describe our successful experience in introducing Python
into a system for blood collection tube labeling in laboratory and hospital
environments, based on IHE Technical Frameworks –the industry standard for
modeling and streamlining healthcare processes– and designed to avoid human
errors and ensure process traceability.

During the talk I will explain why we chose Python in the first place, how
we've been able to leverage the language's features and characteristics for
our specific field and what problems and limitations we faced.

I will show specific instances of Python usage in different parts of the
project, including a low-level driver for laboratory automation machinery, an
asynchronous messaging module, the implementation of IHE-compliant actors and
the inevitable end-user web application, implemented with Django.

Using Python greatly helped us in building our system, allowing very rapid
prototyping cycles for both hardware and software, but during the talk I'll
also point out what we found was missing, and what would be nice to have to
ensure Python has its proper place as a viable platform for designing
streamlined healthcare workflows based on established international standards.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1142/healthcare-process-management-in-python-a-use-c-0</guid><enclosure url="http://www.youtube.com/watch?v=MsmmrfkLuvY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/MsmmrfkLuvY/hqdefault.jpg"></media:thumbnail></item><item><title>High-performance computing on gamer PCs</title><link>http://www.pyvideo.org/video/1141/high-performance-computing-on-gamer-pcs-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Yann Le Du - 20 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
In Electron Paramagnetic Resonance Imaging, we are faced with a deconvolution
problem that has a strong impact on the image actually reconstructed. Faced
with the need of mapping the distribution of organic matter in Terrestrial and
Martian rock samples for applications in exobiology, we needed to see how to
extract a maximum amount of information from our data: our approach uses
reservoir computing artificial neural networks coupled to a particle swarm
algorithm that evolves the reservoirs’ weights.

The code runs on the Hybrid Processing Units for Science (HPU4Science) cluster
located at the Laboratoire de Chimie de la Matière Condensée de Paris (LCMCP).
The cluster is composed of a central data storage machine and a heterogeneous
ensemble of 6 decentralized nodes. Each node is equipped with a Core2 Quad or
i7 CPU and 3-7 NVIDIA Graphical Processing Units (GPUs) including the GF110
series. Each of the 28 GPUs independently explores a different parameter space
sphere of the same problem. Our application shows a sustained real performance
of 15.6 TFLOPS. The HPU4Science cluster cost $36,090 resulting in a 432.3
MFLOPS/$ cost performance.

That talk is meant to demonstrate on a practical case how consumer grade
computer hardware coupled to a very popular computer language can be used to
tackle a difficult yet very elementary scientific problem: how do you go from
formulating the problem, to choosing the right hardware and software, and all
the way to programming the algorithms using the appropriate development tools
and methodologies (notably Literate Programming). On the math side, the talk
requires a basic understanding of matrix algebra and of the discretization
process involved when computing integrals.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yann Le Du</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1141/high-performance-computing-on-gamer-pcs-0</guid><enclosure url="http://www.youtube.com/watch?v=TkBkGGPY2P0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/TkBkGGPY2P0/hqdefault.jpg"></media:thumbnail></item><item><title>How to build complex web applications having fun?</title><link>http://www.pyvideo.org/video/1140/how-to-build-complex-web-applications-having-fun-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Andrew Mleczko - 22 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
Web development is a complexity challenge nowadays. Growing number of
functionalities results in customer expectations increase which makes project
design more difficult. Using proper tools that suite your customer needs is
essential.

In this talk I would like to present two successful stories using closely
together Pyramid and Plone. Basing on these examples I wished to highlight the
main reasons for using Plone as a CMS only and letting Pyramid do the rest
(vertical application). Moreover, I will underscore good and bad practices
during integration process and how to make farsighted architectural decisions
in a right moment.

Prerequisites: be familiarized with common python web framework concepts.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Mleczko</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1140/how-to-build-complex-web-applications-having-fun-0</guid><enclosure url="http://www.youtube.com/watch?v=eXW_lN4x04k" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/eXW_lN4x04k/hqdefault.jpg"></media:thumbnail></item><item><title>How to make intelligent web-apps</title><link>http://www.pyvideo.org/video/1139/how-to-make-intelligent-web-apps-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Deepak Thukral - 22 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
The primary goal of this talk is twofold: to evaluate the need of data mining
and introduce some very cool, simple yet powerful machine learning techniques
to audience such as classification, clustering, collaborative filtering,
recommendation etc in your Python web applications. This talk will conclude
with some explanation and limitations of machine learning algorithms.

Basic knowledge of Python is sufficient. However some experience with Django,
meshups, machine learning or data hunger is encouraged. All talk material and
django apps will be available after talk under MIT license.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Deepak Thukral</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1139/how-to-make-intelligent-web-apps-0</guid><enclosure url="http://www.youtube.com/watch?v=N7monH2jXNI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/N7monH2jXNI/hqdefault.jpg"></media:thumbnail></item><item><title>Implementing distributed applications using ZeroMQ, Python and other bad guys...</title><link>http://www.pyvideo.org/video/1138/implementing-distributed-applications-using-zerom</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Francesco Crippa - 24 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Cloud Computing and Large Scale environments require sometime applications
based on complex and distributed architectures… and this usually means a huge
overhead in the design and confusion out of control in the code (network wise
race conditions, single points of failure and so on)

Introducing elements like *MQ and IPC frameworks in this kind of applications
is the only way to reduce the complexity and enable a fluid design (in other
words: mess-under-control)

The talk is focused on describing how to design a distributed application in
different scenarios, using ZeroMQ (a modern broker-less MQ system) as core
framework, with examples and demos.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Crippa</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1138/implementing-distributed-applications-using-zerom</guid><enclosure url="http://www.youtube.com/watch?v=pYlKLaqlFj8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/pYlKLaqlFj8/hqdefault.jpg"></media:thumbnail></item><item><title>Interoperability: from Python to Clojure and the other way round</title><link>http://www.pyvideo.org/video/1137/interoperability-from-python-to-clojure-and-the</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Enrico Franchi - 21 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
Clojure is a modern Lisp dialect symbiotic with the Java Virtual Machine and
designed for concurrency. Clojure is compiled to byte-code and yet is fully
dynamic. It is very oriented towards functional programming and manages state
change in a controlled environment with software transactional memory (STM).
Since Clojure is a Lisp dialect, it retains the code-as-data philosophy and
has a powerful macro system

Using the Jython, an implementation of the Python programming language written
in Java, it is possible to call Clojure from Python and call Python from
Clojure, using the JVM as an interoperability platform.

After a brief introduction of the main Clojure features, the presentation will
show how Jython and Clojure can be used together.

No previous knowledge of Clojure (or Lisp) is assumed nor required.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Enrico Franchi</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1137/interoperability-from-python-to-clojure-and-the</guid><enclosure url="http://www.youtube.com/watch?v=jYhLqo4Mqbc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/jYhLqo4Mqbc/hqdefault.jpg"></media:thumbnail></item><item><title>Introducing Django REST framework</title><link>http://www.pyvideo.org/video/1136/introducing-django-rest-framework</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Tom Christie - 23 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
Django REST framework is a new project that aims to make it easy to build
RESTful Web APIs.

The APIs it creates are fully Web browse-able, using an awesome Django admin
style interface, allowing them to be truly self-describing, well-connected
systems.

The talk will include:

  * RESTful Web APIs and Django - what batteries aren't in the box
  * An introduction to the framework - What it is, what problems it tries to solve
  * Why it's so important that Web APIs should be Web browse-able
  * A live coding demonstration
  * Audience discussion

Sign up for the [sprint](http://ep2011.europython.eu/p3/sprints/) More
[info](http://django-rest-framework.org)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Christie</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1136/introducing-django-rest-framework</guid><enclosure url="http://www.youtube.com/watch?v=SGj0-BZsFn4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/SGj0-BZsFn4/hqdefault.jpg"></media:thumbnail></item><item><title>Introduction to Gevent</title><link>http://www.pyvideo.org/video/1135/introduction-to-gevent-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Denis Bilenko - 20 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
[Gevent](http://gevent.org) is a coroutine-based library that enables you to
write highly-concurrent network and web applications. learn in detail what
Gevent is, what it does and how it does it.

I will introduce a coroutine-based approach to network programming, explain it
benefits and pitfalls. We will walk through the Gevent API, including the most
recent additions, and understand how it is implemented. I will make a quick
overview of the most interesting 3rd party add-on and applications after that.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Denis Bilenko</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1135/introduction-to-gevent-0</guid><enclosure url="http://www.youtube.com/watch?v=5MZDzwmfRmo" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/5MZDzwmfRmo/hqdefault.jpg"></media:thumbnail></item><item><title>Introduction to Qt</title><link>http://www.pyvideo.org/video/1134/introduction-to-qt-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Matti Airas - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
This presentation introduces Nokia's Qt Development Frameworks and their
relationship to Python. After an overview of Qt and the Qt ecosystem, Qt's
history and future roadmap are discussed. Different Python bindings, PyQt and
PySide in particular, are introduced. Finally, hands-on examples of Qt Quick
with Python are shown.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matti Airas</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1134/introduction-to-qt-0</guid><enclosure url="http://www.youtube.com/watch?v=K5u1MToA3NU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/K5u1MToA3NU/hqdefault.jpg"></media:thumbnail></item><item><title>It's the message, stupid: python &amp; amqp</title><link>http://www.pyvideo.org/video/1133/its-the-message-stupid-python-amqp</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Muharem Hrnjadovic - 21 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
Messaging is a well established domain in information technology and can
greatly improve the scalability and throughput of a system when employed
appropriately. Message queues can be used to achieve

  * spatial decoupling i.e. the systems that produce and consume messages may be deployed on different machines, networks, continents etc.
  * temporal decoupling i.e. a system can enqueue a message and carry on without waiting for the message consumer.

We use e.g. messaging in [OpenQuake](http://openquake.org) to distribute
calculations of [seismic hazard](http://openquake.org/about/gem/) and the
respective risk to human lives and infrastructure.

There is a huge number of messaging patterns identified in the
[industry](http://www.amazon.com/dp/0321200683/) and a small selection of
these will be presented to whet your appetite :-)

[AMQP](http://www.amqp.org/) is a fairly new and open messaging standard with
a number of freely available open source message brokers
([RabbitMQ](http://www.rabbitmq.com/), [ZeroMQ](http://www.zeromq.org/),
[qpid](http://qpid.apache.org/) etc.) with different features and performance
trade-offs.

In the course of the presentation you will be - introduced to AMQP concepts
and jargon - introduced to available Python AMQP bindings (focussing on an
asynchronous ([txAMQP](https://launchpad.net/txamqp)) and a synchronous
variant (most likely [kombu](http://ask.github.com/kombu/)) - shown code
examples demonstrating how to use these Python bindings

The presentation (45 minutes in total) is structured as follows:

  * 7.5 minutes for messaging concepts and patterns
  * 7.5 minutes for AMQP concepts
  * 5 minutes for an overview of the Python bindings for AMQP
  * 10 minutes for txAMQP examples (asynchronous bindings)
  * 10 minutes for kombu examples (synchronous bindings)
  * 5 minutes for questions

References:

  * [http://www.amqp.org/](http://www.amqp.org/)
  * [http://www.rabbitmq.com/](http://www.rabbitmq.com/)
  * [http://www.zeromq.org/](http://www.zeromq.org/)
  * [http://qpid.apache.org/](http://qpid.apache.org/)
  * [https://launchpad.net/txamqp](https://launchpad.net/txamqp)
  * [http://ask.github.com/kombu/](http://ask.github.com/kombu/)
  * [http://www.amazon.com/dp/0321200683/](http://www.amazon.com/dp/0321200683/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Muharem Hrnjadovic</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1133/its-the-message-stupid-python-amqp</guid><enclosure url="http://www.youtube.com/watch?v=dIwsKYNbtnI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/dIwsKYNbtnI/hqdefault.jpg"></media:thumbnail></item><item><title>JSON data + RML template = PDF report</title><link>http://www.pyvideo.org/video/1132/json-data-rml-template-pdf-report-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Stefano Cotta Ramusino - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
The main problem with reports generated in Python is how to separate the
content from the style using ReportLab library, because all informations
should be saved in a single source file that, by example, is impossible to
understand for your graphic designer.

So the solution: just modularizes all components you need and identify simple
container formats for your data input (JSON) and document template (ReportLab
RML).

Now with the power of Genshi and XInclude we will create dynamic templates
that include specific snippets (e.g., to generate on the fly a decent graph
with matplotlib or cairoplot to fill some lacks of ReportLab) and we will
detach the stylesheet from the template structure.

And at the end you can also have the internationalization service in the PDF
report generation!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Cotta Ramusino</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1132/json-data-rml-template-pdf-report-0</guid><enclosure url="http://www.youtube.com/watch?v=9Cq_Zmr0OgM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/9Cq_Zmr0OgM/hqdefault.jpg"></media:thumbnail></item><item><title>Leveraging an instant messaging protocol to build a scalable cloud architecture</title><link>http://www.pyvideo.org/video/1131/leveraging-an-instant-messaging-protocol-to-build</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Achiel van der Mandele - 24 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
XMPP is an open technology for real-time communication. Although primarily
known for its application in the IM service "Jabber" (and, subsequently,
gchat/gtalk), it has numerous applications and creates new opportunities for
inter-system communication.

While researching for an alternative to webservices at Mendix, we came across
XMPP and realized it solved many of the shortcomings of webservices. It is
currently being used to handle all inter-system and inter-process
communication in the Mendix cloud hosting environment.

The talk will give a general overview of what XMPP is, an introduction to the
sleekxmpp python library and how the core features of xmpp can help an
architecture scale well horizontally.

Required knowledge: basic understanding of hosting environments.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Achiel van der Mandele</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1131/leveraging-an-instant-messaging-protocol-to-build</guid><enclosure url="http://www.youtube.com/watch?v=xlVCtmbIYNE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/xlVCtmbIYNE/hqdefault.jpg"></media:thumbnail></item><item><title>Making CPython Fast Using Trace-based Optimisations</title><link>http://www.pyvideo.org/video/1130/making-cpython-fast-using-trace-based-optimisatio</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mark Shannon - 24 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
CPython can be made faster by implementing the sort of optimizations used in
the PyPy VM, and in my HotPy VM. All the necessary changes can be made without
modifying the language or the API.

The CPython VM can be modified to support optimizations by adding an effective
garbage collector and by separating the virtual-machine state from the real-
machine state (like Stackless).

Optimizations can be implemented incrementally. Since almost all of the
optimizations are implemented in the interpreter, all hardware platforms can
benefit. JIT compiler(s) can then be added for common platforms (intel, ARM,
etc.).

For more information see
[http://hotpy.blogspot.com/](http://hotpy.blogspot.com/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Shannon</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1130/making-cpython-fast-using-trace-based-optimisatio</guid><enclosure url="http://www.youtube.com/watch?v=3uTnXITm-kA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/3uTnXITm-kA/hqdefault.jpg"></media:thumbnail></item><item><title>Making use of OpenStreetMap data with Python</title><link>http://www.pyvideo.org/video/1129/making-use-of-openstreetmap-data-with-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Andrii Mishkovskyi - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
Ever wondered how web maps are created? Ever wondered if you could build
something like Google Maps over a weekend? You probably can't, but this talk
will show you the basics of what you need to know, such as importing data,
rendering maps and even building simple routes. And all of this in Python!

Abstract: * Learning how OSM data looks * Parsing and importing the data *
Rendering maps with Mapnik * Bits of code required to build geocoder *
Building simple router with Python and PostGIS * And anything else I forgot to
mention in this abstract but will talk about

Definitions: OpenStreetMap - the so-called "Wikipedia of maps" project, with
thousands of contributors who edit the map data of the whole world. Unlike
similar projects, the map data is completely free (both as in beer and as in
speech) and thus anyone can make use of it. Mapnik - rendering framework,
created specifically for OpenStreetMap, written in C++ and Python. PostGIS -
an extension of PostgreSQL database, with support for many useful GIS
features.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrii Mishkovskyi</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1129/making-use-of-openstreetmap-data-with-python</guid><enclosure url="http://www.youtube.com/watch?v=ULxpa5jPvow" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/ULxpa5jPvow/hqdefault.jpg"></media:thumbnail></item><item><title>Managing the cloud with libcloud</title><link>http://www.pyvideo.org/video/1128/managing-the-cloud-with-libcloud-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Tomaž Muraus - 22 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
libcloud is an open-source client library for interacting with different cloud
providers.

The primary goal of the library is to abstract all the provider differences
away and expose common functionality in a nice, clean and concise API.

This talk will address the following topics:

  * Why a library like this was built in the first place
  * Different problems we have encountered while building it (not all the providers always play nice)
  * An introduction to the library API (compute, storage and load-balancer part)
  * How to use it to build something useful and fun
  * How to participate and contribute
  * Roadmap and plans for the future

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tomaž Muraus</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1128/managing-the-cloud-with-libcloud-0</guid><enclosure url="http://www.youtube.com/watch?v=6FlvXN2JxTc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/6FlvXN2JxTc/hqdefault.jpg"></media:thumbnail></item><item><title>Merengue: the new surprising and refreshing Django based CMS.</title><link>http://www.pyvideo.org/video/1127/merengue-the-new-surprising-and-refreshing-djang</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Manuel Saelices - 20 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
Django is an excellent web development platform with an extensive developers
community. It may be the most popular Python web framework nowadays. However,
the exisiting django based CMS products are not as feature complete as other
comparable solutions (Drupal, Plone, Alfresco, ModX, etc.).

The Merengue project tries to fill this gap. It is financed by the University
of Málaga (Spain) and takes advantage of existing code and knowledge from
other projects (Plone, Drupal, Pinax, django-cms, feincms, LFC, etc.)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Manuel Saelices</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1127/merengue-the-new-surprising-and-refreshing-djang</guid><enclosure url="http://www.youtube.com/watch?v=jUHTORehfRg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/jUHTORehfRg/hqdefault.jpg"></media:thumbnail></item><item><title>Meteorology, Climate and Python: desperately trying to forget technical details</title><link>http://www.pyvideo.org/video/1126/meteorology-climate-and-python-desperately-tryi</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Claude Gibert - 24 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
# Contents

Python is a great language for writing programming frameworks. Python
frameworks are normally addressed to software developers who are Python
professionals. I developed a software package in a scientific institution,
designed to be used by non-programmers, but also designed to enable
customisation through programming by some users. I finally designed a three
level package:

  * A Python programming framework, addressed whoever wanted to invest in Python and had plans to develop applications;

  * An application built on that framework with an interface designed for non-programmers;

  * Ways of customising the behaviour of the application by providing some basic Python functions or more elaborated code.

One of the challenges was to offer an application with an easy to use
interface, not graphical, not web-based and not requiring Python programming.
This interface was necessary for batch processing.

This talk addresses how this project was carried out, the technical solutions
adopted and how Python was introduced in an operational scientific institution
([http://www.ecmwf.int](http://www.ecmwf.int)) where most users were Fortran
programmers. Python was introduced as early as 2004 and it was a challenge to
gain acceptance. I will also make a parallel with a project I am currently
working on for NASA
([http://gmao.gsfc.nasa.gov/](http://gmao.gsfc.nasa.gov/)). _Desperately
trying to forget technical details_ summarises how I tried, using Python, to
help Meteorology scientists to focus on their domain of expertise instead of
constantly solving technical problems.

# Background:

The disciplines of Meteorology and Climate involve numerical modelling of
physical phenomena. The amount of data going in and out of the model is
considerable. The organisation and the storage of data is complicated, their
post-processing is a challenge. Scientists need to access and process input
and output data to monitor the trends of the input data and to evaluate the
performance of their models. Those statistics, diagnostics, plots and
verifications are crucial to the improvement of the quality of the models.
Finding the right data, decoding it, transforming it to be ready for use are
necessary steps to initiate the pre-processing. All these actions are
fundamentally the same between different prediction centres, but the data
organisation and file formats can differ.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Claude Gibert</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1126/meteorology-climate-and-python-desperately-tryi</guid><enclosure url="http://www.youtube.com/watch?v=zZY-5cHZsT0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/zZY-5cHZsT0/hqdefault.jpg"></media:thumbnail></item><item><title>MiG - A Complete Grid Middleware (mostly) in Python</title><link>http://www.pyvideo.org/video/1125/mig-a-complete-grid-middleware-mostly-in-pyt-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Jonas Bardino - 22 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Grid computing was all the buzz in the beginning of the millennium and still
has serious attention in different forms although many of the original grand
promises were never delivered. The general level of ambitions have instead
slowly but steadily degraded to those of the latest buzz word, Cloud.

We as a project have proven that most of the original promises _can_ actually
be delivered and we have done so using Python almost solely as the
implementation language. The choice of Python provided us with a stable and
versatile base for quickly getting this far and it significantly eases
extending and maintaining our middleware in the future. MiG is currently about
50000 lines of source code but it still offers more features than competing
grid systems with millions of lines of code.

Apart from introducing the open source MiG middleware and summarizing how we
got here, this talk will outline some of the core technologies used to reach
that goal and underline why it can make a lot of sense to choose Python for
complex HPC projects like MiG, too. Talk keywords include Network Programming,
Open Source Python projects, Science and Math and Web-based Systems. There's
no special intended audience, but a certain level of Python knowledge and
experience may be an advantage. Please refer to
[http://code.google.com/p/migrid/](http://code.google.com/p/migrid/) for
further MiG information.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonas Bardino</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1125/mig-a-complete-grid-middleware-mostly-in-pyt-0</guid><enclosure url="http://www.youtube.com/watch?v=enNcrMTg2lM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/enNcrMTg2lM/hqdefault.jpg"></media:thumbnail></item><item><title>New beauty in Camelot</title><link>http://www.pyvideo.org/video/1124/new-beauty-in-camelot-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Erik Janssens,Jeroen Dierckx - 22 June 2011 in "Track
Ravioli "


&lt;p&gt;Description&lt;/p&gt;
Camelot is a Python framework that leverages SQLAlchemy and QT to build rich
desktop applications. The model - view definition used was inspired by the
Django Admin interface. Some see it as a replacement for MS Access, but it's
underlying libraries allow much more advanced features.

In this talk we will focus on the changes and new features that were
introduced in Camelot and more importantly, how they can be used in your
applications. Those features range from Matplotlib chart integration and new
types of actions to displaying custom SQLAlchemy queries in a table view.

We will share our experiences with large scale deployment of Python and
Camelot applications to the desktop of the user. In a number of case studies
we will point out the mistakes we made and how they were corrected.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Janssens,Jeroen Dierckx</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1124/new-beauty-in-camelot-0</guid><enclosure url="http://www.youtube.com/watch?v=jwwEyEAR1YA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/jwwEyEAR1YA/hqdefault.jpg"></media:thumbnail></item><item><title>Objects and classes in Python (and JavaScript)</title><link>http://www.pyvideo.org/video/1123/objects-and-classes-in-python-and-javascript-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Jonathan Fine - 23 June 2011 in "Training Pizza Napoli "


&lt;p&gt;Description&lt;/p&gt;
Python has a well-thought out system for classes. Beginners can use it without
understanding it all. Experts can use it to produce code that is both elegant
and powerful (such as models and class-based views in Django). Python classes
can be used for many purposes.

This tutorial arises from the author's experience in using classes to solve
problems, such as:

  * Add custom methods and attributes to objects that are, at root, just an integer
  * Construct dictionaries whose values are functions
  * Construct classes on-the-fly
  * Implement JavaScript object semantics in Python (advanced topic)

The outline syllabus is:

  * Review of the class statement in Python (and decorators)
  * Subclassing built-in types such as int and tuple
  * How to define classes without using a class statement
  * How to define a dispatch dictionary using a class statement
  * Metaclasses as syntactic sugar for class construction
  * Metaclasses to provide new class semantics
  * Review of JavaScript object semantics
  * Using Python classes to implement JavaScript object semantics

For Guido on the history of Python classes see:

  * [http://python-history.blogspot.com/2010/06/new-style-classes.html](http://python-history.blogspot.com/2010/06/new-style-classes.html)
  * [http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html](http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html)
  * [http://python-history.blogspot.com/2010/06/method-resolution-order.html](http://python-history.blogspot.com/2010/06/method-resolution-order.html)

This tutorial is for Intermediate or Advanced Python programmers. (Beginners
will find it very hard going.) The aim of the course is to explain exactly
what happens when a class in constructed, and to learn ways of using this
knowledge.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Fine</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1123/objects-and-classes-in-python-and-javascript-0</guid><enclosure url="http://www.youtube.com/watch?v=tIgRlaChOqU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/tIgRlaChOqU/hqdefault.jpg"></media:thumbnail></item><item><title>OpenERP: 100% pythonic way for business management</title><link>http://www.pyvideo.org/video/1122/openerp-100-pythonic-way-for-business-managemen</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Davide Corio - 23 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
Business management isn't just accounting. Let's see how Python can help us to
build a complete ERP infrastructure. From CRM to e-commerce, from accounting
to document management…we'll see how Python is mature and able to do great
things where Java and .NET are still considered as the only option. Case
studies to be presented.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Davide Corio</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1122/openerp-100-pythonic-way-for-business-managemen</guid><enclosure url="http://www.youtube.com/watch?v=b70_GgWpH40" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/b70_GgWpH40/hqdefault.jpg"></media:thumbnail></item><item><title>OpenStack Compute's automated testing</title><link>http://www.pyvideo.org/video/1121/openstack-computes-automated-testing</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Soren Hansen - 24 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
When a patch is propoed against OpenStack compute (a.k.a. Nova) and it makes
it through our peer review process, our automated test system takes over:

  * It finds the approved patch on Launchpad;

  * An attempt to merge the patch is performed;

  * The unit tests are run;

  * A PEP-8 check is run;

  * The merge is completed, applying the patch to our trunk;

  * A tarball is built and published;

  * An Ubuntu source package is built for several editions of Ubuntu;

  * The source packages get uploaded to a PPA;

  * Once built, the packages are installed on a test setup;

  * A test battery is run against the installed "cloud".

I'll explain the various steps, showing how it works and attempt to
demonstrate it (Murphy's law permitting), and then I'll speak about the
benefits we've gotten from PPA's and working closely with Ubuntu.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Soren Hansen</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1121/openstack-computes-automated-testing</guid><enclosure url="http://www.youtube.com/watch?v=MVo0qEKK0wo" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/MVo0qEKK0wo/hqdefault.jpg"></media:thumbnail></item><item><title>Paver: the build tool you missed</title><link>http://www.pyvideo.org/video/1119/paver-the-build-tool-you-missed</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Lukaš Linhart - 22 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Build tools are not very popular in Python environment. In this talk, I'd like
to show how useful it is to have one, even if you do just simple web
applications. A nice, single point of entry instead of hairy shell scripts,
fabric fabfiles and django admin commands all over the place.

Written in the neat, friendly Python instead of some Anty XML jumbo, you are
about to have a refreshing cleanup.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lukáš Linhart</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1119/paver-the-build-tool-you-missed</guid><enclosure url="http://www.youtube.com/watch?v=WNH2wAPlGQE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/WNH2wAPlGQE/hqdefault.jpg"></media:thumbnail></item><item><title>Pitfalls of Continuous Deployment</title><link>http://www.pyvideo.org/video/1118/pitfalls-of-continuous-deployment-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] David Cramer - 22 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
Practice iterative development like the pros. Release sooner, faster, and more
often.

Continuous deployment (and testing) has started to become a reality for many
companies. It brings to light one of the many problems that face large product
teams, but also creates some of its own. This talk will focus on the pros and
cons of continuous deployment, how DISQUS switched from the recurring release
cycle to continuous releases, as well as providing tips and arguments for
adopting it in your workplace.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1118/pitfalls-of-continuous-deployment-0</guid><enclosure url="http://www.youtube.com/watch?v=qLKNjpudFbY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/qLKNjpudFbY/hqdefault.jpg"></media:thumbnail></item><item><title>plac: more than just another command-line arguments parser</title><link>http://www.pyvideo.org/video/1085/plac-more-than-just-another-command-line-argumen</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Michele Simionato - 21 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
plac is general purpose tool than can be used to define command-oriented
domain specific languages (DSLs). In its simplest form it can be used as a
command-line arguments parser with an easier-to-use API than argparse. It can
also be used to replace the cmd module in the standard library. Moreover it
can be used to automatize functional tests and for much more. The talk will
touch upon many use cases where plac can make your life as a developer simpler
and better. Technically Plac is a wrapper over argparse and works in all
versions of Python starting from Python 2.3 up to Python 3.2. In Python 3.X it
takes advantage of function annotations to define the parser in a declarative
way, instead of the imperative way of argparse. In Python 2.X it uses
decorators instead, to reach the same goal. The talk is a hands-on interactive
demonstration of plac capabilities.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michele Simionato</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1085/plac-more-than-just-another-command-line-argumen</guid><enclosure url="http://www.youtube.com/watch?v=vM9DUUz7Fa8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/vM9DUUz7Fa8/hqdefault.jpg"></media:thumbnail></item><item><title>Playing tasks with Django-Celery</title><link>http://www.pyvideo.org/video/1117/playing-tasks-with-django-celery-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mauro Rocco - 22 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Celery is an open source task queueing system based on distributed message
passing.

I will talk about the tools that Celery offers for task distribution and how
to monitor and manage the system using a Django web interface. This talk will
also focus on how we use Celery at Jamendo and our real solutions to some
common issues you may encounter when developing a back-office based on Celery.

The talk will cover the following topics:

  * A brief overview of Celery and the AMPQ protocol AMPQ protocol overview, Celery introduction: Celery, RabbitMQ code examples

  * The impact of Celery on the Jamendo work-flow; examples with real tasks. Here I will talk about the Jamendo back-office infrastructure and some of our common tasks. I will discuss the improvements made by introducing a new back-office system based on Celery. I will show some code snippets and go over some real scenarios.

  * Overview of the Django Celery admin interface and some Jamendo extensions. Let's talk about the Django-Celery interface that allows one to monitor or schedule tasks directly from the Django admin. I will explain which common additional features are necessary and how to add them.

  * Common "gotchas" we encountered while working with Celery and how we solved them.

  * Global task locks

  * Centralized logging: be able to read all the logs of all celery workers on different servers and filter them for real-time debugging

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mauro Rocco</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1117/playing-tasks-with-django-celery-0</guid><enclosure url="http://www.youtube.com/watch?v=mAXz2kbh_3U" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/mAXz2kbh_3U/hqdefault.jpg"></media:thumbnail></item><item><title>PL/Python -- Python inside the PostgreSQL RDBMS</title><link>http://www.pyvideo.org/video/1120/plpython-python-inside-the-postgresql-rdbms</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Peter Geoghegan - 20 June 2011 in "Track Ravioli"

</description><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1120/plpython-python-inside-the-postgresql-rdbms</guid><enclosure url="http://www.youtube.com/watch?v=PT-bvTXFk5Y" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/PT-bvTXFk5Y/hqdefault.jpg"></media:thumbnail></item><item><title>PostgreSQL - the database-sister of Python</title><link>http://www.pyvideo.org/video/1116/postgresql-the-database-sister-of-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Harald Armin Massa - 21 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
This talk is the updated and especially enhanced of the "Python and PostgreSQL
- a match made in heaven" talk of EP 2006, CERN, Switzerland. PostgreSQL and
Python share more then the first letter: their communities have great
similiarities; their development processes are really comparable; their
licenses and their openness to academics AND business (on a technical and
communitie perspective) are big pluses. We will have a look at those
similiarities and learn why PostgreSQL is really the database sister to
Python. There will be an overview of PostgreSQL, information of how to connect
PostgreSQL and Python; how PostgreSQL streaming replication works and what it
can do for you, how PL/Python helps to have Web 2.5 JSON storage and handling
right inside PostgreSQL. We will show that YESQL is also a valid answer to
many data storage qeuestions.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald Armin Massa</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1116/postgresql-the-database-sister-of-python</guid><enclosure url="http://www.youtube.com/watch?v=1YUFLLl8bGE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/1YUFLLl8bGE/hqdefault.jpg"></media:thumbnail></item><item><title>Precompiling and deploying Python to any Linux, Mac OS X or FreeBSD system</title><link>http://www.pyvideo.org/video/1115/precompiling-and-deploying-python-to-any-linux-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Peter Szabo - 23 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
If a Python application has lots of dependencies and requires specific
versions of some of its dependencies, then users can easily get bored or
frustrated installing the application. To make the installation faster and
have less side effects, application authors can create bundles which contain
the application, all its dependencies and possibly the Python interpreter.
This talk presents a way of creating bundles using StaticPython, and compares
it to bb-freeze. StaticPython is a single-file statically linked version of
Python for 32-bit Linux (i386), containing all standard and some extra Python
modules and C extensions.

Link to [slides](http://pts-mini-gpl.googlecode.com/svn/trunk/staticpython/doc
/slides_2011-06-23/pts_staticpython_2011-06-23.html)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Péter Szabó</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1115/precompiling-and-deploying-python-to-any-linux-0</guid><enclosure url="http://www.youtube.com/watch?v=KKkuu_A6ZhQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/KKkuu_A6ZhQ/hqdefault.jpg"></media:thumbnail></item><item><title>Pricing products using Python graphs and sets</title><link>http://www.pyvideo.org/video/1114/pricing-products-using-python-graphs-and-sets-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Rob Collins - 22 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
We will look at the limitations of available rule engines when it comes to
complex pricing rules. Rob has been part of a Python team writing a pricing
engine based on network graphs. We will show:

  * Why pricing is not easy
  * Rule engine anti-patterns, e.g. to change one price requires a week's development time, and has to be fitted into a release cycle
  * How to make pricing rules data driven, usable by the business
  * How the use of graphs and sets reduces the complexity

Rob is joined by David Layton of Grey Squirrel Consulting, who is a fellow
contractor working with Rob on the pricing project. He is an American
expatriate and Python developer, currently living and working in London. His
background is in scientific computing, CRMs and Business Intelligence.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rob Collins</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1114/pricing-products-using-python-graphs-and-sets-0</guid><enclosure url="http://www.youtube.com/watch?v=XzXvVqdL6yk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/XzXvVqdL6yk/hqdefault.jpg"></media:thumbnail></item><item><title>Programmazione MapReduce in Python con Pydoop</title><link>http://www.pyvideo.org/video/1184/programmazione-mapreduce-in-python-con-pydoop</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Simone Leo - 23 June 2011 in "Track Italiana Big Mac "


&lt;p&gt;Description&lt;/p&gt;
Hadoop è la principale implementazione open source di MapReduce, il paradigma
di calcolo distribuito su larga scala di Google. L'API nativa di Hadoop è in
Java e le opzioni built-in per la programmazione in Python - Streaming e
Jython - presentano diversi inconvenienti: la prima consente di accedere solo
a un piccolo sottoinsieme delle funzionalità di Hadoop, mentre la seconda ha
tutte le limitazioni di Jython rispetto a CPython.

[Pydoop](http://pydoop.sourceforge.net) è un'API per Hadoop che rende
disponibile buona parte delle funzionalità di Hadoop al programmatore Python,
consentendo lo sviluppo in CPython. I suoi moduli di base sono wrapper
Boost.Python per l'interfaccia C/C++ di Hadoop.

Il talk consiste in un tutorial su MapReduce/Hadoop e in una presentazione
dell'API Pydoop, con l'obiettivo principale di avvicinare le community di
Hadoop e Python. Può essere utile, anche se non strettamente necessaria, una
conoscenza di base della programmazione distribuita.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Leo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1184/programmazione-mapreduce-in-python-con-pydoop</guid><enclosure url="http://www.youtube.com/watch?v=iKqWk-yz8R8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/iKqWk-yz8R8/hqdefault.jpg"></media:thumbnail></item><item><title>PyPy in production</title><link>http://www.pyvideo.org/video/1113/pypy-in-production</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Antonio Cuni,Armin Rigo - 23 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
The PyPy project has recently gathered a lot of attention for its progress in
speeding up the Python language - it is the fastest Python interpreter, and
the most compatible and most stable 'alternative´ one. No longer merely a
research project, PyPy is now suitable for production use. We are working on
improvements on calling into C libraries and generally integrating with the
existing Python extensions ecosystem.

We will give an overview on how the tracing Just-in-Time compiler works in
PyPy. From there, we will then focus on what the PyPy project has achieved,
particularly in the past two years:

  * most Python benchmarks run much faster than with CPython or Psyco

  * the real-world PyPy compiler toolchain itself (200 KLocs) runs twice as fast

  * already supports 32 and 64bit x86 and is in the process of supporting ARM

  * full compatibility with CPython (more than Jython/IronPython)

  * full (and JIT-ed) ctypes support to call C libraries from Python

  * supports Stackless Python (in-progress)

  * new "cpyext" layer which integrates existing CPython C extensions

  * an experimental super-fast JIT-compilation of calls to C++ libraries

We want to reserve time for discussing potential future work like SWIG and/or
Cython compatibility and other areas brought up by the audience. There are
many interesting details that can be explored further; we will focus on the
points the audience is most interested in.

For more info:

  * [http://pypy.org/](http://pypy.org/)

  * Our blog: [http://morepypy.blogspot.com/](http://morepypy.blogspot.com/)

  * Eureka program: [http://www.eurostars-eureka.eu/](http://www.eurostars-eureka.eu/)

_Eurostars Eureka is our funding source since 2009. It is a cross-European
funding collaboration that targets small firms which produce research._

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni,Armin Rigo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1113/pypy-in-production</guid><enclosure url="http://www.youtube.com/watch?v=nTpte3_jNO0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/nTpte3_jNO0/hqdefault.jpg"></media:thumbnail></item><item><title>Python 103: Mmmm... Understanding Python's Memory Model, Mutability, and Methods</title><link>http://www.pyvideo.org/video/1112/python-103-mmmm-understanding-pythons-memor-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] wesley chun - 22 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
In Python 101, you learned basic Python syntax, what its flow control
mechanisms and basic data types are and how they work. You learned how to
write functions and developed executable Python scripts that actually work!
You probably also learned how to create files, how to open, read from or write
to them, and close them. Perhaps you've even learned a little bit of object-
oriented programming, developed a couple of Python classes, most with user-
defined methods, and have no problems creating instances to use in your
applications.

In Python 102 (or equivalent in experience), you explored further, using
default values and variable arguments for functions, discovered how to catch
exceptions and write handlers for them… perhaps you've even created your own
exceptions. You have found some useful Python standard library modules and
using them actively in your own applications. You've quite comfortable with
OOP, creating classes and using instances regularly in your programs. In fact,
you've been coding Python for 6 months to a couple of years now. You're much
more serious about Python now because you're no longer a "beginner." You've
even taken notice at the growing number of jobs requesting or requiring Python
skills.

As an aspiring Python developer, you are starting to be more aware of the
entire ecosystem around you, and think you may be ready for "prime-time" and
feel able to take on a full-time position as a Python programmer. However, if
you have experienced one or more of the below questions or problems, this talk
may be for you:

  * Throughout this time, you've experienced strange bugs in your code. In particular, you notice that things don't always behave the way you expect and have spent a good amount of time debugging various parts of your software that you thought were actually correct - you work around them but are disturbed and don't have the time nor committment to fully investigate.

  * You've created classes and objects just fine but wish that you could use some of Python's operators (like +, in, len(), etc.) with your objects, which feel like they're "2nd-class" citizens compared to the standard data types.

  * Do you know what functional evaluation strategy means? Have you been asked or considered whether Python is "call-by-value" or "call-by-reference"? It is important to you, and can you clearly explain your answer?

  * What does "mutability" mean? What is the difference between mutable and immutable objects? Which Python objects are mutable and which aren't?

  * Can you clearly explain both the output in the two code snippets below, and even more importantly, _why_ the output is the way it is?

SNIPPET A x = 42 y = x x += 1 print x print y

SNIPPET B x = [1, 2, 3] y = x x[0] = 4 print x print y

  * Have you seen odd behavior in container or collection objects like lists or dictionaries? For example, you may have copied those types of objects and discovered weird things happening to both the original and the copy, or that you seen something not quite right if you loop through it and remove items from it. 

This is what Python 103 is for… to fill in all the missing gaps, to answer all
the questions (including those above) that do not seem to have easy-to-find
answers on Google, but only if you have the desire to learn more about the
interpreter to take your Python skills to the next level.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wesley chun</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1112/python-103-mmmm-understanding-pythons-memor-0</guid><enclosure url="http://www.youtube.com/watch?v=34LcNUrFe30" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/34LcNUrFe30/hqdefault.jpg"></media:thumbnail></item><item><title>Python 3: the Next Generation (is here already)</title><link>http://www.pyvideo.org/video/1111/python-3-the-next-generation-is-here-already-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] wesley chun - 21 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
Python is currently at a crossroads: Python 2 has taken it from a quiet word-
of-mouth language to primetime, with many companies around the world using it
and an ever-increasing global marketshare of the programming world. But now
comes Python 3, the first version of the language that is not backwards
compatible with previous releases.

What does this mean? Are all my Python programs going to break? Will I have to
rewrite everything? How much time do I have? When is Python 2 going to be
EOL'd? Is the language undergoing a complete rewrite and will I even recognize
it? What are the changes between Python 2 and 3 anyway? Also, the next
generation is already here, as Python 3 is over two years old now. What has
been ported so far, and what is its current status? Are migration plans or
transition tools available? If I want to start learning Python, should I do
Python 2 or Python 3? Are all Python 2 books obsolete?

We will attempt to answer all of these questions and more. Join us!

OUTLINE/TOPICS

  * Python 2 vs. Python 3
  * Introduction to Python 3
  * Backwards Compatibility
  * Generational Changes
  * Key Differences
  * Role of Remaining Python 2.x releases
  * Transition &amp; Migration Plans &amp; Tools
  * Futures

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wesley chun</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1111/python-3-the-next-generation-is-here-already-0</guid><enclosure url="http://www.youtube.com/watch?v=ovVCnhwu9qQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/ovVCnhwu9qQ/hqdefault.jpg"></media:thumbnail></item><item><title>Python Design Patterns</title><link>http://www.pyvideo.org/video/1110/python-design-patterns</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Alex Martelli - 24 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
A completely misguided meme has long been going around: that Python doesn't
have, or need, any Design Patterns. This terrible meme may spring from not
realizing what the Gang Of Four state so plainly in their historical "Design
Patterns" book: which design patterns are useful DOES depend on the
programming language one targets - design is NOT independent of
implementation, as the epic-fail "Waterfall" Methodology Pattern would
suggest. What patterns apply to a design, depends to some extent on what
implementation technologies will be used to realize that design.

If you focus on some "classic DPs" that are basically workarounds for some
other language's lack of garbage collection, or for a clumsy static-typing
system, those may indeed be worthless for Python. But many other DPs are
perfectly useful and applicable, and Python's strengths as a language afford
riffing on them to develop highly Pythonic, powerful, productive variants.

In this talk, I analyze some of my favorite pattern families - e.g., Template
Method and its variants, Dependency Injection and its ilk, Callback and
friends - in a highly Pythonic context. Non-pattern Idioms, and Patterns that
aren't really Design Patterns but rather Architecture or Methodology ones,
make cameo appearances.

Goals: remove from your system any residue of the pernicious meme about Python
not having or needing design patterns. Prereqs: experience designing and
developing software; intermediate-level Python knowledge.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1110/python-design-patterns</guid><enclosure url="http://www.youtube.com/watch?v=bPJKYrZjq10" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/bPJKYrZjq10/hqdefault.jpg"></media:thumbnail></item><item><title>Python Enterprise: vento di libertà</title><link>http://www.pyvideo.org/video/1183/python-enterprise-vento-di-liberta</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Simone Federici - 23 June 2011 in "Track Italiana Big Mac "


&lt;p&gt;Description&lt;/p&gt;
Nell’enterprise la scalabilità verticale è ferma, l'HTTP Session è un dramma,
XML è considerato un bug, i DB vengono messi in discussione, JMS è saturo, SOA
un bluff. Parlerò di una diversa filosofia per le architetture Enterprise.
Python è dinamico, object oriented, offre un forte supporto all'integrazione
ed è fornito di una estesa libreria standard e, non da poco, può essere
imparato in pochi giorni. Molti programmatori Python possono confermare un
sostanziale aumento di produttività e ritengono che il linguaggio incoraggi
allo sviluppo di codice di qualità e manutenibilità superiori. In questo talk
parlerò quindi di produttività e qualità. Il talk è un chiaro mezzo per
diffondere python.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Federici</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1183/python-enterprise-vento-di-liberta</guid><enclosure url="http://www.youtube.com/watch?v=JETzbuanMds" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/JETzbuanMds/hqdefault.jpg"></media:thumbnail></item><item><title>Python for High Performance and Scientific Computing</title><link>http://www.pyvideo.org/video/1107/python-for-high-performance-and-scientific-comput</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Andreas Schreiber - 23 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
Python is an accepted high-level scripting language with a growing community
in academia and industry. It is used in a lot of scientific applications in
many different scientific fields and in more and more industries, for example,
in engineering or life science). In all fields, the use of Python for high-
performance and parallel computing is increasing. Several organizations and
companies are providing tools or support for Python development. This includes
libraries for scientific computing, parallel computing, and MPI. Python is
also used on many core architectures and GPUs, for which specific Python
interpreters are being developed. A related topic is the performance of the
various interpreter and compiler implementations for Python. The talk gives an
overview of Python’s use in HPC and Scientific Computing and gives information
on many topics, such as Python on massively parallel systems, GPU programming
with Python, scientific libraries in Python, and Python interpreter
performance issues. The talk will include examples for scientific codes and
applications from many domains.

[Slides](http://bit.ly/k94rC4)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1107/python-for-high-performance-and-scientific-comput</guid><enclosure url="http://www.youtube.com/watch?v=q3hAFI8iaqg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/q3hAFI8iaqg/hqdefault.jpg"></media:thumbnail></item><item><title>Python MapReduce Programming with Pydoop</title><link>http://www.pyvideo.org/video/1109/python-mapreduce-programming-with-pydoop</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Simone Leo - 24 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
Hadoop is the leading open source implementation of MapReduce, Google's large
scale distributed computing paradigm. Hadoop's native API is in Java, and its
built-in options for Python programming - Streaming and Jython - have several
drawbacks: the former allows to access only a small subset of Hadoop's
features, while the latter carries with it all of the limitations of Jython
with respect to CPython.

[Pydoop](http://pydoop.sourceforge.net) is an API for Hadoop that makes most
of its features available to Python programmers while allowing CPython
development. Its core consists of Boost.Python wrappers for Hadoop's C/C++
interface.

The talk consists of a MapReduce/Hadoop tutorial and a presentation of the
Pydoop API, with the main goal of bridging the gap between the Hadoop and
Python communities. A basic knowledge of distributed programming is helpful
but not strictly required.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Leo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1109/python-mapreduce-programming-with-pydoop</guid><enclosure url="http://www.youtube.com/watch?v=IyXOP7SJqKQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/IyXOP7SJqKQ/hqdefault.jpg"></media:thumbnail></item><item><title>Python Tips, Tricks, and Idioms</title><link>http://www.pyvideo.org/video/1108/python-tips-tricks-and-idioms</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Raymond Hettinger - 23 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Dozens of little insights into the language. A whirlwind tour of nifty tricks,
little known features, and common patterns.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1108/python-tips-tricks-and-idioms</guid><enclosure url="http://www.youtube.com/watch?v=JbNG3rVLJvA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/JbNG3rVLJvA/hqdefault.jpg"></media:thumbnail></item><item><title>Python(x,y): diving into scientific Python</title><link>http://www.pyvideo.org/video/1106/pythonxy-diving-into-scientific-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Vincent Noel - 22 June 2011 in "Training Pizza Margherita "


&lt;p&gt;Description&lt;/p&gt;
This training session will introduce the Python scientific stack to beginner
or intermediate-level Python programmers. The basics of scientific programming
with Python will be presented:

  * creation of arrays and structured arrays using numpy
  * fast, loopless manipulation of numpy arrays through fancy indexing and vectorized functions
  * convenient saving/loading of array variables using numpy
  * improved interactive use through ipython
  * data analysis using various scipy modules (signal analysis, image classification, etc)
  * plotting large time series, histograms, scatterplots, images etc. using matplotlib
  * saving/loading large datasets in structured scientific formats such as netCDF, HDF (depending on interest)

These concepts will be used in coding exercises, in the programming
environnement provided by the Python(x,y) distribution, which is freely
downloadable and includes recent versions of Python, numpy and matplotlib. The
Python(x,y) distribution runs on Windows, which will be the OS of choice for
this session. You should still be able to follow the examples in other Python
distributions, e.g. EPD.

The entire talk (PDF), code samples and data files can be downloaded from the
following [archive](http://www.lmd.polytechnique.fr/~noel/EP2011/DivingIntoSci
entificPython.zip)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vincent Noel</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1106/pythonxy-diving-into-scientific-python</guid><enclosure url="http://www.youtube.com/watch?v=fVc1ruuixts" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/fVc1ruuixts/hqdefault.jpg"></media:thumbnail></item><item><title>Realizzare un emulatore di videogiochi</title><link>http://www.pyvideo.org/video/1182/realizzare-un-emulatore-di-videogiochi</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Lorenzo Mancini - 22 June 2011 in "Track Italiana Big Mac "


&lt;p&gt;Description&lt;/p&gt;
Lo sviluppo di un emulatore di videogiochi è tra le cose più divertenti che un
programmatore può fare davanti ad un monitor.

Durante questo talk mostrerò come emulare un sistema relativamente semplice,
il Chip-8, realizzando tutto l'emulatore in Python ed appoggiandomi solo a
pygame come libreria grafica.

Al termine del talk avrete imparato quali sono i concetti base necessari per
scrivere un emulatore, e non vedrete l'ora di realizzarne uno per il vostro
sistema preferito.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lorenzo Mancini</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1182/realizzare-un-emulatore-di-videogiochi</guid><enclosure url="http://www.youtube.com/watch?v=XA80glyC9kE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/XA80glyC9kE/hqdefault.jpg"></media:thumbnail></item><item><title>Refactoring PyChart</title><link>http://www.pyvideo.org/video/1105/refactoring-pychart-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Jacob Hallen - 23 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
PyChart is a very nice program for producing print quality graphs. However, it
came equipped with a rather strange API, where every class was called T. It
was also using the global namespace in strange and disturbing ways.
Furthermore, it mixed multiple distinct tasks in some classes.

I will show how I went about refactoring the package in order to make a nice
and clean API. This talk is focused on teaching refactoring methodology to
beginner and intermediate level programmers. It will also give a brief
introduction to how to make beautiful graphs with PyChart.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Hallén</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1105/refactoring-pychart-0</guid><enclosure url="http://www.youtube.com/watch?v=hdytprStoXc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/hdytprStoXc/hqdefault.jpg"></media:thumbnail></item><item><title>Relate or !Relate</title><link>http://www.pyvideo.org/video/1104/relate-or-relate</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mark Ramm-Christensen - 21 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
To Relate or Not to Relate, that is the question raised by the NoSQL movement.
There is a lot of buzz about Couch, Casandra, MongoDB, and other non
relational databases, and at the same time there are decades of hard work
that's gone into optimizing databases built around the relational model.

I would actually argue that there is no such thing as a NoSQL database - there
are a variety of compelling options to relational database - each of which
have different features and different performance characteristics. So no one-
sized fits all comparison will do. So, I'll try to outline a general taxonomy
for persistence mechanisms, and then proceed to comparing relational DB's to
their new friends in practice.

The talk will contain quite a few stories from the trenches with CouchDB,
MongoDB, MySQL, Postgres, Tokyo Cabinet, ZODB, and other databases, and will
help you think about the data storage needs of your applications in new ways.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Ramm-Christensen</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1104/relate-or-relate</guid><enclosure url="http://www.youtube.com/watch?v=rZCANK4by0Q" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/rZCANK4by0Q/hqdefault.jpg"></media:thumbnail></item><item><title>Rubrica indirizzi all'ennesima potenza</title><link>http://www.pyvideo.org/video/1181/rubrica-indirizzi-allennesima-potenza</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Davide Corio - 23 June 2011 in "Track Italiana Big Mac "


&lt;p&gt;Description&lt;/p&gt;
Avete presente il classico, noioso, banale esempio di rubrica indirizzi in
Python? Si? Quindi, diamo un'occhiata ad un nuovissimo, complicato ed
entusiasmante modo di tenere la nostra rubrica e il nostro dispositivo mobile
sincronizzati. Mischieremo differenti tecnologie come Zope, OpenERP, Funambol,
XML-RPC e Json. Tutto per rendere la vostra vita più elettrizzante!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Davide Corio</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1181/rubrica-indirizzi-allennesima-potenza</guid><enclosure url="http://www.youtube.com/watch?v=5IYPF0YY6jo" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/5IYPF0YY6jo/hqdefault.jpg"></media:thumbnail></item><item><title>Saving Gaia with jQuery Mobile and GeoDjango</title><link>http://www.pyvideo.org/video/1103/saving-gaia-with-jquery-mobile-and-geodjango</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Calvin Cheng - 22 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
We had the privilege of working on a mobile web application for ETH Zurich,
funded by ETH North-South Centre, using Django/Postgis, jQuery mobile and
Openlayers technology.

In this talk, I would like to share what we have learnt technically and the
experiences and fun we had with polygon creation on a map and saving polygon
vertices and related data into our spatial database via geodjango.

This mobile web app is developed based on research by Dr Koh of ETH Zurich,
specializing on Matrix-calibrated and edge-corrected species-area models that
allow users to evaluate the biodiversity consequence and trade-offs of land-
use decisions. The development and description of these models were published
in Conserv. Biol. 24, 994 and J. Appl. Ecol. 47, 1063.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Cheng</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1103/saving-gaia-with-jquery-mobile-and-geodjango</guid><enclosure url="http://www.youtube.com/watch?v=xE2-QKe9rGc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/xE2-QKe9rGc/hqdefault.jpg"></media:thumbnail></item><item><title>Scraping Techniques to Extract Advertisements from Web Pages</title><link>http://www.pyvideo.org/video/1102/scraping-techniques-to-extract-advertisements-fr-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mirko Urru,Stefano Cotta Ramusino - 24 June 2011 in "Track
Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Online Advertising is an emerging research field, at the intersection of
Information Retrieval, Machine Learning, Optimization, and Microeconomics. Its
main goal is to choose the right ads to present to a user engaged in a given
task, such as Sponsored Search Advertising or Contextual Advertising. The
former puts ads on the page returned from a Web search engine following a
query. The latter puts ads within the content of a generic, third party, Web
page. The ads themselves are selected and served by automated systems based on
the content displayed to the user.

Web scraping is the set of techniques used to automatically get some
information from a website instead of manually copying it. In particular,
we're interested in studying and adopting scraping techniques for: i.
accessing tags as object members ii. finding out tags whose name, contents or
attributes match selection criteria iii. accessing tag attributes by using a
dictionary-like syntax.

In this talk, we focus on the adoption of scraping techniques in the
contextual advertising field. In particular, we present a system aimed at
finding the most relevant ads for a generic web page p. Starting from p, the
system selects a set of its inlinks (i.e., the pages that link p) and extracts
the ads contained into them. Selection is performed querying the Google search
engine, whereas extraction is made by using suitable scraping techniques.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mirko Urru,Stefano Cotta Ramusino</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1102/scraping-techniques-to-extract-advertisements-fr-0</guid><enclosure url="http://www.youtube.com/watch?v=cCKGqKTwfqI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/cCKGqKTwfqI/hqdefault.jpg"></media:thumbnail></item><item><title>Scrivere un tool parallelo e distribuito per backup multi-terabyte</title><link>http://www.pyvideo.org/video/1180/scrivere-un-tool-parallelo-e-distribuito-per-back</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Marco Nenciarini - 23 June 2011 in "Track Italiana Big Mac "


&lt;p&gt;Description&lt;/p&gt;
Una trattazione sull'uso di Python per implementare un tool per il backup
giornaliero di un data warehouse di oltre 50 terabyte, basato sulla tecnologia
Greenplum Database.

Questo intervento racconta la nostra esperienza, dalla raccolta dei requisiti
utente alla prima release del tool, descrivendo i principali problemi
incontrati e i moduli Python usati per risolverli, usando metodologie agili
per lo sviluppo.

Sebbene l'applicazione non sia disponibile come progetto open-source, questo
intervento fornisce degli spunti di valore a proposito dello sviluppo di
applicazioni distribuite e parallele usando Python.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Nenciarini</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1180/scrivere-un-tool-parallelo-e-distribuito-per-back</guid><enclosure url="http://www.youtube.com/watch?v=t4eycS8ayFA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/t4eycS8ayFA/hqdefault.jpg"></media:thumbnail></item><item><title>Sfrutta la potenza della GPU con PyCUDA (e compagni)</title><link>http://www.pyvideo.org/video/1179/sfrutta-la-potenza-della-gpu-con-pycuda-e-compag</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Stefano Brilli - 22 June 2011 in "Track Italiana Big Mac "


&lt;p&gt;Description&lt;/p&gt;
CUDA è una tecnologia che permette di sfruttare la potenza di calcolo delle
moderne schede video prodotte da NVIDIA. In questo talk, dopo una breve
introduzione all'architettura della GPU, si vedrà come CUDA entra all'interno
di Python attraverso librerie come PyCUDA e non solo…

Mediante alcuni esempi si metteranno in luce i concetti e le pratiche
fondamentali per una buona programmazione della GPU.

Il talk è rivolto a chiunque voglia conoscere come sfruttare questa tecnologia
all'interno di Python, i casi in cui è conveniente utilizzarla, le pratiche da
adottare e le pratiche da non adottare per trarre il massimo dalla propria
GPU.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Brilli</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1179/sfrutta-la-potenza-della-gpu-con-pycuda-e-compag</guid><enclosure url="http://www.youtube.com/watch?v=5XjxTBgETfU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/5XjxTBgETfU/hqdefault.jpg"></media:thumbnail></item><item><title>Snakes on a cloud: the OpenStack project</title><link>http://www.pyvideo.org/video/1101/snakes-on-a-cloud-the-openstack-project-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Thierry Carrez - 23 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
OpenStack is an innovative open source project written in Python, backed by
Rackspace Hosting and NASA, building a massively-scalable and reliable cloud
computing platform.

The first part of this talk will clarify the place of OpenStack in the general
"cloud" landscape and explain why a fully open cloud infrastructure stack is
necessary to avoid vendor lock-in. We'll then focus on the OpenStack project
goals, its developer community, its open design and release processes, and the
developer tools it chose.

The second part of the talk will present into more technical details the
different components of OpenStack: Nova (compute) and Swift (storage),
including the Python libraries that are used (libvirt, SQLAlchemy, eventlet…).
A Q&amp;A session at the end of the talk will give the audience a chance to clear
any remaining dark area.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thierry Carrez</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1101/snakes-on-a-cloud-the-openstack-project-0</guid><enclosure url="http://www.youtube.com/watch?v=-rmctl-VB1Y" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/-rmctl-VB1Y/hqdefault.jpg"></media:thumbnail></item><item><title>Social Network Analysis in Python</title><link>http://www.pyvideo.org/video/1100/social-network-analysis-in-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Enrico Franchi - 23 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
Network Analysis has gained a huge recognition since the widespread adoption
of on-line social networking systems. It is a cross-disciplinary subject with
important contributions from researchers of different areas such as physics,
sociology, maths and computer science.

However, Network Analysis is also a useful tool for the working programmer.
The basic techniques which will be introduced in this talk can be used, for
example, both to i) test the robustness and resilience to damage of a
technological network and ii) understand the structure of a social network,
which can in turn lead to insight on trends and preferences gathering
information from modern on-line social networking systems.

Along with the concepts, working Python code is presented, both using existing
network analysis Python tools and numeric packages. The focus is mainly placed
on code, which will be shown and discussed together with the formal theory.

Basic maths skills and basic knowledge of the Python programming language are
the only suggested prerequisites.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Enrico Franchi</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1100/social-network-analysis-in-python</guid><enclosure url="http://www.youtube.com/watch?v=QYadUMKQI3Q" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/QYadUMKQI3Q/hqdefault.jpg"></media:thumbnail></item><item><title>Source code processing with Python</title><link>http://www.pyvideo.org/video/1099/source-code-processing-with-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Kay Schluehr - 24 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
Folklore says that having a problem and trying to solve it with regular
expressions gives you two problems. However not applying regular expressions
to advanced textual search'n replace doesn't solve your problem either. One
step above you have large portions of recursively structured text aka "source
code" and using context free grammars and tools supporting them gives you two
problems but not using them also doesn't solve your original problem. Maybe
you get uneasy at that point because what I say implies parsers and computing
science and what not and you still wake up in the night believing that you
have to learn automata theory but you are lucky it was just a nightmare.
Otherwise you are laughing about the little diatribe against regexps and use
them without much deliberation, verifying your SQL input, mining source code
and do all the other things they are not made for.

In my talk I'm addressing daily use of grammars outside of the scope of
compiler implementation or natural language processing. My talk covers:

  * Search &amp; Replace using grammars

  * CodeTemplates for source code transformation

  * Generative grammars for expression generation

I'm touching this from the lightweight, "pythonic" angle and you might wonder
why not everyone uses those techniques already for decades in their daily
work. I can't answer this, I wonder about this too.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kay Schluehr</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1099/source-code-processing-with-python</guid><enclosure url="http://www.youtube.com/watch?v=tjF5jLD31kQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/tjF5jLD31kQ/hqdefault.jpg"></media:thumbnail></item><item><title>Spatial data and GeoDjango</title><link>http://www.pyvideo.org/video/1098/spatial-data-and-geodjango</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Bruno Renie - 21 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
GeoDjango is the "world-class geographic web framework" everyone has probably
heard of. The purpose of this talk, targeted at people familiar with Django
itself, is to introduce in more details the capabilities of this framework.

After learning the basics of Geographic Information Systems, we will see:

  * how to get started with a GeoDjango installation,
  * how to import, store and query spatial data,
  * how to geo-enable your forms to allow user-generated spatial data,
  * how to serialize and display your data using the different formats and mapping frameworks such as OpenLayers and Polymaps.

During this talk we will be building a simple GeoDjango application to
illustrate the different concepts introduced.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruno Renié</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1098/spatial-data-and-geodjango</guid><enclosure url="http://www.youtube.com/watch?v=wWzc-gn8IOU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/wWzc-gn8IOU/hqdefault.jpg"></media:thumbnail></item><item><title>Spotify and Python: love at first sight</title><link>http://www.pyvideo.org/video/1097/spotify-and-python-love-at-first-sight</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Jon Åslund - 20 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
This is a story about how Spotify started, how we evolved, where we are today
and how Python has always been a big part of our success. Where do we use it?
Where do we not use it? Learn about the Unix way and the Debian way of
maintaining a healthy love for Python, while two-timing with other languages
such as Java and C++.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jon Åslund</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1097/spotify-and-python-love-at-first-sight</guid><enclosure url="http://www.youtube.com/watch?v=GZ9DzDJCe90" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/GZ9DzDJCe90/hqdefault.jpg"></media:thumbnail></item><item><title>Spotify: Horizontal scalability for great success</title><link>http://www.pyvideo.org/video/1096/spotify-horizontal-scalability-for-great-success</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Nick Barkas - 22 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
If you run on CPython, it's not possible to get a single-process,
multithreaded Python program to use more than one CPU core at a time because
of the Global Interpreter Lock (GIL). A common way of dealing with this is to
run one instance of a Python program for each core a machine has and spread
the load amongst those processes. This forces developers to write simple,
stateless programs that naturally scale out to many many servers when needed,
while also not having to think about things like locking and thread
scheduling.

I'll discuss some tools and methods Spotify's backend uses for managing
multiple identical server processes as well as load balancing with DNS, proxy
servers, and using hashing to send repeated requests to the same process. I
will also talk about the difficulties that arise when you really need to share
data or state between processes, and how they can be dealt with.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Barkas</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1096/spotify-horizontal-scalability-for-great-success</guid><enclosure url="http://www.youtube.com/watch?v=BBAfIYpDMX4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/BBAfIYpDMX4/hqdefault.jpg"></media:thumbnail></item><item><title>Sqlkit: empowering database access</title><link>http://www.pyvideo.org/video/1095/sqlkit-empowering-database-access-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Alessandro Dentella - 23 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
It's very easy to access databases with Python, and there are many ORMs
allowing a high level of abstraction. Still, it's a long road from there to
interactive handling of data, even for very simple tasks.

Sqlkit tries to act as a bridge, offering some mega-widgets that allow you to
build GUI applications or directly access data using the 'sqledit'
application, shipped with sqlkit; sqlkit is built with PyGTK and SQLAlchemy.

This presentation covers some of the most powerful features of sqlkit, and
shows how easy it is to build small programs for personal use, as well as rich
and complex applications. It primarily focuses on two points: how easy it is
to create data forms (eventually with one2many or many2many, thanks to a
original definition of layouts), and the template system based on OpenOffice
which allows easy report creation.

This presentation shows how sqlkit can be used both as application development
framework and as a tool to help us while developing other applications (e.g.:
Django, OpenERP,… ).

To deliver a gradual presentation, we'll use the configuration system of
sqledit, starting from a minimal configuration (a single URL) we'll add
elements to that until we'll have a full application.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Dentella</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1095/sqlkit-empowering-database-access-0</guid><enclosure url="http://www.youtube.com/watch?v=7oWykWu_5z4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/7oWykWu_5z4/hqdefault.jpg"></media:thumbnail></item><item><title>sqlmap - security development in Python</title><link>http://www.pyvideo.org/video/1084/sqlmap-security-development-in-python-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Miroslav Stampar - 23 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
The "sqlmap" is one of the largest, widely used and most active Python
projects in the IT security community (more than 2000 commits in one year
period with community of over 100 active testers). It combines it's
developers' strong security knowledge together with analytical, mathematical
and Python development skills to provide IT professionals with vibrant
features.

Talk would be consisted of several parts: short introduction to project and
developers, developing and testing environment, programming cycle, program's
workflow, technologies used, common pitfalls and how we've circumvent them,
usage of mathematical models, optimizations, project's future goals.

The significant part of this talk would be the immediate insight into the
developing process of probably the world's most advanced open-source Python IT
security project today.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miroslav Stampar</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1084/sqlmap-security-development-in-python-0</guid><enclosure url="http://www.youtube.com/watch?v=1E4GPmuLs9k" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/1E4GPmuLs9k/hqdefault.jpg"></media:thumbnail></item><item><title>The Art of Subclassing</title><link>http://www.pyvideo.org/video/1094/the-art-of-subclassing-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Raymond Hettinger - 24 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
All problems have simple, easy-to-understand, logical wrong answers.
Subclassing in Python is no exception. Avoid the common pitfalls and learn
everything you need to know about how subclass in Python.

  * Overriding and extending

  * Calling your parents

  * The ellipse / circle problem - what does a subclass mean?

  * Liskov Substitution Principle

  * Open Closed Principle

  * The facts of life when subclassing builtin types

  * How to Implement Cooperative Multiple Inheritance

  * A example of perfect and simple python diamond

  * Beware the Concrete C API

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1094/the-art-of-subclassing-0</guid><enclosure url="http://www.youtube.com/watch?v=yrboy25WKGo" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/yrboy25WKGo/hqdefault.jpg"></media:thumbnail></item><item><title>The development process of Python</title><link>http://www.pyvideo.org/video/1093/the-development-process-of-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Ezio Melotti - 24 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
Python is an open source language, where everyone can contribute, and thanks
to Mercurial now it's even easier. With this talk I want to unveil what
happens "behind the scenes" of CPython and how you can get involved and be
part of the open source community that allows Python to be one of the most
popular programming languages.

I will explain:

  * what is the workflow of the CPython development;

  * how to get a clone of Python;

  * how to use Mercurial to do all the most common operations;

  * what is the structure of the main CPython repository;

  * what other are repositories are used;

  * how to use the bug tracker to report and find bugs;

  * how to use remote Mercurial repos to contribute code;

  * what tools are used;

  * how to get in touch with the core developers;

  * what are the plans for the future.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezio Melotti</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1093/the-development-process-of-python</guid><enclosure url="http://www.youtube.com/watch?v=JuH4ZpoZBYM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/JuH4ZpoZBYM/hqdefault.jpg"></media:thumbnail></item><item><title>The Myth of the Genius Programmer</title><link>http://www.pyvideo.org/video/1178/the-myth-of-the-genius-programmer</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Brian Fitzpatrick - 23 June 2011 in "Track Italiana Big Mac
"


&lt;p&gt;Description&lt;/p&gt;
A pervasive elitism hovers in the background of collaborative software
development: everyone secretly wants to be seen as a genius. I'll cover how to
avoid this trap and gracefully exchange personal ego for personal growth and
super-charged collaboration. I'll also examine how software tools affect
social behaviors, and how to successfully manage the growth of new ideas.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Fitzpatrick</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1178/the-myth-of-the-genius-programmer</guid><enclosure url="http://www.youtube.com/watch?v=IY96mgfZ_TM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/IY96mgfZ_TM/hqdefault.jpg"></media:thumbnail></item><item><title>The political implications of having fun (while programming open source)</title><link>http://www.pyvideo.org/video/1092/the-political-implications-of-having-fun-while-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Benno Luthiger - 23 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
What are the implications for the society if people enjoy their work, because
this work is perceived as rewarding by itself? It is this question that
occupies me since I have finished my Ph.D. research about the motivation of
open source programmers. In my research, I have been able to show that fun is
an important driver for open source programmers. Moreover, fun plays an
important role not only for hobbyists, but for developers who are paid for
their work too (open or closed source).

These findings contrast with the traditional efforts of leftist parties and
labor unions. For those political organizations, labor is perceived as
compulsion and exploitation and, therefore, people have to be liberated from
labor. The resulting political praxis is to send people into retirement as
soon as possible and, on the other hand, to make the life for unemployed
people carefree.

Is the software developers‘ world a little Shangri-La, apart from the real
world, delineated by the leftist parties, or is the open source model
generalizable? What happens with the values generated through the labor if the
work as such is rewarding? The open source mode of production is part of our
modern reality and in my presentation I would like to consider this big
reality from the perspective of open source.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benno Luthiger</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1092/the-political-implications-of-having-fun-while-0</guid><enclosure url="http://www.youtube.com/watch?v=B5V7fWST3H0" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/B5V7fWST3H0/hqdefault.jpg"></media:thumbnail></item><item><title>Using Storm to work with SQL databases</title><link>http://www.pyvideo.org/video/1091/using-storm-to-work-with-sql-databases</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Jamu Kakar - 24 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Storm is an object relational mapper for SQL databases, with builtin support
for PostgreSQL, MySQL and SQLite. It was designed and implemented as part of
the Landscape project at Canonical in mid-2006 and was open sourced in
mid-2007. Since then it's been used in a variety of projects, in production
for many years, and has received numerous enhancements and bug fixes. The
features of Storm will be explained with a series of examples and with
discussion about what's happening in each one. In addition to describing the
concepts and features that a developer needs to understand, a variety of best
practices will be shared, to help developers make the best use of Storm.

The examples in this talk assume that participants have a good understanding
of SQL, transactions, relationships between tables and other common database
concepts.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jamu Kakar</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1091/using-storm-to-work-with-sql-databases</guid><enclosure url="http://www.youtube.com/watch?v=JC5QqVWA8Vo" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/JC5QqVWA8Vo/hqdefault.jpg"></media:thumbnail></item><item><title>uWSGI, il coltellino svizzero (di MacGyver) del deploy</title><link>http://www.pyvideo.org/video/1176/uwsgi-il-coltellino-svizzero-di-macgyver-del-d</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Roberto De Ioris - 21 June 2011 in "Track Italiana Big Mac"


&lt;p&gt;Description&lt;/p&gt;
La prima parte del talk introdurra' la storia di uWSGI, dall'idea iniziale
alla messa in produzione dei primi lavori, fino alla sua inclusione nei
progetti Cherokee e Nginx.

Seguira' una serie di esempi di deploy in ambienti ostili (a livello di
sicurezza, non faremo deploy nella jungla) o con risorse fortemente limitate
fino all'utilizzo delle funzionalita' integrate per il clustering.

Il talk si rivolge a tutti gli sviluppatori di applicazioni web che sono alla
ricerca di un ambiente robusto e veloce per i propri lavori, o a chi gia'
utilizza uWSGI e vuole conoscere qualcuna delle nuove funzionalita' introdotte
nel ramo di sviluppo.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto De Ioris</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1176/uwsgi-il-coltellino-svizzero-di-macgyver-del-d</guid><enclosure url="http://www.youtube.com/watch?v=E5POYrUawW8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/E5POYrUawW8/hqdefault.jpg"></media:thumbnail></item><item><title>Visualization and Analysis of Large Scale Datasets with Python</title><link>http://www.pyvideo.org/video/1090/visualization-and-analysis-of-large-scale-datase-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Christine Moran - 23 June 2011 in "Training Pizza Margherita
"


&lt;p&gt;Description&lt;/p&gt;
In this talk I will introduce ParaView, an open source application developed
by researchers around the world for parallel visualization and analysis of
large scale datasets, which in can be used to visualize and analyze terabytes
of data in real time. ParaView’s core algorithms are implemented in C/C++ but
all its major functionality can be scripted from python with ease. I’ll give a
short introduction to AstroViz, a parallel visualization tool for
astrophysical simulations implemented as an opensource plugin to ParaView,
which I have been lead developer on since 2009. The focus of the talk will be
on driving ParaView from within python however, both general out of the box
use and customized extensions.

I also have access to several parallel supercomputers so if there’s a huge
dataset we as a crowd would like to tackle visualizing during the course of
the week that would be fun project. The end of the talk will be a short
brainstorm of cool applications of analysis and visualization of large scale
datasets.

[http://www.paraview.org/](http://www.paraview.org/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Moran</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1090/visualization-and-analysis-of-large-scale-datase-0</guid><enclosure url="http://www.youtube.com/watch?v=4fHnMecFIyw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/4fHnMecFIyw/hqdefault.jpg"></media:thumbnail></item><item><title>What is Google App Engine?</title><link>http://www.pyvideo.org/video/1089/what-is-google-app-engine-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] wesley chun - 23 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
Google App Engine is a unique hosting platform that lets you build
applications and run them in Google's data centers using the massive global
infrastructure built to run the Internet's most powerful company. App Engine
offers a development environment that uses familiar technologies (Java and
Python) and provides a powerful and robust set of APIs to users while
maintaining security and independence from other apps running in the cloud. It
is always free to get started so you can try it out with no risk, and if you
need additional computing resources, you can purchase additional computing
resources beyond the free quota limits. (If you enable billing and trust us
with your credit card, we will extend your free quotas even further; you won't
get charged until you exceed those _extended_ quotas.) Scale your application
to millions of users and pay only for what you use at competitive market
pricing.

In this session, we provide an update of the newest features found in the most
recent releases of the App Engine platform. We also share some suggestions for
best practices to existing App Engine developers.

Beginners to the App Engine platform will be interested in the introductory
workshop which may be offered (see description below).

Google App Engine workshop

In this tutorial, we'll give you a comprehensive introduction to the platform
in two/three components:

  * 1-hour Introduction to Cloud computing and Google App Engine seminar
  * 3-hour App Engine hands-on workshop/codelab

In the first hour, we review Cloud Computing as an industry and where Google
App Engine fits into the picture. Specifically, we discuss App Engine as a
PaaS solution because of the inherent challenges of building web and other
applications. We'll outline the architecture of App Engine, what it's major
components are, introduce its features and APIs, discuss the service and how
it works (including information on the free quotas), present some information
about current users and usage, including integration with Google Apps, and
finally, give an overview of its enterprise edition called Google App Engine
for Business.

After the approximately one-hour lecture, we'll show you how to create
applications that run on App Engine by building a simple but real web
application from the ground up via a hands-on coding laboratory. Although
based on the online tutorial, this codelab goes up and beyond what's in the
documentation: you will get a more detailed step-by-step instructions to
replicate that example as well as have the opportunity to extend your
application with some of the newer APIs that come with App Engine. The codelab
will cover the Users service, non-relational Datastore, and Memcache APIs.
Time-permitting, we'll also discuss some of the newest features found in
recent App Engine releases.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wesley chun</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1089/what-is-google-app-engine-0</guid><enclosure url="http://www.youtube.com/watch?v=tT7nNx6ahhA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/tT7nNx6ahhA/hqdefault.jpg"></media:thumbnail></item><item><title>What makes Python so AWESOME</title><link>http://www.pyvideo.org/video/1088/what-makes-python-so-awesome-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Raymond Hettinger - 20 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
In a world of many programming languages, the popularity of Python continues
to grow without bound. We examine what makes it special and how it influences
the way we program:

  * what gives python its texture and feel
  * what features support rapid development
  * where does the readability come from
  * what features support economy of expression
  * look at the mix of lightweight tools and industrial grade tools
  * how easy is it to learn python? how hard is it to master
  * what can python do that other languages can't
  * what is the role of the python community
  * why does the license matter
  * does python just have zen or is there a python attitude?

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1088/what-makes-python-so-awesome-0</guid><enclosure url="http://www.youtube.com/watch?v=U1r2nsd5wsQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/U1r2nsd5wsQ/hqdefault.jpg"></media:thumbnail></item><item><title>Writing Books using Python &amp; Open Source Software</title><link>http://www.pyvideo.org/video/1087/writing-books-using-python-open-source-software</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] wesley chun - 20 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
All of us are familiar with using open source tools to develop software
applications with, but instead of writing code, it is also possible to create
the manuscript of a book in very much the same way. These days, authors have
many choices in terms of the tools which are available to aid them in writing
a book. Gone are the times when the only option is using a proprietary word
processor, so why not try it using open source tools? It's especially
attractive to those who develop software using open source tools as well those
who are writing books about open source tools. Both code and the written word
are created in plain text files. These files are easily archived using some
version control system. They can be shared easily via e-mail and can also be
backed up in the same manner. In the end, the final product is shipped to the
customer: in the case of software, it's distribution via CD or DVD, or perhaps
a release for installation on a server, and for a book, it's delivering a
manuscript to the publisher, perhaps in a format such as HTML or PDF®.

Upon some reflection, writing a book is, in many ways, similar to writing an
application: you create text or code which is saved to a file (or files-
typically one but could be more) file in some format, proprietary or
otherwise. Additions, changes, or deletions are made to the file(s), which is
then updated when the file is (re)saved. Backups need to be made, some
versioning may be required to keep track of multiple files during the course
of development, and finally, the resulting file(s) have to be delivered, as
described above. Because of all the similarities described, we assert that it
is possible to use a development environment utilizing Python and other open
source tools to not only write application with, but also be able to create
the entire manuscript for a book as well! While this entire concept should not
really be mind-blowing, it does represent a trend seemingly growing in
popularity in the open source world.

In particular, we highlight the following requirements that are necessary when
creating a manuscript, especially with co-authors:

  * Text Formatting
  * Editing
  * Versioning and Backups
  * Automated Testing of Code
  * HTML/PDF® Generation
  * Author Communication

In this talk, we highlight one particular case study, the development of
Addison Wesley's 2009 publication, "Python Web Development with Django", as
well as provide some insight into other projects created using similar tools.
Open source software has radically affected how applications are built today,
and this phenomenon has the ability to affect the book publishing world in the
same way.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wesley chun</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1087/writing-books-using-python-open-source-software</guid><enclosure url="http://www.youtube.com/watch?v=1QTMeb9m_lE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/1QTMeb9m_lE/hqdefault.jpg"></media:thumbnail></item><item><title>5 Years of Bad Ideas</title><link>http://www.pyvideo.org/video/1170/5-years-of-bad-ideas-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Armin Ronacher - 20 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
What was my motivation for working with Python after two years of PHP? There
is so much you can do. Functions are objects you can pass around, you can
decompile functions to see how they work internally, you can alias a bound
method to a global function and it will just work. You can change import
semantics, override the method resolution order, you can write metaclasses,
you can hook into the CPython interpreter API and much more.

Five years later I came to the conclusion that this is really not what Python
is about and that a lot of what I did was interesting but not necessarily a
good idea. This talk is a 45 minute recompilation of things I really shouldn't
have done in the first place. Expect a bunch of neat and interesting hacks
that showcase the possibilities of the language.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Armin Ronacher</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1170/5-years-of-bad-ideas-0</guid><enclosure url="http://www.youtube.com/watch?v=bpjHa0G9X5w" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/bpjHa0G9X5w/hqdefault.jpg"></media:thumbnail></item><item><title>Advanced Pickling with Stackless Python and sPickle</title><link>http://www.pyvideo.org/video/1166/advanced-pickling-with-stackless-python-and-spick</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Anselm Kruis - 24 June 2011 in "Track Tagliatelle "


&lt;p&gt;Description&lt;/p&gt;
Stackless Python supports pickling of a wider range of types than conventional
C-Python, including stack frames and code objects. On this basis it is
possible to extend further the pickle.Pickler class in order to serialise
classes, modules, packages up to certain limits. The [sPickle
package](http://pypi.python.org/pypi/sPickle) provides such an extended
Pickler. The code was developed as part of a commercial project and recently
released as free software by science + computing ag. Currently it requires
Stackless Python 2.7.

In my presentation, I'll first demonstrate some applications of the sPickle
package including serialisation of modules and executing parts of a program on
a remote computer using RPyC and Paramiko.

In the second part of my speech, I'll give some insight in the internal
operations of sPickle and the lessons learned during its development.
Extending the Pickler showed to be like opening a can of worms. You have take
care of many odds and ends to get it right. I'll point out some weak points in
the implementation of the conventional pickling code and I'll also show the
limits of the current sPickle implementation.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anselm Kruis</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1166/advanced-pickling-with-stackless-python-and-spick</guid><enclosure url="http://www.youtube.com/watch?v=rwhZ4joMLsI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/rwhZ4joMLsI/hqdefault.jpg"></media:thumbnail></item><item><title>Advanced Python</title><link>http://www.pyvideo.org/video/1165/advanced-python-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Raymond Hettinger - 21 June 2011 in "Training Pizza
Margherita"


&lt;p&gt;Description&lt;/p&gt;
This tutorial will work through a series of real-world examples, showing how
an understanding of the tools built into the Python interpreter or included in
the standard library can be combined to solve difficult problems clearly and
Pythonically. We will also discuss when and how to reach beyond the standard
library when needed to address difficult algorithmic and optimization
problems.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1165/advanced-python-0</guid><enclosure url="http://www.youtube.com/watch?v=nR9dlkn9wk4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/nR9dlkn9wk4/hqdefault.jpg"></media:thumbnail></item><item><title>An iPhone-Python love affair: Building APIs for mobile</title><link>http://www.pyvideo.org/video/1164/an-iphone-python-love-affair-building-apis-for-m</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Anna Callahan,Nate Aune - 24 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Mobile apps are the hot item of the day - and the best mobile apps are backed
by a great website. Python web developer Nate Aune and iPhone developer Anna
Callahan will show you how we built a simple music web app in Django with a
native iPhone app that communicates with it. Attendees of this talk will see a
concrete case study of building an application that exposes an API for mobile
devices.

Our web app exposes a JSON API for sending and receiving data from the mobile
device. We’ll talk about why we chose Django and the TastyPie API package, and
discuss other Python-based frameworks that could be used to build the API such
as Pyramid, Flask and Bottle. We’ll also compare REST and custom APIs to
understand best practices for building APIs designed for mobile devices.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Callahan,Nate Aune</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1164/an-iphone-python-love-affair-building-apis-for-m</guid><enclosure url="http://www.youtube.com/watch?v=GB0EJUhC7yc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/GB0EJUhC7yc/hqdefault.jpg"></media:thumbnail></item><item><title>API design: Lessons Learned</title><link>http://www.pyvideo.org/video/1167/api-design-lessons-learned</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Raymond Hettinger - 21 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Share the lessons learned from a decade of core Python development, what
worked and what didn't. Look at the development process and thinking behind
some of Python's successful APIs and ones that leave something to be desired.
Learn general principles for designing a good API for public consumption.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1167/api-design-lessons-learned</guid><enclosure url="http://www.youtube.com/watch?v=heJuQWNdwJI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/heJuQWNdwJI/hqdefault.jpg"></media:thumbnail></item><item><title>A Python Takeover</title><link>http://www.pyvideo.org/video/1169/a-python-takeover-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Mark Ramm-Christensen - 23 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
Two years ago I started working on SourceForge with a couple of python
developers. Back then the site was written in PHP and was in some ways buried
in technical debt. Everything is different today, we have a complete set of
tools for Ticket tracking, Wiki documents, Git, Mercurial, Subversion, and IRC
- all written in Python, and now released as open source software.

This is the story of how the amazing libraries, tools, and talent in the
Python web community has radically changed an established company, and allowed
us to reinvent sourceforge.net.

This talk will go over our tech stack, talk about the libraries we used, the
way we solved scalability, internationalization, and performance issues
issues. Ultimately we know that without python, we could not have built a
flexible plugin based system, and gotten permission from management to open
source it.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Ramm-Christensen</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1169/a-python-takeover-0</guid><enclosure url="http://www.youtube.com/watch?v=7c1R78iAWJk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/7c1R78iAWJk/hqdefault.jpg"></media:thumbnail></item><item><title>Aspettando PostgreSQL 9.1</title><link>http://www.pyvideo.org/video/1171/aspettando-postgresql-91</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Gabriele Bartolini - 22 June 2011 in "Track Italiana Big Mac
"


&lt;p&gt;Description&lt;/p&gt;
PostgreSQL è un sistema open-source per la gestione di database molto avanzato
ed estremamente versatile che si integra perfettamente con Python. E'
sviluppato da una comunità internazionale molto attiva ed è distribuito
secondo la licenza in stile BSD denominata "PostgreSQL License".

Le funzionalità di classe enterprise (come la conformità con lo standard SQL,
le transazioni ACID, la disaster recovery, l'alta disponibilità o HA, la
replica, il partizionamento e in generale l'estensibilità) rendono PostgreSQL
particolarmente adatto per quegli ambienti business-critical che intendono
ridurre il costo di proprietà totale (TCO) delle loro soluzioni di database
senza alterarne i requisiti funzionali. PostgreSQL 9.0, rilasciato nel
settembre del 2010, è stata la prima versione di PostgreSQL con Hot Standby,
un meccanismo nativo per la replica master/slave. Al consueto e collaudato
meccanismo di replica secondo la tecnica del log shipping (usata
precedentemente per scopi di HA con Warm Standby) è stata aggiunta la replica
in streaming.

La versione 9.1, attesa per la seconda parte del 2011, aggiungerà la replica
sincrona a PostgreSQL, rendendolo il primo DBMS in grado di permettere a
sviluppatori e utenti di controllare la strategia di replica a livello di
singola transazione. Partecipa al talk per scoprire tutte le altre
funzionalità principali che saranno incluse in PostgreSQL 9.1, fra le quali:
gestione delle estensioni, writable common table expression, ecc.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Bartolini</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1171/aspettando-postgresql-91</guid><enclosure url="http://www.youtube.com/watch?v=hsIEX2PBvJo" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/hsIEX2PBvJo/hqdefault.jpg"></media:thumbnail></item><item><title>A Visual Interactive Programming Environment</title><link>http://www.pyvideo.org/video/1168/a-visual-interactive-programming-environment</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Geoffrey French - 24 June 2011 in "Track Ravioli "


&lt;p&gt;Description&lt;/p&gt;
The Larch Environment is a visual interactive programming environment for
Jython/Python. Its purpose is to make programming more visual. To this end,
protocols for presenting objects visually have been devised. A programming
environment, that builds on the idea of the standard visual console, allows a
programmer to experiment with ideas, and develop programs at the same time.
Additionally, a way of embellishing source code with visual content is
presented.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Geoffrey French</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1168/a-visual-interactive-programming-environment</guid><enclosure url="http://www.youtube.com/watch?v=_OX-3UhwUeg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/_OX-3UhwUeg/hqdefault.jpg"></media:thumbnail></item><item><title>Beyond Python Enhanced Generators</title><link>http://www.pyvideo.org/video/1163/beyond-python-enhanced-generators-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Erik Groeneveld - 23 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Right after the introduction of PEP342 (Enhanced Generators) we started to
decompose programs into generators. It was soon discovered that for real-life
problems one would need something like "yield from", as is described in
PEP380. At that time, we already had a similar solution called
'[compose](http://weightless.io/compose)', which we adapted to PEP380.

After 5 years working with 'compose', we found a small set of other features
that are essential if you want to use Enhanced Generators not only as a way of
lightweight command scheduling, but also a a pipe-line, or parser. Indeed, the
latter concepts are what real co-routines are about.

This talk introduces what is needed on top of PEPs 342 and 380 based on
experience with decomposing big enterprise search engines into co-routines.
Parts of it have been presented on SPA (2008) and EuroPython (2010).
Understanding of Enhanced Generators is a prerequisite.

Experience has shown that the topic is subtle enough to require quite some
time for full understanding, hence the suggestion for a 90 min slot.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Groeneveld</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1163/beyond-python-enhanced-generators-0</guid><enclosure url="http://www.youtube.com/watch?v=Sd4W0DhJ29A" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/Sd4W0DhJ29A/hqdefault.jpg"></media:thumbnail></item><item><title>Building a hosting platform with Python</title><link>http://www.pyvideo.org/video/1161/building-a-hosting-platform-with-python-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Andrew Godwin - 20 June 2011 in "Track Lasagne"


&lt;p&gt;Description&lt;/p&gt;
At ep.io we built a Python hosting platform from the ground up, designed to
run large numbers of web applications on a small number of physical machines
both securely and in a reasonably scalable way. This talk will show you how we
built our infrastructure - using Redis, eventlet, PostgreSQL and more - and
what lessons we learnt from our first few thousand deploys.

See how we split services into multiple processes and greenthreads; the pains
of building a cooperatively-multitasking PTY module; how Redis isn't the
answer to everything, but is still very useful; how to persuade third-party
software to work securely in a shared environment; and how important it is to
have good logging, especially when you have more than five servers.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Godwin</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1161/building-a-hosting-platform-with-python-0</guid><enclosure url="http://www.youtube.com/watch?v=hAqtC_c2x1s" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/hAqtC_c2x1s/hqdefault.jpg"></media:thumbnail></item><item><title>Building Scalable Web Apps</title><link>http://www.pyvideo.org/video/1162/building-scalable-web-apps</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] David Cramer - 21 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Building scalable web applications may seem like a distant problem, but the
problem is not thinking about it before it's too late. This talk will focus on
designing a scalable web application before it needs to be (and avoiding the
premature optimization dilemma). It will cover topics such as efficient usage
of your database, appropriate caching (and invalidation!), and what the
speaker considers as best practices.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1162/building-scalable-web-apps</guid><enclosure url="http://www.youtube.com/watch?v=cubJ4tYVrNc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/cubJ4tYVrNc/hqdefault.jpg"></media:thumbnail></item><item><title>Combining Embedded and Interactive Python in a Debugger:  A Case Study</title><link>http://www.pyvideo.org/video/1160/combining-embedded-and-interactive-python-in-a-d-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Caroline Tice - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
LLDB is an open source compiler currently under development. LLDB incorporates
Python in several different ways: From the command line, one can drop into an
interactive Python script interpreter, entering normal Python interactive
commands and having them interpreted and executed. In addition, the LLDB
debugger has a programming API that allows users to call actual debugger
functions and access real debugger objects. This API is run through SWIG and
converted into a Python module that gets automatically imported into the
interactive interpreter inside LLDB. The upshot of this is that, in the Python
mode, users can call the API functions as if they were regular Python
functions. This is turn means that users can do things like hit a breakpoint,
call the appropriate API functions to get the actual current frame object,
check to see if the caller function several frames up the stack is a
particular function, and if so, perform some other interesting action. LLDB
also allows for breakpoint commands to be written in Python (which therefore
allows them to call the API functions), as well as having a command that
interprets and executes a single line of Python.

Because the API and all of the debugger functionality is available in a Python
module, it is also possible to write a debugger front end completely in Python
and have it import the LLDB module and call the LLDB API functions (which
calls into the LLDB shared library), to create a new debugger front end. Our
test suite takes advantage of this to run tests on the LLDB library without
having to start up an interactive LLDB debubgger session.

There were many interesting problems encountered and overcome in getting all
of this to work. LLDB combines both interactive Python and embedded Python.
There were some interesting things worked out so that a single Python
environment dictionary is used for the entire debugger session: A user can pop
into and out of the interactive interpreter and have access at any time to
anything defined in any previous visit to the interactive interpreter (within
the same debug session); breakpoint commands have access to everything defined
in the interactive session; so do embedded script commands. It gets even more
complicated, because LLDB can have multiple debugger sessions alive at once,
and each debugger session has its own Python interpreter with its own
dictionary and must not be allowed to interfere with another session's state.
In this talk I will discuss how we implemented many of these features in LLDB,
pointing out some of the more interesting problems we encountered and how we
overcame them, and demonstrate it all working in LLDB.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Caroline Tice</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1160/combining-embedded-and-interactive-python-in-a-d-0</guid><enclosure url="http://www.youtube.com/watch?v=e0QaqrVbNMY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/e0QaqrVbNMY/hqdefault.jpg"></media:thumbnail></item><item><title>Come costruire un'azienda distribuita con Python</title><link>http://www.pyvideo.org/video/1188/come-costruire-unazienda-distribuita-con-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Maurizio Delmonte - 22 June 2011 in "Track Italiana Big Mac
"


&lt;p&gt;Description&lt;/p&gt;
Il nostro gruppo di lavoro, composto da varie figure professionali, da anni
lavora su più progetti in parallelo, e con team di persone che si incontrano
solo virtualmente.

Non è sufficiente dire: facciamolo!

Per non perdere la testa, gestire in modo agile i progetti e vivere felici
affiniamo continuamente le nostre tecniche di gestione e gli strumenti che ci
permettono di tenere sotto controllo la situazione: Extreme Management tool,
Poi Tracker, Buildout sono solo alcuni degli strumenti che rendono il nostro
lavoro fluido ed efficace.

Presenterò le nostre modalità operative, dimostrando che lavorare con un team
composto da persone contemporaneamente a Milano, Napoli, Torino e Ancona è
possibile. Non solo: è il futuro!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maurizio Delmonte</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1188/come-costruire-unazienda-distribuita-con-python</guid><enclosure url="http://www.youtube.com/watch?v=3A7z75PSIuY" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/3A7z75PSIuY/hqdefault.jpg"></media:thumbnail></item><item><title>Creare videogames con Panda3D</title><link>http://www.pyvideo.org/video/1187/creare-videogames-con-panda3d</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Claudio Desideri - 21 June 2011 in "Track Italiana Big Mac"


&lt;p&gt;Description&lt;/p&gt;
In questo talk spiegherò quali opportunità ci offre il game-engine Panda3D nel
momento in cui vogliamo creare un videogioco da zero. Spiegherò com'è
strutturato al suo interno e i concetti di base per capire come funziona, ma
mostrerò anche prove pratiche e pezzi di codice.

Può partecipare chiunque abbia una conoscenza di base di Python, anche se non
ha mai lavorato con applicazioni realtime 3D. L'obiettivo è mostrare come
creare un semplice videogioco che risponda agli input immessi dall'utente e
come utilizzare al meglio questo potente engine.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Claudio Desideri</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1187/creare-videogames-con-panda3d</guid><enclosure url="http://www.youtube.com/watch?v=1dzK_k6k36U" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/1dzK_k6k36U/hqdefault.jpg"></media:thumbnail></item><item><title>Creating videogames with Panda3D</title><link>http://www.pyvideo.org/video/1159/creating-videogames-with-panda3d</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Claudio Desideri - 20 June 2011 in "Track Tagliatelle"


&lt;p&gt;Description&lt;/p&gt;
In this talk I'm going to explain the main features and possibility that
Panda3D gives us when we want to create a game from scratch. Then, I'll
explain how the engine is structured and how it works conceptually going also
through code examples and some practical operations.

It's meant for beginners who have also never worked with realtime graphics and
the only prerequisite is a bit of python knoweledge including how to write a
simple program and how to run it. The goal is to create a simple realtime
application that take care of user input and reacts depending on it.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Claudio Desideri</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1159/creating-videogames-with-panda3d</guid><enclosure url="http://www.youtube.com/watch?v=-3fTd53VNHw" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/-3fTd53VNHw/hqdefault.jpg"></media:thumbnail></item><item><title>Data Driven Cache Invalidation</title><link>http://www.pyvideo.org/video/1158/data-driven-cache-invalidation-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Magnus Hagander - 23 June 2011 in "Track Ravioli"


&lt;p&gt;Description&lt;/p&gt;
In todays world, nobody (should) deploy a web application facing the internet
without having a proper caching system in place. There are many different
solutions to choose from, from manual use of memcached through framework
integrated caching to external caches like Squid or Varnish. Most modern
frameworks come with integrated functionality for at least one of these
methods, and often more than one.

However, they often relies on all traffic going through the same framework to
work properly - a caching layer in Rails is hard to share with one in Django.
This talk will show a way to break the design rules of these frameworks just a
little, and have the database help solve this problem.

This talk will use a small application written in Python using Django to
illustrate the examples, but the method is language independent.
Unsurprisingly, the database used is PostgreSQL.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Magnus Hagander</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1158/data-driven-cache-invalidation-0</guid><enclosure url="http://www.youtube.com/watch?v=QCXwsQp8rmM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/QCXwsQp8rmM/hqdefault.jpg"></media:thumbnail></item><item><title>Debugging and profiling techniques</title><link>http://www.pyvideo.org/video/1157/debugging-and-profiling-techniques-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Giovanni Bajo - 22 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
This talk will give on overview over some common problems related to profiling
and debugging CPython applications (especially desktop-based ones).

The following subjects will be covered:

  * Debugging of memory/resource leaks (circular references, **del**, weakref, garbage collector, etc.). We will show in details how the memory management of Python objects work and we will show a few tricks to track memory leaks
  * Python code profiling (profile/hotshots/cProfile, design of small tests, etc.). We will show how to measure, profile, and analyse an application to spot performance problems and solve them.
  * Post-mortem step-by-step debugging of C/C++ extension under Windows. We will show how to setup Visual Studio for debugging, how to see a traceback in case of an unexpected segfault, and how to further debug and solve the crash.

This talk is aimed at intermediate Python programmers, who have already
developed non-trivial Python applications but have never "jumped through" the
interpreter abstraction layer. If you feel a little lost when you see a
segfault from a Python program or you don't have a clear idea how memory is
collected in Python, this talk is perfect for you.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1157/debugging-and-profiling-techniques-0</guid><enclosure url="http://www.youtube.com/watch?v=J29uIkdmHs8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/J29uIkdmHs8/hqdefault.jpg"></media:thumbnail></item><item><title>Dependency injection is your friend</title><link>http://www.pyvideo.org/video/1156/dependency-injection-is-your-friend</link><description>&lt;p&gt;Abstract&lt;/p&gt;
[EuroPython 2011] Alan Franzoni - 24 June 2011 in "Track Spaghetti"


&lt;p&gt;Description&lt;/p&gt;
Dependency injection is a technique that has been around since long, and it's
widely used in many programming languages and environments, but it's not that
widespread in the Python world.

Many think that using dependency injection will force writing large-and-
complex xml blobs, break encapsulation, or reduce code readability, or just
that it's unneeded in an highly expressive language like Python is.

On the contrary, I'll show you that DI: - doesn't require any library or
framework; - encourages peer role identification; - helps keeping a class
focused and cohesive; - encourages separation between wiring from applicative
code; - makes your code more reusable, expressive and testable; - doesn't
break encapsulation; - turns part of your coding efforts into configuration

Large applications, by the way, might just get a great maintenance boost by
using a real DI container, hence I'll briefly cover Pydenji, the Python(ic)
dependency injection toolkit, and what it can do for your application.

A basic knowledge of object oriented design and SOLID principles is required
in order to fully appreciate the content of this talk.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alan Franzoni</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1156/dependency-injection-is-your-friend</guid><enclosure url="http://www.youtube.com/watch?v=PSeSWINJ5YM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/PSeSWINJ5YM/hqdefault.jpg"></media:thumbnail></item></channel></rss>
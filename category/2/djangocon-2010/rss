<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of DjangoCon 2010</title><link>http://www.pyvideo.org/category/2/djangocon-2010/rss</link><description></description><atom:link href="http://www.pyvideo.org/category/2/djangocon-2010/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 11 Mar 2016 12:09:40 -0000</lastBuildDate><ttl>500</ttl><item><title>Alice in Performanceland -- Down the Rabbit Hole with Frank Wiles</title><link>http://www.pyvideo.org/video/41/djangocon-2010--alice-in-performanceland----down-</link><description>&lt;p&gt;Description&lt;/p&gt;
Alice in Performanceland -- Down the Rabbit Hole with Frank Wiles

Presented by Frank Wiles

While pre-optimization is often the root of all evil, knowing how to think
about performance and scalability are important skills for any geek. Learn
about all the knobs you didn't know you could or should tweak.

Abstract

Code profiling and dealing with your database aren't the only places to find
performance gains. Performance and scalability are holistic endeavors.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Frank Wiles</dc:creator><guid>http://www.pyvideo.org/video/41/djangocon-2010--alice-in-performanceland----down-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/41_alice-in-performanceland-down-the-rabbit-hole-with-frank-wiles.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-AliceInPerformancelandDownTheRabbitHoleWithFrankWiles688.png"></media:thumbnail></item><item><title>Alternative views</title><link>http://www.pyvideo.org/video/49/djangocon-2010--alternative-views</link><description>&lt;p&gt;Description&lt;/p&gt;
Alternative views

Ben Firshman

Exploring the power of class-based views, their current status and how the
concepts behind them can be applied to other areas.

Abstract

Generic views are quickly outgrown for all but the most simple of
applications. They are often rewritten from scratch just to make small changes
to functionality.

If you use class-based views, code can be reused by inheriting from more
abstract views. They are provided with many reusable applications, but all
implemented in slightly different ways. It has been suggested a set of views
be supplied with Django to standardise the API.

I will present some of the advantages and disadvantages of using class-based
views, and how they can help you develop more flexible applications in less
time.

</description><guid>http://www.pyvideo.org/video/49/djangocon-2010--alternative-views</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/49_alternative-views.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-AlternativeViews292.png"></media:thumbnail></item><item><title>Breaking down the process of building a custom CMS</title><link>http://www.pyvideo.org/video/61/djangocon-2010--breaking-down-the-process-of-buil</link><description>&lt;p&gt;Description&lt;/p&gt;
Breaking down the process of building a custom CMS

Presented by Yann Malet, Brian Luft

The purpose of this talk is to share some of the important insights gained
over a couple years of working on custom CMS-type projects serving large
organizations. Acknowledging that approx. 30 minutes is a short time to cover
a broad subject, the focus of the talk would be on outlining a basic strategy
for managing large projects.

Abstract

Over the past couple of years, Brian and Yann's team have built and worked on
several large Django projects for large organizations. They will discuss how
to start and manage large CMS projects, with an emphasis on pointing people to
the best reference information and breaking down the common operations.

The primary discussion topics would cover:

  * Breaking Down the Job: Over the course of the project you'll end up accounting for thousands of details; here's how to figure out the first few Centering Around a Prototype: Hedging your bets for the inevitable "give me a ballpark figure" 
  * Dealing With Legacy Data Stores: Migrate legacy information early and often. 
  * Selecting 3rd Party Components: Reuse exiting app, fork it early or Trailblaze 
  * Bad News: Django Ain't Perfect - where it has weaknesses and how to compensate 

At the end of this talk the audience will be able to:

    * Break down this type of project into meaningful phases 
    * Migrate large dataset to populate the django models that are still under development. 
    * Have a rational and objective approach to select django reusable component and understand how to refine them during the different stages of the project lifecycle. 
    * Find and evaluate quality information about the tradeoffs Django presents in these types of projects 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Luft,Yann Malet</dc:creator><guid>http://www.pyvideo.org/video/61/djangocon-2010--breaking-down-the-process-of-buil</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/61_breaking-down-the-process-of-building-a-custom-cms.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-BreakingDownTheProcessOfBuildingACustomCMS112-442.jpg"></media:thumbnail></item><item><title>Customizing the Django Admin</title><link>http://www.pyvideo.org/video/56/djangocon-2010--customizing-the-django-admin</link><description>&lt;p&gt;Description&lt;/p&gt;
Customizing the Django Admin

Presented by Peter Baumgartner, and Michael Trythall

How to build great admin user interfaces while still leveraging the power of
the Django's batteries-included admin.

Abstract

The Django admin interface is a great tool for rapidly viewing and generating
content, but its default one size fits all approach may not be the best for
the users of it.

This talk is broken into two parts. First, we will discuss user experience and
what users have come to expect from an admin tool. In the second half, we'll
show you how to bend Django's admin to meet those expectations.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Trythall,Peter Baumgartner</dc:creator><guid>http://www.pyvideo.org/video/56/djangocon-2010--customizing-the-django-admin</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/56_customizing-the-django-admin.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-CustomizingTheDjangoAdmin322-268.jpg"></media:thumbnail></item><item><title>Data Herding: How to Shepherd Your Flock Through Valleys of Darkness</title><link>http://www.pyvideo.org/video/48/djangocon-2010--data-herding--how-to-shepherd-you</link><description>&lt;p&gt;Description&lt;/p&gt;
Data Herding: How to Shepherd Your Flock Through Valleys of Darkness

Presented by Brian Luft

Learn how to use common tools like the management shell, django-extensions,
and iPython to craft an effective workflow whether you're building a new
schema or migrating from old systems. We'll also look at how to take advantage
of the latest ORM features.

Abstract

The presentation would consist of walking through a few example scenarios
where one would deal with processing or converting data in some manner. For
example, migrating from a large legacy database often brings a number of
tedious problems. I would demonstrate how to work in an iterative, repeatable
style using the Django sql management commands, a few iPython tricks, etc.

Another demonstration would be showing a team workflow for South migrations,
illustrating how to deal with some common problems that crop up in practice.

The audience will leave with some solid techniques for dealing with a few
specific data management challenges. The unifying philosophy throughout is to
break large, difficult problems into small, repeatable steps and audience
members should also come away knowing how to select tools that help them work
in this style.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Luft</dc:creator><guid>http://www.pyvideo.org/video/48/djangocon-2010--data-herding--how-to-shepherd-you</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/48_data-herding-how-to-shepherd-your-flock-through-valleys-of-darkness.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-DataHerdingHowToShepherdYourFlockThroughValleysOfDarkn299.png"></media:thumbnail></item><item><title>Domain Specific Frameworks - Why they rock and what can we do to get more of them</title><link>http://www.pyvideo.org/video/54/djangocon-2010--domain-specific-frameworks---why-</link><description>&lt;p&gt;Description&lt;/p&gt;
Domain Specific Frameworks - Why they rock and what we can do to get more of
them

Presented by Sean O'Connor

This talk will provide an overview of some of the existing domain specific
frameworks (DSFs) in the Python/Django world, review some of the common
patterns used within them, and then explore some things which can be done to
make it easier for people to create and maintain DSFs.

Abstract

There's a growing collection of tools such as Celery, ImageKit, and Piston
which fall into a weird but wonderful space between utility libraries and full
fledged applications. Much like Django, DSFs (domain specific frameworks)
provide more structure and have more opinion than utility libraries, but
remain focused on providing developer instead of end-user level functionality.
Unlike Django, DSFs focus on solving a very specific set of specific problems.

This talk will provide an overview of some of the existing DSFs in the
Python/Django world, review some of the common patterns used within them, and
then explore some things which can be done to make it easier for people to
create and maintain DSFs. Two of the DSFs to be discussed include Celery and
ImageKit. Some of the patterns to be reviewed include registration, backends,
and framework integration/independence. Finally, the future facing discussion
will explore possible tools to make DSF building easier and steps general
purpose frameworks (Django) can take to ease integration.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean O'Connor</dc:creator><guid>http://www.pyvideo.org/video/54/djangocon-2010--domain-specific-frameworks---why-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/54_domain-specific-frameworks-why-they-rock-and-what-can-we-do-to-get-more-of-them.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-DomainSpecificFrameworksWhyTheyRockAndWhatCanWeDoTo103-637.jpg"></media:thumbnail></item><item><title>DSF Announcements and Q&amp;A</title><link>http://www.pyvideo.org/video/63/djangocon-2010--dsf-announcements-and-q-amp-a</link><description>&lt;p&gt;Description&lt;/p&gt;
DSF Announcements and Q &amp; A

Presented by Russell Keith-Magee

The Django software foundation is the entity which hold the IP for django and
guides efforts to develop the community around Django. In this session several
members of the DSF will be announcing some changes at the DSF and will be
available for a general Q&amp;A.;

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Russell Keith-Magee</dc:creator><guid>http://www.pyvideo.org/video/63/djangocon-2010--dsf-announcements-and-q-amp-a</guid><enclosure url="http://blip.tv/file/get/Robertlofthouse-DSFAnnouncementsAndQA629.ogv" length="200339965" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-DSFAnnouncementsAndQA629-585.jpg"></media:thumbnail></item><item><title>First steps in performance tuning</title><link>http://www.pyvideo.org/video/57/djangocon-2010--first-steps-in-performance-tuning</link><description>&lt;p&gt;Description&lt;/p&gt;
First steps in performance tuning

Presented by Russell Keith-Magee

So you've built your first Django website. You've tested it, you've released
it, you've got a few customers... and a few more... and a few more... and now
you're having performance problems. What do you do? This talk will look at
some performance problems you may experience, and show some simple (and
creative) ways to squeeze the most out of your server hardware.

Abstract

The talk is especially aimed at web developers that haven't got a background
in computing, but nonetheless have fallen into a web development role. Topics
will include:

  * How to work out that you have a problem 
  * Getting computation out of the request/response loop 
  * Caching -- when, how, and problems that caching introduces 
  * Setting up a webserver to avoid deadlocks 
  * Likely causes (and solutions) of database bottlenecks 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Russell Keith-Magee</dc:creator><guid>http://www.pyvideo.org/video/57/djangocon-2010--first-steps-in-performance-tuning</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/57_first-steps-in-performance-tuning.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-FirstStepsInPerformanceTuning779-385.jpg"></media:thumbnail></item><item><title>How to sell Django</title><link>http://www.pyvideo.org/video/53/djangocon-2010--how-to-sell-django</link><description>&lt;p&gt;Description&lt;/p&gt;
How to sell Django

Featuring Frank Wiles, Daniel Greenfeld, Peter Baumgartner, James Tauber,
Steve Holden

It seems that a lot of people want to use Django (and Python), but their
customer, management, or organization won't let them. Django is a great tool,
but it can be challenging to get in the door. This panel will explore how
companies and individuals have successfully introduced Django, what tools are
available to sell Django, and what pitfalls there are to avoid.

Possible questions will include:

  * What is a good example success story you can share? 
  * How do you deal with organizations that have already spent bucketloads of money on a piss-poor technology stack, are hurting for it, but can't seem to let go? 
  * How do you fight Fear-Uncertainty-Doubt (FUD) spread by people who stand to lose from introducing Django? 
  * What tools are available to help sell Django? 

[shmpe](http://shmpe.com/)

</description><guid>http://www.pyvideo.org/video/53/djangocon-2010--how-to-sell-django</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/53_how-to-sell-django.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-HowToSellDjango349-877.jpg"></media:thumbnail></item><item><title>Large Problems in Django, Mostly Solved</title><link>http://www.pyvideo.org/video/52/djangocon-2010--large-problems-in-django--mostly-</link><description>&lt;p&gt;Description&lt;/p&gt;
Large Problems in Django, Mostly Solved

Presented by Eric Holscher

This talk is based on my popular series of blog posts highlighting
applications from the community. I will highlight some of the best
applications that the Django/Python community has put together, talk about
places that are lacking, and talk about what these popular applications have
in common.

Part 1

I have written a series of blog posts about "Large problems" in the community,
and how they have been solved by members of our community with reusable apps.
Previously I have covered:

  * Delayed Execution 
  * Search 
  * APIs 
  * Documentation 
  * Database Migrations 

I will update my thoughts on these issues, as well as talking about a couple
of other new issues that I think that have been solved in a decent way. These
include:

  * Remote Command Execution 
  * Debugging in Development 
  * Continuous Integration 

Part 2

In this part I will highlight issues that are still headaches for the
Community. These are places where there is a good chance for growth for third
party apps, and places where I have personally found some friction in my
development. A couple examples of this are:

  * Deployment 
  * Class Based Views / Thread Safety 
  * Debugging Production Environments 

Part 3

From the above applications that are well done, what makes a popular reusable
app? This won't be my thoughts, but more looking at apps that have been
successful and trying to see what they have in common. A good app and a good
reusable app are necessarily different, and I think it will be interesting to
look at what traits make reusable apps popular.

[Large problems posts](http://ericholscher.com/tag/largeproblems/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Holscher</dc:creator><guid>http://www.pyvideo.org/video/52/djangocon-2010--large-problems-in-django--mostly-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/52_large-problems-in-django-mostly-solved.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-LargeProblemsInDjangoMostlySolved109-212.jpg"></media:thumbnail></item><item><title>Learning a new codebase</title><link>http://www.pyvideo.org/video/40/djangocon-2010--learning-a-new-codebase</link><description>&lt;p&gt;Description&lt;/p&gt;
Learning a new codebase

Presented by Justin Lilly

This talk will be on methods of reading code for comprehension. While the
project will be walking through various third-party Django apps, the
experiences and conclusions are drawn from joining a large, existing Django
project which lacked documentation.

Abstract

In the broadest sense, this talk is on how to read code. More than this, it is
a series of methods and practices which one can follow to get up to speed on a
new codebase. The subject of this talk will be open-sourced Django projects,
but many of the experiences which fuel this talk will be based on joining a
new team. It will cover tracing execution paths, finding the more interesting
portions of a codebase, as well as how to address any issues you may have
found in it.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Lilly</dc:creator><guid>http://www.pyvideo.org/video/40/djangocon-2010--learning-a-new-codebase</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/40_learning-a-new-codebase.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-LearningANewCodebase752.png"></media:thumbnail></item><item><title>Lightning Talks - Day 1</title><link>http://www.pyvideo.org/video/35/djangocon-2010--lightning-talks---day-1</link><description>&lt;p&gt;Description&lt;/p&gt;
Lightning Talks

  * 00:00 - David Gouldin: Hash Signaling Made Easy (http://github.com/dgouldin/django-hashsignal) 
  * 05:20 - Tareque Mossain: Django ORM Tips 
  * 11:20 - Nathan?: OpenID in Django 
  * 18:00 - Ben? and Jeremy?: Django efficacy project--call for case studies 
  * 19:40 - Tobias McNulty: django.contrib.messages and contributing to Django core 
  * 25:00 - Jason ?: Django Config Store (http://github.com/zbyte64/django-configstore 
  * 28:25 - Niall Kelly: Giving Django a new front door 
  * 32:00 - Justin Lilly: Meetup Meeter 
  * 33:50 - Jesse Noller: WTF: PSF and DSF 
  * 40:00 - dmoisset ?: How request routing should be 
  * 45:30 - Gabriel Falcao: Feeding your ponies with lettuce (http://lettuce.it/) 
  * 50:40 - Nate Aune: djangozoom: Effortless cloud deployment (http://djangozoom.com/ponyexpress) 

[NOTE: If you know the people whose names have a ?, please add a comment so we
can fix it in the description. Thanks!]

</description><guid>http://www.pyvideo.org/video/35/djangocon-2010--lightning-talks---day-1</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/35_lightning-talks-day-1.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-LightningTalksDay1811.png"></media:thumbnail></item><item><title>Making the leap to Django</title><link>http://www.pyvideo.org/video/66/djangocon-2010--making-the-leap-to-django</link><description>&lt;p&gt;Description&lt;/p&gt;
Making the leap to Django

Presented by Terry J. Owen

How to move your small development team from PHP to Django in less than a
month.

Abstract

The Victoria Advocate was once a purely PHP development shop. But over the
course of one month the development manager said "we need to move to Django."

This talk will focus on some of the challenges and successes experienced
during this month.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Terry J. Owen</dc:creator><guid>http://www.pyvideo.org/video/66/djangocon-2010--making-the-leap-to-django</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/66_making-the-leap-to-django.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-MakingTheLeapToDjango231-885.jpg"></media:thumbnail></item><item><title>Maps of Imaginary Lands</title><link>http://www.pyvideo.org/video/60/djangocon-2010--maps-of-imaginary-lands</link><description>&lt;p&gt;Description&lt;/p&gt;
Maps of Imaginary Lands

Malcolm Tredinnick

The GIS features of Django aren't restricted to being applied to real world
maps and planets. This talk will show how to display and interact with maps of
imaginary lands, such as game maps or lands in science fiction novels. We'll
uncover a bit of how Django GIS works in the process, separating the map
display from the modeling.

Abstract

Whilst django.contrib.gis isn't particularly difficult to get started with,
particularly if you follow the tutorials, it can sometimes seem a bit
overwhelming in the way it goes from zero to fancy maps in only a couple of
steps. I'd like to demystify some of the pieces of the stack, pulling apart
the modeling support — specifying the data are we trying to work with — from
the display and client-side portion.

To make this more than a dry technical dive, I'll show how to add extras to an
imaginary map, rather than something pulled from Google Maps or Open Street
Map. We'll take on the task of plotting features on a landscape from a
potential role-playing game and show how the GIS data manipulation features,
such as calculating region intersections, nearby points, and javascript
client-side display work the in a familiar way against this slightly unusual
background.

Some basic familiarity with Django's GIS features would be useful for this
talk, although it might also serve as a motivating introduction to trying
things out. The code shown will be available for download after the talk.

</description><guid>http://www.pyvideo.org/video/60/djangocon-2010--maps-of-imaginary-lands</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/60_maps-of-imaginary-lands.ogv" length="None" type="video/ogg"></enclosure><media:thumbnail url="http://s3.mirocommunity.org.s3.amazonaws.com/python/localtv/video_thumbs/1856/375x295.png"></media:thumbnail></item><item><title>Massaging the Pony: Message Queues and You</title><link>http://www.pyvideo.org/video/39/djangocon-2010--massaging-the-pony--message-queue</link><description>&lt;p&gt;Description&lt;/p&gt;
Massaging the Pony: Message Queues and You

Presented by Shawn Rider

Message queues are a potential solution for any site that needs to facilitate
robust asynchronous operations on your website including carrying out
intensive or long-running actions or synchronizing off-site services. We will
look at how PBS has used Celery and RabbitMQ to provide more reliable service
and how to set up a robust message queue solution in a cloud hosting
environment.

Abstract

In maintaining several different site projects written in Django over the past
four years, the PBS Education team repeatedly found the need for the ability
to create asynchronous processes that could handle long-running actions and
mission-critical synchronization. We needed a way to handle tasks such as
generating reports on large data sets and executing remote processes on fussy
third-party services. The clear solution to the problems we encountered was to
implement a robust message queue solution.

Message queues allow sites to execute processes outside the normal HTTP
request cycle and then deliver the results of those processes in a variety of
ways. After a survey of all available message queue solutions we settled on a
combination of Celery and RabbitMQ to create a reliable, always-available
system that can handle mission-critical tasks. We can easily develop against a
message queue in our development builds, and we have an infrastucture based in
a cloud hosting service that allows us to rely on the message queue without
reservation.

In this talk will will look at what a message queue does for your site, how to
implement a message queue in your Django code, and how to set up a reliable
message queue infrastructure on your servers. We will show examples from some
of our sites at PBS so it is clear how message queues work and to present some
common use cases that warrant a message queue solution. We will also discuss
some of the design patterns that made it easy to switch to message queue based
processing for discreet tasks, as well as some of the things we learned that
have made the solution even easier to implement for new tasks.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shawn Rider</dc:creator><guid>http://www.pyvideo.org/video/39/djangocon-2010--massaging-the-pony--message-queue</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/39_massaging-the-pony-message-queues-and-you.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-MassagingThePonyMessageQueuesAndYou879.png"></media:thumbnail></item><item><title>Modeling challenges</title><link>http://www.pyvideo.org/video/42/djangocon-2010--modeling-challenges</link><description>&lt;p&gt;Description&lt;/p&gt;
Modeling Challenges

Presented by Malcolm Tredinnick

How would you model players, umpires and coaches in baseball data when the
same person can switch roles over the course of their life? How about servers
in racks with power boards attached (and cords running across the room to
remote boards)? Come along to see one approach to create minimal and well-
performing models for such real-life situations.

Abstract

The slightly over-simplified but useful rule of thumb when creating database
schema is “normalize until it hurts, [then] denormalize until it works.” If
only people didn’t skip the first step so often. Using a data modeling layer,
such as Django's models, doesn't absolve the system architects from the need
to create good design. It also doesn't require them to do so, since you can
get away with a lot of sub-optimality with many data sets.

The real difficulty here, though, is that the trade-off between text-book
ideal modeling and easy to use is difficult to judge and takes practice to
develop.

This talk will walk some interesting cases of model design that I've
encountered recently. I'll explain how I approached the problem and what we
ended up with. These will include:

  * Modeling people who might simultaneously play different roles in the system. For example, a person who was a baseball player and then became a coach — each role has different attributes attached to it. 
  * Modeling what appears to be a triangular dependency relationship with minimal redundancy in the data description and without needing really long query filters to access things. 
  * Handling date ranges (or other measured data) of different degrees of accuracy and precision. 

This won't be a talk on theoretical database design. Rather, concrete examples
of creating such designs and guiding the decisions by what might work best in
the final Django code. Hopefully, by listening to one person's approach
(mine!), people faced with similar challenges will have another possible
attack method in their toolbox.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Tredinnick</dc:creator><guid>http://www.pyvideo.org/video/42/djangocon-2010--modeling-challenges</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/42_modeling-challenges.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-ModelingChallenges314.png"></media:thumbnail></item><item><title>Multi-database patterns</title><link>http://www.pyvideo.org/video/38/djangocon-2010--multi-database-patterns</link><description>&lt;p&gt;Description&lt;/p&gt;
Multi-database patterns

Presented by Malcolm Tredinnick

A tour through four common "multiple database" usage patterns and how they can
be implemented and utilised with Django. We'll talk about the strengths and
weaknesses of each pattern and why you might not need any of them.

Abstract

There are a few good reasons a system might want to interact regularly with
multiple databases. “Because it’s what cool people do” is not one of those
reasons. Most multi-database usages fall into one of four main classes:

  * Separation by function. All data of one type in one database, all data of another type in some other database. 
  * Separation by sharding. Data of a particular type (e.g. user records) is split across multiple databases, each database holding a shard of the whole data. 
  * Data replication (separation by access). Some pieces of data are synchronized to multiple machines. Writes might go into one or more masters and reads normally come from the slaves. 
  * Data augmentation/shadowing. Data in one database is added to or entirely replaced by data from another database. Can happen during development when reading from a production snapshot whilst trying out changes to some tables or data only against a local database. 

Obviously, combinations of these classes are possible, such as replicated
sharded data in a huge site. There are tricks and traps to the way a developer
talks to each of these sorts of setups. I'll spend a few minutes showing
credible examples of the usage of each as well as when you might be over-
engineering by going that way. All four access patterns are possible in Django
1.2, with varying degrees of ease of use and I'll show the type of code
required in each case.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Tredinnick</dc:creator><guid>http://www.pyvideo.org/video/38/djangocon-2010--multi-database-patterns</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/38_multi-database-patterns.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-MultidatabasePatterns241.png"></media:thumbnail></item><item><title>NoSQL and Django Panel</title><link>http://www.pyvideo.org/video/47/djangocon-2010--nosql-and-django-panel</link><description>&lt;p&gt;Description&lt;/p&gt;
NoSQL and Django Panel

Featuring Jacob Burch, Russel Keith-Magee, Noah Silas, Michael Richardson,
Eric Florenzano, Curt Micol

A panel to discuss the future of no-sql/non-related databases in Django.

Abstract

The proliferation of non-SQL speaking datastores has caused a lot of discourse
and debate over their potential role in Django's decidedly SQL-speaking ORM.
The goal of this panel is to consolidate and discuss the root questions of
this debate.

The panel will consist of Django orm contributors and heavy end-users of both
Django and a variety of NoSQL database solutions. Questions to the panel will
briefly cover the NoSQL movement in general and it's staying power. After that
introduction to the debates at hand outside of Django, questions will shift to
focus closely on the issues into integrating NoSQL and Django--both on current
best practices and future plans for integrating it into the core.

</description><guid>http://www.pyvideo.org/video/47/djangocon-2010--nosql-and-django-panel</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/47_nosql-and-django-panel.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-NoSQLAndDjangoPanel848.png"></media:thumbnail></item><item><title>Pony Pwning</title><link>http://www.pyvideo.org/video/58/djangocon-2010--pony-pwning</link><description>&lt;p&gt;Description&lt;/p&gt;
Pony Pwning

Adam Baldwin

Django's awesomeness unfortunately doesn't make it impenetrable. This talk
will cover common pitfalls of the Django developer as seen through the eyes of
a hacker or malicious user.

Abstract

Django is arguably the most secure web framework. The Django team have done an
excellent job making secure-by-default decisions for our web applications in
many situations. Still, the last mile in development is where the bulk of
security vulnerabilities can be introduced and Django's powerful flexibility
allows for plenty of rope for developers to hang themselves. Understanding the
vulnerabilities that can be created by common mistakes or misconceptions and
overlooked details in development will be useful for any Django user.

</description><guid>http://www.pyvideo.org/video/58/djangocon-2010--pony-pwning</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/58_pony-pwning.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-PonyPwning519-421.jpg"></media:thumbnail></item><item><title>Rethinking the Reusable Application Paradigm</title><link>http://www.pyvideo.org/video/51/djangocon-2010--rethinking-the-reusable-applicati</link><description>&lt;p&gt;Description&lt;/p&gt;
Rethinking the Reusable Application Paradigm

Presented by Alex Gaynor

For the past few years the reusable application paradigm has been considered
one of the major selling points of Django, however the common wisdom about
what it means to make an application reusable isn't really accurate. This talk
is going to discuss ways to truly make your applications reusable across *any*
project.

Abstract

The common wisdom about reusable application says to do things like let your
views take arguments for things like the form class or the template name.
However, that doesn't satisfy most of the real need for extendability:
changing the business logic or altering models. This talk is going to look at
ways to combat these limitations:

  * Class based views 
  * By making everything overidable in a view you can absolutely minimize the need to "copy-paste" when changing the logic of things around. 
  * As seen in the admin. 
  * Do less 
  * brabeion 
  * Provide the absolute minimum at the model layer, and only small wrappers for the business logic users can implement their own logic to control how things happen. 
  * Related to the idea of "application frameworks". Providing the tools for others to build their logic around various helpers. 
  * Flexibility 
  * django-taggit 
  * Provide a concrete implementation, but allow swapping out of various layers. 
  * Don't like the Tag model, swap it out, want a new intermediary model, swap it out. 
  * django-registration 
  * Providing swappable backends to change behavior. 
  * Libraries 
  * django-filter 
  * django-fixture-generator 
  * django-templatetag-sugar 
  * django-compressor 
  * Providing tools for others to build around. 

By using these techniques you can develop reusable application that work
beyond any single use case. Of course there are cases where you don't need any
of these, and just need something that fits "traditional" reusable application
paradigm, so this talk will cover when that works as well.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><guid>http://www.pyvideo.org/video/51/djangocon-2010--rethinking-the-reusable-applicati</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/51_rethinking-the-reusable-application-paradigm.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-RethinkingTheReusableApplicationParadigm774.png"></media:thumbnail></item><item><title>Scaling the World's Largest Django Application</title><link>http://www.pyvideo.org/video/36/djangocon-2010--scaling-the-world--39-s-largest-d</link><description>&lt;p&gt;Description&lt;/p&gt;
  
Disqus, one of the largest Django applications in the world, will explain how
they deal with scaling complexities in a small startup.

</description><guid>http://www.pyvideo.org/video/36/djangocon-2010--scaling-the-world--39-s-largest-d</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/36_scaling-the-world-s-largest-django-application.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://s3.amazonaws.com/s3.mirocommunity.org/python/localtv/video_thumbs/1886/375x295.png"></media:thumbnail></item><item><title>So you want to be a core developer?</title><link>http://www.pyvideo.org/video/62/djangocon-2010--so-you-want-to-be-a-core-develope</link><description>&lt;p&gt;Description&lt;/p&gt;
So you want to be a core developer?

Presented by Russell Keith-Magee

The most important part of Django is its community of contributors -- without
contributors, Django would never improve. However, as a newcomer to Django,
the prospect of contributing may be somewhat daunting. This presentation will
show you how to make the transition from user to contributor -- what to do,
how to do it, and some guidelines on how to do the job well.

The aim of this presentation is to explain how we do things in the core, and
how to work with us to get the job done. It will cover dealing with Trac and
the triage lifecycle, how to find tickets to triage, other non-obvious ways to
contribute, and cover some basic design philosophies.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Russell Keith-Magee</dc:creator><guid>http://www.pyvideo.org/video/62/djangocon-2010--so-you-want-to-be-a-core-develope</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/62_so-you-want-to-be-a-core-developer.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-SoYouWantToBeACoreDeveloper652-390.jpg"></media:thumbnail></item><item><title>Sprints Kickoff</title><link>http://www.pyvideo.org/video/37/djangocon-2010--sprints-kickoff</link><description>&lt;p&gt;Description&lt;/p&gt;
Sprints Kickoff

Presented by Russell Keith-Magee

This is the sprints kickoff where Russell explains how sprints work and what
to expect.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Russell Keith-Magee</dc:creator><guid>http://www.pyvideo.org/video/37/djangocon-2010--sprints-kickoff</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/37_sprints-kickoff.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-SprintsKickoff627-565.jpg"></media:thumbnail></item><item><title>State of Pinax</title><link>http://www.pyvideo.org/video/55/djangocon-2010--state-of-pinax</link><description>&lt;p&gt;Description&lt;/p&gt;
State of Pinax

Brian Rosner

Pinax is a platform for rapidly building websites with Django. This talk will
cover what has happened with Pinax over the past year and where it will go in
the future.

Abstract

Pinax is a platform for rapidly building websites. It leverages Django in as
many ways possible. It handles the parts which are common amongst many sites
leaving you mostly worrying about what makes your site different.

The beginning of the talk will cover how Pinax started and where the project
is today, and review some sites built with Pinax over the past year.

The Pinax team has been hard at work with 0.9. This talk will highlight the
important improvements and fixes made to Pinax since 0.7:

  * removed requirement of pinax-boot.py 
  * enabled pip install Pinax 
  * upgraded to Django 1.2 
  * improved account, waiting list and groups 
  * introduced new starter projects 

The "must-haves" for the next release are to add or improve:

  * per-object permissions 
  * e-mail backends 
  * friends and invitations 
  * tagging (move to django-taggit) 
  * notifications / activity streams 
  * wikis (change over wiki to wakawaka) 
  * blogs (change over blog to biblion) 
  * photos 
  * profiles (to give a good answer to: "How do I add more fields to a user?") 

This talk will cover starter projects, and the layer zero concept implemented
in Pinax by default. The talk will demo a couple starter projects created
using setup_project.

Finally, the talk will cover some relevant stats over the past year, and a
roadmap for the future.

</description><guid>http://www.pyvideo.org/video/55/djangocon-2010--state-of-pinax</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/55_state-of-pinax.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-StateOfPinax119-438.jpg"></media:thumbnail></item><item><title>Step Away From That Database</title><link>http://www.pyvideo.org/video/67/djangocon-2010--step-away-from-that-database</link><description>&lt;p&gt;Description&lt;/p&gt;
Step away from that database

Presented by Andrew Godwin

A look at the large array of database types now available: where each one
excels, why NoSQL isn't always best, and the best ways to integrate them into
your Django project.

Abstract

In the last few years we've seen an explosion in the number of production-
ready databases available for web applications. From relational to document-
oriented, key-value and more, there's a staggering array of choice.

This talk covers the various basic types of database now available, and
highlights their weaknesses, their strengths, and the features you just can't
get from traditional databases.

Then, after a short rant about the term "NoSQL", learn how to best integrate
them into your Django projects, why being schemaless isn't as good as it looks
at first, and how relational databases are keeping up with the times.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Godwin</dc:creator><guid>http://www.pyvideo.org/video/67/djangocon-2010--step-away-from-that-database</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/67_step-away-from-that-database.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-StepAwayFromThatDatabase838-974.jpg"></media:thumbnail></item><item><title>Switching addons.mozilla.org from CakePHP to Django</title><link>http://www.pyvideo.org/video/59/djangocon-2010--switching-addons-mozilla-org-from</link><description>&lt;p&gt;Description&lt;/p&gt;
Switching addons.mozilla.org from CakePHP to Django

Presented by Jeff Balogh

In January of 2010 Mozilla started switching addons.mozilla.org (AMO) from
CakePHP to Django. We see about 120 million web requests per month and 1.4
million visitors per day. This talk will be a case study of scaling and
deploying a large website (and getting faster than PHP) with MySQL, memcached,
virtualenv, Celery, Hudson, Redis, MongoDB, and more.

Abstract

To scale the backend of AMO, we rely heavily on caching in memcached (and soon
Redis) to keep the load off our database, and multidb to spread the load we
can't dump off on cache. Our caching ranges from object and query caching, to
template fragment caching, up to full response caching. Frontend caching is
external to Django and won't be covered. In addition, we work hard to measure
and improve raw speed. Hitting indexes and keeping datasets small is critical,
and the Django ecosystem has many great tools to help us profile.

We create development environments using pip and virtualenv, so we naturally
started using that setup to deploy the site in production. We ran into issues
creating a reliable environment with this method; switching to a separate
vendor repository solved our problems with only a small amount of added
effort. We update and deploy new code at least once a week, and have to deal
with the additional complication of managing and interacting with parts of the
PHP site that have not been ported over.

Apart from scaling and deployment, we've customized our application in ways
that could be interesting to other Django users:

  * Jinja is our templating engine (but we keep the admin working) 
  * Babel helps us localize the site in over 30 languages 
  * Sphinx (not the documentation tool) serves our search results 
  * Celery and RabbitMQ help us do offline processing 
  * Nose and Hudson help us get over 90% code coverage in tests 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Balogh</dc:creator><guid>http://www.pyvideo.org/video/59/djangocon-2010--switching-addons-mozilla-org-from</guid><enclosure url="http://blip.tv/file/get/Robertlofthouse-SwitchingAddonsmozillaorgFromCakePHPToDjango638.ogv" length="179163402" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-SwitchingAddonsmozillaorgFromCakePHPToDjango334.png"></media:thumbnail></item><item><title>Teaching an Old Pony New Tricks: Maintaining and Updating an Aging Django Project</title><link>http://www.pyvideo.org/video/65/djangocon-2010--teaching-an-old-pony-new-tricks--</link><description>&lt;p&gt;Description&lt;/p&gt;
Teaching an Old Pony New Tricks: Maintaining and Updating an Aging Django
Project

Presented by Shawn Rider

PBS began development on its first Django project in 2006 using Django 0.96.
PBS TeacherLine launched in 2007 and continues to run today. This talk will
discuss the process for designing the PBS TeacherLine codebase, how new
advanced features were added over the years, and pitfalls you can avoid when
planning projects for longevity and easy maintenance.

Abstract

PBS chose Django after seeing a presentation by Jacob Kaplan-Moss and Adrian
Holovaty at OSCON 2006. That Fall, PBS Education began work on a new version
of the PBS TeacherLine website. The site most users see when they visit PBS
TeacherLine is essentially a brochure and catalog that allows educators to
purchase seats in online professional development courses. However, behind the
scenes is an administrative infrastructure that allows over 50 PBS stations
and PBS national staff members to administrate hundreds of course sections and
over ten thousand learners every year. There are robust features for
accounting, reporting, student and staff management just to name a few.

The TeacherLine website was initially written using Django 0.96. The site is
currently running Django 1.2 and has had major upgrades made to some of the
core systems including the implementation of a robust message queue solution
to handle the most intense administrative functions. Over the past four years,
the PBS Education Technology Team has learned many lessons about system
design, best practices, handling upgrades, and creating Django-based code that
is flexible and easy to maintain.

In this discussion we will look at some of the more interesting points in the
history of PBS TeacherLine, including design patterns, workarounds that were
eventually made obsolete by improvements in the Django framework, and the
process of iteratively improving functionality and features. We will discuss
successes and failures, including the pitfalls we avoided and (perhaps more
interestingly) those we did not.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shawn Rider</dc:creator><guid>http://www.pyvideo.org/video/65/djangocon-2010--teaching-an-old-pony-new-tricks--</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/65_teaching-an-old-pony-new-tricks-maintaining-and-updating-an-aging-django-project.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-TeachingAnOldPonyNewTricksMaintainingAndUpdatingAnAgin531-41.jpg"></media:thumbnail></item><item><title>Technical Design Panel</title><link>http://www.pyvideo.org/video/43/djangocon-2010--technical-design-panel</link><description>&lt;p&gt;Description&lt;/p&gt;
Technical Design Panel

Featuring Justin Braun, Karen Tracy, Russel Keith-Magee, Brian Rosner, Janis
Leidel, Gary Wilson

Come one! Come all! Pay sixpence to see the freaks! Real Live Core Developers,
answering questions for your edification!

Abstract

This is a repeat of the ever-popular "hit the core developers with hard
questions" panel.

Covers issues brought up by Eric's talk, checkin rights, portable apps, the
global settings file, backwards incompatible changes, contrib, educating users
on finding tools and libraries, what's coming in django 1.3, memory usage in
django, required resources for django core development, best part of django
today, and problems with external dependencies not shipped with django.

</description><guid>http://www.pyvideo.org/video/43/djangocon-2010--technical-design-panel</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/43_technical-design-panel.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-TechnicalDesignPanel332.png"></media:thumbnail></item><item><title>Topics of Interest</title><link>http://www.pyvideo.org/video/45/djangocon-2010--topics-of-interest</link><description>&lt;p&gt;Description&lt;/p&gt;
Topics of Interest

Presented by James Bennett

Inspired by Ian Bicking's session of the same name at PyCon 2009, this will be
a somewhat eclectic talk covering various subjects near and dear to the
speaker's heart, including Django's release process, best practices for
application development and what the future holds for our favorite Python web
framework.

Abstract

This talk will come in, roughly, four parts:

  * The release process 
    * How Django gets made 
    * Things we've screwed up 
    * Things (I think) we've gotten right 
    * The unsung heroes who make Django happen 
  * The state of Django applications 
    * A summary of current best practices for development, documentation, packaging, collaboration, etc. 
    * Common issues and ways to fix them 
    * "There's an app for that" and its discontents 
  * The future 
    * Musings on Django 1.3 and 1.4 
    * Python 3: when will we get there, and what will it mean for us? 
    * The world is changing; how can we change with it? 
  * General Q&amp;A;

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Bennett</dc:creator><guid>http://www.pyvideo.org/video/45/djangocon-2010--topics-of-interest</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/45_topics-of-interest.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-TopicsOfInterest641.png"></media:thumbnail></item><item><title>Treehugging</title><link>http://www.pyvideo.org/video/50/djangocon-2010--treehugging</link><description>&lt;p&gt;Description&lt;/p&gt;
Treehugging

Presented by Brian Luft

Hierarchical data sprouts up almost everywhere, but not all trees look alike.
Learn to how tell them apart and love them all in Django.

Abstract

This talk would cover some common examples of hierarchical data in web
applications and then review solutions like django-mptt and django-treebeard.
Rather than trying to cover tree algorithms in-depth, the focus would be on
best practices for querying and rendering trees in your Django apps.

This talk is not geared for the smart kids; they already know this stuff. It
is intended to help less experienced developers take advantage of patterns
without needing to worry about the deeper concepts.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Luft</dc:creator><guid>http://www.pyvideo.org/video/50/djangocon-2010--treehugging</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/50_treehugging.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-Treehugging694.png"></media:thumbnail></item><item><title>Typewar: A Case Study</title><link>http://www.pyvideo.org/video/64/djangocon-2010--typewar--a-case-study</link><description>&lt;p&gt;Description&lt;/p&gt;
Typewar: A Case Study

Presented by James Tauber

Typewar is a popular font-guessing game built with Django and Pinax. This talk
will cover everything from game mechanics and statistics to development of an
API for an iPhone client and from how we promoted and launched the site to the
performance challenges we faced.

Abstract

Typewar was developed as a side project at Eldarion and went from concept to
launch in a matter of weeks. The first day saw 5,000 visitors and since then,
over 50,000 people have attempted to "guess the typeface" more than 5 million
times.

The talk will cover:

  * how we went from concept to design mockup to prototype 
  * game mechanics such as: 
    * points 
    * levels 
    * badges 
    * streaks 
    * leader boards 
    * stats (with lots of bayesian goodness) 
  * generation of glyphs with PIL 
  * mitigation against cheaters 
  * twitter integration 
  * migrating unauthenticated user data over on sign up / log in 
  * activity streams 
  * performance challenges 
  * database optimizations 
  * queuing of asynchronous tasks 
  * development of an API for use in an iPhone client 
  * deployment 
  * how we promoted and launched the site 

We will also discuss various open source Django apps that have been extracted
from the project and used on subsequent sites by us and others.

[http://typewar.com/](http://typewar.com/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Tauber</dc:creator><guid>http://www.pyvideo.org/video/64/djangocon-2010--typewar--a-case-study</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/64_typewar-a-case-study.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-TypewarACaseStudy770-135.jpg"></media:thumbnail></item><item><title>Welcome and Chairman's Address</title><link>http://www.pyvideo.org/video/46/djangocon-2010--welcome-and-chairman--39-s-addres</link><description>&lt;p&gt;Description&lt;/p&gt;
Welcome and Chairman's Address

Presented by Steve Holden

[VIDEO HAS ISSUES: Looks like the presentation started before recording.]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Holden</dc:creator><guid>http://www.pyvideo.org/video/46/djangocon-2010--welcome-and-chairman--39-s-addres</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/46_welcome-and-chairman-s-address.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-WelcomeAndChairmansAddress563.png"></media:thumbnail></item><item><title>Why Django Sucks, and How We Can Fix It</title><link>http://www.pyvideo.org/video/44/djangocon-2010--why-django-sucks--and-how-we-can-</link><description>&lt;p&gt;Description&lt;/p&gt;
Why Django Sucks, and How We Can Fix It

Presented by Eric Florenzano

Eric Florenzano trolls DjangoCon. He identifies problems with Django ranging
from app structure, to settings, to the development process, to the community,
and more. Some of the problems he identifies have been around since the
beginning, and some are emerging as Django matures. It's not all gloom—the
latter half of the talk focuses on proposals on how to tackle these issues
that face Django.

Abstract

This talk focuses on real problems that people face when using Django every
day. It dives down and attempts to find root causes for each of these
problems. Essentially, what are the things that suck about Django?

Then the talk walks point-by-point for each of the things that suck, and
provides suggestions for actions that the Django community can take to make
them suck less.

The goal here is to start a discussion, to bring to light the problems that
tend to be ignored, and to have a little fun in the process.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Florenzano</dc:creator><guid>http://www.pyvideo.org/video/44/djangocon-2010--why-django-sucks--and-how-we-can-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/44_why-django-sucks-and-how-we-can-fix-it.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/Robertlofthouse-WhyDjangoSucksAndHowWeCanFixIt128.png"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of PyCon FR 2013</title><link>http://www.pyvideo.org/category/73/pycon-fr-2013/rss</link><description></description><atom:link href="http://www.pyvideo.org/category/73/pycon-fr-2013/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sat, 30 Nov 2013 00:00:00 -0600</lastBuildDate><ttl>500</ttl><item><title>Ansible, de l'orchestration à la gestion de configuration</title><link>http://www.pyvideo.org/video/3735/ansible-de-lorchestration-a-la-gestion-de-confi</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Administrateur systéme de profession, j'utilise puppet à mon travail pour les serveurs. Mais nous n'avions pas d'outil d'orchestration pour mon équipe, ce qui a vite été un leger désagrement. Et Ansible est arrivé, avec le support de kerberos, me permettant d'agir rapidement partout avec la rapidité d'un ninja.

Ansible est un outil de gestion de machine trés souple. Sans avoir besoin d'autre chose que ssh, ce dernier permet aussi bien d'orchester un cluster de machines via des opérations ad-hoc que d'appliquer une configuration décrite en yaml pour remettre un systéme dans le droit chemin. Cet présentation va faire découvrir l'outil, pour des taches simples jusqu'à la gestion compléte de la configuration, et comment l'intégrer directement dans un script python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Scherer</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3735/ansible-de-lorchestration-a-la-gestion-de-confi</guid><enclosure url="https://www.youtube.com/watch?v=gk9H_nEPRo8" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/gk9H_nEPRo8/maxresdefault.jpg"></media:thumbnail></item><item><title>Architecture en Webservices avec Django</title><link>http://www.pyvideo.org/video/3728/architecture-en-webservices-avec-django</link><description>&lt;p&gt;Abstract&lt;/p&gt;
L'architecture d'une plateforme sous forme de webservices est de plus en plus commune. Comment Django peut-il aider à mettre en place une telle architecture ?

L'architecture d'une plateforme sous forme de webservices est de plus en plus commune. Quels sont les avantages et problèmes d'une telle architecture ? Comment Django peut-il aider à mettre en place une telle architecture, du coté du serveur comme du coté du client ? Qu'en est-il des performances ?</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Xavier Ordoquy</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3728/architecture-en-webservices-avec-django</guid><enclosure url="https://www.youtube.com/watch?v=GHMgXXNOu0g" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/GHMgXXNOu0g/maxresdefault.jpg"></media:thumbnail></item><item><title>Brewery : mettez un Python dans votre robot !</title><link>http://www.pyvideo.org/video/3746/brewery-mettez-un-python-dans-votre-robot</link><description>&lt;p&gt;Abstract&lt;/p&gt;
La BH Team participe depuis 7 ans à la Coupe de France de Robotique.

Ce challenge consiste en la conception et la réalisation complète d'un robot autonome en énergie et en commande. Les robots ainsi réalisés s'affrontent dans des matchs d'une durée de 90 secondes, sans intervention de leurs concepteurs. La principale difficulté de cette compétition est que son règlement, diffusé 9 mois à l'avance seulement, implique systématiquement un changement presque total des contraintes du jeu.

A un moment de notre parcours, nous avons eu le besoin de pouvoir décrire dans un langage de haut niveau notre stratégie. Notre expérience dans le développement logiciel nous a amené à choisir le langage Python.

Trois ans après la première édition du framework "Brewery", voici une présentation de ses capacités et des avantages qu'il confère à l'équipe.

Nous commencerons par une explication du contexte de la compétition, de l'évolution des différents modules développés par l'équipe au fur et à mesure des années, et enfin nous détaillerons les points remarquables du framework.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Éric Alber,Yannick Jost</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3746/brewery-mettez-un-python-dans-votre-robot</guid><enclosure url="https://www.youtube.com/watch?v=ud_E7D7l5Oc" length="None" type="video/flv"></enclosure><media:thumbnail url="/static/videos/img/no_thumbnail.png"></media:thumbnail></item><item><title>Comment faire pousser des forets aleatoires dans les nuages</title><link>http://www.pyvideo.org/video/3738/comment-faire-pousser-des-forets-aleatoires-dans</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Présentation de l'implémentation d'une méthode d'apprentissage statistique à la mode avec scikit-learn, IPython.parallel et des machines dans le cloud.

scikit-learn est une lib de Machine Learning écrite en Python. Son implémentation de l'algorithme des forets aléatoires a beaucoup de succès auprès des "Data Scientists" [1] qui participent aux compétitions de Machine Learning sur le site kaggle.com. Cette présentation sera l'occasion de présenter comment paralléliser la culture de telles forets grâce à un cluster de calcul provisionné dans le cloud.

Cette présentation sera l'occasion de rappeler les concepts de base du Machine Learning et de présenter rapidement les projets scikit-learn et IPython.

Nous nous intéresseront ensuite plus particulièrement à l'algorithme des random forests (ou plutôt de sa variante belge appelée Forests of Extremely Randomized Trees) et comment accélérer l'apprentissage de grandes forets grâce au module de calcul distribué du projet IPython et à un cluster de machines monté dans un cloud public tel que Amazon, Rackspace, Microsoft Azure ou Digital Ocean.

Si vous êtes sage vous aurez peut être droit à une démo live.

[1] un statisticien qui utilise un macbook air.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olivier Grisel</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3738/comment-faire-pousser-des-forets-aleatoires-dans</guid><enclosure url="https://www.youtube.com/watch?v=DDnyRC2Lkdc" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/DDnyRC2Lkdc/maxresdefault.jpg"></media:thumbnail></item><item><title>Deployment and Continuous integration of a Plone/Zope application</title><link>http://www.pyvideo.org/video/3736/deployment-and-continuous-integration-of-a-plone</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Cette conférence vous montrera comme nous utilisons Jenkins, Puppet et d'autres outils pour automatiser le déploiement et le test d'une application python de type Zope/Plone sur plusieurs machines. Ce que nous avons appris, les logiciels que nous utilisons, ce qui n'a pas fonctionné...

Le système de buildout de plone et virtualenv sont des outils largement utilisés pour développer et déployer des applications plone. Mais une fois qu'il y a plusieurs nodes à déployer et que vous souhaitez être sur de la fiabilité de votre code avant vos déploiements, un buildout manuel sur chaque serveur est à proscrire.

Nous utilisons Jenkins, Puppet, mcollective et d'autres outils pour packager et tester l'application, avant le déploiement sur nos serveurs. Nous l'avons fait pour déployer plus vite avec moins de risques un code de meilleure qualité.

Nous avons énormément appris et souhaitons partager notre expérience.

The Plone/Zope Buildout system and virtualenv are common tools to develop and build your plone application. But once you have several nodes to deploy and you want to trust your code before deploying it, and a manual buildout is something you should avoid.

We use Jenkins, Puppet, Mcollective and some other tools to package and test the application, before deploying it to several nodes. We made it happen to be confident with our code and to deploy faster with less risks.

We learned a lot and we want to share our experience about it.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julien Pivotto</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3736/deployment-and-continuous-integration-of-a-plone</guid><enclosure url="https://www.youtube.com/watch?v=ykzN8gSpIjM" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/ykzN8gSpIjM/maxresdefault.jpg"></media:thumbnail></item><item><title>Déprimé, au bord du burn-out et ...</title><link>http://www.pyvideo.org/video/3744/deprime-au-bord-du-burn-out-et</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Déprimé, au bord du burn-out, et pourtant il faut continuer à coder

Que ce soit pendant ses heures de boulot ou le soir et les week-ends, coder demande d'avoir un minimum de tranquillité et de sérénité. Comment faire pour continuer à prendre du plaisir à coder lorsque stress, délais infernaux, demandes utilisateurs ubuesques nous entraînent plutôt vers le burn-out et la déprime.

Cette conférence, basée sur mon expérience personnelle, a pour but de donner quelques pistes pour détecter les problèmes d'épuisement professionnel et tenter de les résoudre. Remèdes de 'grand-mère', questions à se poser, organisation du travail, réflexion sur la façon de développer, tout cela sera discuté pendant cette session.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Michel Armand</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3744/deprime-au-bord-du-burn-out-et</guid><enclosure url="https://www.youtube.com/watch?v=pbjSYecvLxk" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/pbjSYecvLxk/maxresdefault.jpg"></media:thumbnail></item><item><title>Depsolver, une librairie pour la gestion de dépendences</title><link>http://www.pyvideo.org/video/3740/depsolver-une-librairie-pour-la-gestion-de-depen</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Les outils "easy_install/pip" sont devenus populaires en partie grâce à l'incorporation d'un système de dépendances. Depsolver est une librairie conçue pour résoudre les problèmes de dépendance plus complexes que pip et easy_install ne peuvent pas résoudre. La librairie est pure python, et conçue pour être réutilisable par de futures systèmes d'installations (python ou autre).</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cournapeau</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3740/depsolver-une-librairie-pour-la-gestion-de-depen</guid><enclosure url="https://www.youtube.com/watch?v=HAoAstK95UE" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/HAoAstK95UE/maxresdefault.jpg"></media:thumbnail></item><item><title>du beau code Perl</title><link>http://www.pyvideo.org/video/3724/du-beau-code-perl</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Répondant à la demande qui m'avait été faite l'an dernier de montrer du "beau code perl", je montre les similarités conceptuelles entre les 2 langages , les différences syntaxiques et (SPOIL) conclus que tout ça n'est qu'affaire de gout.

Attention: cette présentation n'est pas pour ceux qui pensent que la programmation peut être un job alimentaire!

Lors de ma présentation à pycon 2011, je faisais l'éloge du multiculturalisme et de la curiosité. A cette occasion, il m'avait été demandé de montrer du beau code Perl (illustration que la subjectivité a laquelle j'appellais l'auditeur ne va pas de soit)

Il s'agit donc de montrer une forme de beauté, comme un guide de musée tenterait de sensibiliser un photographe au cubisme.

Je pars donc des "belles choses" de python (list comprehensions, yield/send, magic **, operator overload, metaprogramming, application partielle) et de ses rigueurs esthétiques pour en arriver aux concepts sous-jacents et montrer comment ils s'expriment en Perl. 2 tableaux montrant la même idée, le gout faisant le reste, sans jugement de valeur.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc Chantreux</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3724/du-beau-code-perl</guid><enclosure url="https://www.youtube.com/watch?v=PohwAdkaVcY" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/PohwAdkaVcY/maxresdefault.jpg"></media:thumbnail></item><item><title>élégants objets</title><link>http://www.pyvideo.org/video/3754/elegants-objets</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Qu'est ce qui rend Python et sa bibliothèque standard si attrayants ? Et comment créer des objets qui ont les mêmes qualités ?

Un bref rappel des peps 8 et 20 pour évoquer la philosophie du langage; notamment les éléments de son modèle conceptuel qu'il faut garder à l'esprit quand on écrit une classe.

Seront ensuite présentés divers protocoles du langages: constructeur et destructeur, conversion de types, hachage et comparaison, opérateurs, dérivation , gestion des ressources, énumération... et de la bibliothèque standard: documentation et débogage, pickle et copy ...

Ces protocoles documentés sont l'arbre qui cache la forêt : il existe une foule d'archétypes plus implicites, que les programmeurs ont déjà rencontré dans les modules qu'ils ont utilisé; et qu'ils s'attendront implicitement à retrouver dans vos objets. Comment découvrir ces archétypes et les reproduire ?</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sébastien Keim</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3754/elegants-objets</guid><enclosure url="https://www.youtube.com/watch?v=WezVJSzqv1Y" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/WezVJSzqv1Y/maxresdefault.jpg"></media:thumbnail></item><item><title>Evy</title><link>http://www.pyvideo.org/video/3725/evy</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Evy est un serveur d'intégration continu, distribué et modulaire. Basé sur Redis, Evy donna la possibilité de distribuer des jobs à travers un réseau de Workers.

De plus, de par son aspect modulaire, Evy permet à tout développeur d'ajouter facilement de nouveaux modules qui réaliseront diverses taches.

Le projet est en cours de développement.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephane Wirtel</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3725/evy</guid><enclosure url="https://www.youtube.com/watch?v=OqF_Eo7jNxQ" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/OqF_Eo7jNxQ/maxresdefault.jpg"></media:thumbnail></item><item><title>Gestion des data centers et clusters à Facebook</title><link>http://www.pyvideo.org/video/3742/gestion-des-data-centers-et-clusters-a-facebook</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Facebook est une entreprise où l'infrastructure grandit plus vite que le nombre de personnes qui composent les équipes d'administration système. Facebook a donc décidé d'automatiser les processus liés à l'infrastructure. Cette présentation portera sur l'outil qui permet à Facebook d'automatiser la mise en place de nouveaux datacenters et clusters ainsi que leurs cycles de vie.

Afin de gérer un nombre croissant d'utilisateurs et une activité qui s'intensifie, Facebook a besoin de faire évoluer rapidement son infrastructure. C'est pour cela que nous ajoutons, sortons, remettons en production des data centers et des clusters de façon quasi quotidienne. L'infrastructure de Facebook se développant très vite, il devient de plus en plus complexe de gérer tous ces éléments individuellement. Facebook a résolu le problème en écrivant un logiciel qui automatise toutes les étapes qui composent le cycle de vie d'un cluster. Cette conférence portera sur la façon dont Facebook a mis en place ce processus d'automatisation et comment Python a permis de créer un logiciel flexible qui fait interagir tous les éléments d'infrastructure.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephan Gorget</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3742/gestion-des-data-centers-et-clusters-a-facebook</guid><enclosure url="https://www.youtube.com/watch?v=jkpvLtdLkBc" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/jkpvLtdLkBc/maxresdefault.jpg"></media:thumbnail></item><item><title>How to manage over 1000contributors in a Python open source project</title><link>http://www.pyvideo.org/video/3727/how-to-manage-over-1000contributors-in-a-python-o</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Very large development: How to manage over 1000 contributors in a Python open source project

In this talk I want to present how the OpenStack project (one of the largest Open Source projects in Python) deals with QA, Peer Review and general quality control of the patch submissions. I will cover the tools, guidelines and best practice put in place to manage the complexity.

OpenStack is a very large project with over 1.6 million lines of code, over 1000 active contributors and approximately 4000 commits per month. At least according to the latest stats from Ohloh.net. And this project is written (almost) completely in Python. This makes OpenStack one of the largest active open source projects written in this language.

In this presentation I will to talk about the challenges of large scale collaboration in Python projects and the solutions set up by the OpenStack community to address them. By studying the typical life cycle of a patch, I will present the tools involved in testing, peer review, continuous integration, as well as the tools enforcing community policies like style checking or maintaining compatibility across different Python versions.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Hakim Rahme</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3727/how-to-manage-over-1000contributors-in-a-python-o</guid><enclosure url="https://www.youtube.com/watch?v=mRSBNoPptPM" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/mRSBNoPptPM/maxresdefault.jpg"></media:thumbnail></item><item><title>Hy, a Lisp on Python</title><link>http://www.pyvideo.org/video/3747/hy-a-lisp-on-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Hy (https://github.com/hylang/hy) is an implementation of a Lisp language on top of Python. It The project has been started this year, and is making good progress, since a lot of code can already be executed. Compatibility with Python is one of its core attribute, and in this regard it follows the path that Clojure took with Java.

This talk will present you what Hy is, how it works internally (briefly), what you can accomplish with it, how to contribute, and obviously how to write code with it!</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julien Danjou</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3747/hy-a-lisp-on-python</guid><enclosure url="https://www.youtube.com/watch?v=ah9fwabLD70" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/ah9fwabLD70/maxresdefault.jpg"></media:thumbnail></item><item><title>Interfaces tactiles et mobiles avec Kivy</title><link>http://www.pyvideo.org/video/3723/interfaces-tactiles-et-mobiles-avec-kivy</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Kivy est un framework multitouch fonctionnant sur la plupart des plateformes desktop et mobiles. Entièrement écrit en python, et basé sur opengl ES, il est facilement extensible et offre de très bonnes performances, et permet donc de développer rapidement des applications mobiles (android et iOS).

Cette présentation de kivy pour le développement mobile présentera:

Le framework lui même, et son api, via des exemples simples. - le modele d'évenements et de property - les principeaux widgets - le language KV

Les outils d'interfaces avec les plateformes mobiles - Pyjnius - Pyobjus

Les outils de packaging - déploiement sur android/ios - Python-for-android - Kivy-ios - Buildozer/cloud builder</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriel Pettier</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3723/interfaces-tactiles-et-mobiles-avec-kivy</guid><enclosure url="https://www.youtube.com/watch?v=NgKXTnyiT7s" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/NgKXTnyiT7s/maxresdefault.jpg"></media:thumbnail></item><item><title>Introduction à Rust</title><link>http://www.pyvideo.org/video/3749/introduction-a-rust</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Rust est un langage de programmation « systèmes » qui se veux sûr, concurrent, et pragmatique. Un de ses objectifs est de remplacer C/C++ dans les domaines où un langage plus « haut niveau » tel que Python n'est pas adapté : noyau de système d'exploitation, système temps-réel, moteur de navigateur web, etc.

Servo, un projet de Mozilla Research, est un moteur de rendu pour le web (tout comme Gecko est le moteur de Firefox) écrit en Rust et conçu pour tirer parti autant que possible du matériel moderne (multi-cœur) grâce aux fonctionnalités concurrentes de Rust.

- Présentation du langage: typage statique, sûreté et justesse vérifiés par le compilateur, pointeurs uniques, pointeurs empruntés, tranches de vecteurs, etc.
- État du projet (pré-1.0)
- Comment Servo gère les changements dans le langage et la bibliothèque standard.
- Mon ressenti après avoir travaillé sur Servo et WeasyPrint (Python), deux implémentations des même spécifications CSS.
- Une suite de tests basées sur des données, et partagée entre plusieurs implémentations.
- Comment utiliser Rust et Python dans le même programme, avec CFFI
- Courte introduction à la théorie des types, et aux types algébriques de données.
- Les types « sommes » sont des « unions taggées » en C, et des enum en Rust. (Plus général que Enum dans la PEP 435.) Pourrait-on avoir quelque chose de similaire en Python ?</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Sapin</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3749/introduction-a-rust</guid><enclosure url="https://www.youtube.com/watch?v=qjxihcTJZ34" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/qjxihcTJZ34/maxresdefault.jpg"></media:thumbnail></item><item><title>La domotique en Python et HTML5</title><link>http://www.pyvideo.org/video/3745/la-domotique-en-python-et-html5</link><description>&lt;p&gt;Abstract&lt;/p&gt;
On verra comment architecturer une solution domotique simple en python en utilisant des périphériques électroniques sur une carte avec linux embarquée comme un Raspberry Pi ou une Beagle Bone Black.

On verra également comment mettre en place un système d'évènements et un moteur de règles en python pour la gestion domotique.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Schemoul</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3745/la-domotique-en-python-et-html5</guid><enclosure url="https://www.youtube.com/watch?v=UHOgBzvBRq0" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/UHOgBzvBRq0/maxresdefault.jpg"></media:thumbnail></item><item><title>Le packaging : où est est-on ?</title><link>http://www.pyvideo.org/video/3733/le-packaging-ou-est-est-on</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Wheel, pypi, setuptools... l'actualité du packaging a été riche en 2013. Petit état des lieux.

- Pourquoi utiliser le nouveau format wheel ?
- Que s'est-il passé cette année pour que l'installation de package python soit plus simple, fiable et rapide ?
- Distribute ou setuptools ?

Le packaging s'est peut-être enfin simplifié cette année, nous verrons pourquoi et comment en profiter.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christophe de Vienne</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3733/le-packaging-ou-est-est-on</guid><enclosure url="https://www.youtube.com/watch?v=-Wx3FToSPT8" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/-Wx3FToSPT8/maxresdefault.jpg"></media:thumbnail></item><item><title>Les effets de bord du Global Interpreter Lock</title><link>http://www.pyvideo.org/video/3750/les-effets-de-bord-du-global-interpreter-lock</link><description>&lt;p&gt;Abstract&lt;/p&gt;
"C'est seulement dans le cas de programmes multi-threadés qui passent beaucoup de temps au sein du GIL à interpréter du bytecode CPython que le GIL devient un goulot d'étranglement"

C'est ainsi que le GIL est présenté sur wiki.python.org jusqu'en 2009. Suite aux travaux de David Beazley (http://www.dabeaz.com) en 2009 et 2010, la communauté Python découvre que les effets du GIL vont au delà.

En effet, l'implémentation du GIL met en oeuvre une mécanique complexe qui ajoute un overhead important d'appels systèmes, particulièrement sur les processeurs multi-coeurs. De plus, le GIL pertube la livraison des signaux. Enfin, le GIL peut provoquer le scheduling de threads CPU bound avant celui de threads I/O bound, provoquant une dégradation des performances.

Ce talk s'appuyant sur les travaux de David Beazley (avec son aimable autorisation) tentera de donner une explication claire et détaillée aux effets de bord du GIL mentionnés ci-dessus.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrien Guillo</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3750/les-effets-de-bord-du-global-interpreter-lock</guid><enclosure url="https://www.youtube.com/watch?v=eXY9CaFO254" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/eXY9CaFO254/maxresdefault.jpg"></media:thumbnail></item><item><title>Les merveilles internes des objets du CPython</title><link>http://www.pyvideo.org/video/3734/les-merveilles-internes-des-objets-du-cpython</link><description>&lt;p&gt;Abstract&lt;/p&gt;
En connaître plus sur l'implémentation d'un langage aide à être plus efficace quand on code. CPython est l'implémentation la plus utilisée et ses objets contiennent plein de merveilles. On découvrira quelques merveilles trouvées dans l'implémentation de la liste, du dictionnaire, de la chaîne de caractères et de l'entier.

On se posera les questions suivantes:

Qu'est-ce qui rend rapide la méthode "append" de la liste ?
Qu'est-ce qui est fait en interne pour accélérer la recherche d'une clé dans un dictionnaire ?
Qu'est-ce qui permet d'optimiser la mémoire utilisée par les entiers ?
On répondra à ces questions et on découvrira d'autres petites merveilles internes. Beaucoup de diagrammes seront utilisés pour être le plus clair possible. On montrera les différences entre Python 2.x et Python 3.x.

Sommaire:

Quelques merveilles internes de la liste:

- Le grand O de la méthode "append".
- L'algorithme de tri "timsort".

Quelques merveilles internes du dictionnaire:

- Redimensionnement du dictionnaire.
- Résolution des collisions.

Quelques merveilles internes de la chaîne de caractères:

- Partage des petites chaînes.
- L'algorithme de la méthode "find".

Quelques merveilles internes de l'entier:

- Partage des petits entiers.
- Groupes d'entiers.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laurent Luce</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3734/les-merveilles-internes-des-objets-du-cpython</guid><enclosure url="https://www.youtube.com/watch?v=QgDeh3IR0fs" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/QgDeh3IR0fs/maxresdefault.jpg"></media:thumbnail></item><item><title>Lightning Talks</title><link>http://www.pyvideo.org/video/3737/lightning-talks-16</link><description></description><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3737/lightning-talks-16</guid><enclosure url="https://www.youtube.com/watch?v=wGeGOzB1MBk" length="None" type="video/flv"></enclosure><media:thumbnail url="/static/videos/img/no_thumbnail.png"></media:thumbnail></item><item><title>Mercurial, avec des vrais morceaux de python</title><link>http://www.pyvideo.org/video/3732/mercurial-avec-des-vrais-morceaux-de-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Mercurial, avec des vrais morceaux de python dedans

En 2005 Matt Mackall choisissait Python pour écrire un gestionnaire de version. 8 ans plus tard Mercurial est un projet reussi. Grâce à Python ? Voyons ensemble ce que python apporte aux developeurs mais aussi, à travers son système d'extensions, aux utilisateurs.

En 2005 Matt Mackall choisissait Python pour écrire un gestionnaire de version. 8 ans plus tard Mercurial est un projet reussi. Grâce à Python ? Dans cette présentation, nous aborderons d'abord les atouts de Python pour les developpeurs de Mercurial.

Nous prendrons ensuite le point de vue de l'utilisateur en montrant comment le systéme d'extensions tire parti du language. Certaines limitations de l'interpréteur python posent parfois problème. Nous presenterons comment celles-cis peuvent être contournées grace à des extension écrites en C ou des algorithmes adaptés.

Pour finir nous detaillerons des cas d'utilisation avancés que seul python à rendu possible.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexis Métaireau,Pierre-Yves David</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3732/mercurial-avec-des-vrais-morceaux-de-python</guid><enclosure url="https://www.youtube.com/watch?v=AWuomjXDsO0" length="None" type="video/flv"></enclosure><media:thumbnail url="/static/videos/img/no_thumbnail.png"></media:thumbnail></item><item><title>Numeter open source graphs system</title><link>http://www.pyvideo.org/video/3726/numeter-open-source-graphs-system</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Numeter est un projet open source visant à collecter et grapher des données (cpu, ram, ...). Entièrement en python, pensé en brique de façon à laisser le choix d'utiliser l'une ou l'ensemble. Le but est de proposer une solution de graph avec une autre vision : celle d'un hébergeur et acteur du cloud.

Numeter est un projet open source visant à collecter et grapher des données (cpu, ram, ...). Entièrement en python, pensé en brique de façon à laisser le choix d'utiliser l'une ou l'ensemble. Le but est de proposer une solution de graph avec une autre vision : celle d'un hébergeur et acteur du cloud.

En tant qu'hébergeur, nous faisons face à un grand nombre de machines à grapher avec des données métier spécifiques à nos clients. Notre besoin est de pouvoir deployer de façon rapide et automatique les graphs sur des machines.

La philosophie Numeter est de créer un système qui va permettre d'être compatible avec l'existant pour profiter du meilleur de chaque solution.

Numeter est une solution scalable, dynamique, solide et ouverte avec pour objectifs :

- Résister aux coupures réseau et aux crashs de services (Graph at anytime).
- Etre entièrement scalable (Cloud compliant).
- Ouvert et standard (Graph everythings)
- Etre entiérement automatisé (No human actions)
- Gérer le multi utilisateurs (Access and control)

Cette présentation vous permettra de comprendre l'architecture de Numeter, les librairies Python utilisées pour l'implémenter et vous expliquera comment y contribuer.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gaël Lambert</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3726/numeter-open-source-graphs-system</guid><enclosure url="https://www.youtube.com/watch?v=FgF22pqnJFI" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/FgF22pqnJFI/maxresdefault.jpg"></media:thumbnail></item><item><title>Porter le modèle de concurrence de GO en Python</title><link>http://www.pyvideo.org/video/3748/porter-le-modele-de-concurrence-de-go-en-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Beaucoup de gens tentent de porter le modèle d'acteur en Python, mais ce modèle n'est pas vraiment adapté à un tel langage. Au contraire le modèle de concurrence de Go a quelques points attractifs qui permettent de le porter facilement sous Python.

Offset est une librairie compatible Python 2.7, 3.x et pypy. Cette présentation présentera de façon détaillée la librairie Offset et comment le modèle de concurrence de Go y est implementée. Je présenterais aussi comment utiliser Offset pour créer des programmes concurrents exploitant tous les CPUs de votre système.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benoit Chesneau</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3748/porter-le-modele-de-concurrence-de-go-en-python</guid><enclosure url="https://www.youtube.com/watch?v=BGRnVNs7A28" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/BGRnVNs7A28/maxresdefault.jpg"></media:thumbnail></item><item><title>PyPy : une implémentation rapide de Python</title><link>http://www.pyvideo.org/video/3743/pypy-une-implementation-rapide-de-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
PyPy est l'implémentation la plus rapide de Python, cette présentation répondra à deux questions "Comment fonctionne PyPy ?" et "Qu'est-ce que PyPy peut m'apporter ?".

- L'histoire de PyPy (un projet vieux de 10 ans)
- Comment fonctionne PyPy ?
- Qu'est-ce que PyPy peut m'apporter ?
- Le futur de PyPy
- Questions</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Romain Guillebert</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3743/pypy-une-implementation-rapide-de-python</guid><enclosure url="https://www.youtube.com/watch?v=yNuEPXvZWg0" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/yNuEPXvZWg0/maxresdefault.jpg"></media:thumbnail></item><item><title>Rendez votre code Python plus beau !</title><link>http://www.pyvideo.org/video/3752/rendez-votre-code-python-plus-beau</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Apprenez à mieux utiliser les possibilités de Python pour rendre votre code plus élégant, plus lisible, plus performant. Avec de nombreux exemples que vous pourrez appliquer dès demain sur votre propre code.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ronan Amicel</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3752/rendez-votre-code-python-plus-beau</guid><enclosure url="https://www.youtube.com/watch?v=8cZWSnPOy5M" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/8cZWSnPOy5M/maxresdefault.jpg"></media:thumbnail></item><item><title>Retour sur Daybed (Form validation as a service)</title><link>http://www.pyvideo.org/video/3730/retour-sur-daybed-form-validation-as-a-service</link><description>&lt;p&gt;Abstract&lt;/p&gt;
L'an dernier, à PyconFR, nous avions présenté rapidement une preuve de concept de Daybed, un système de validation de formulaires proposé "as a service".

J'aurais aimé proposer un retour sur le produit, sur comment l'utiliser mais aussi sur comment on l'à implémenté.

Daybed est construit par dessus pyramid, qui nous à permis de faire des choses vraiment interessantes de manière efficace.

J'aimerais présenter certains aspects interessants, par exemple comment nous avons impléménté les ACLs grace au système proposé par pyramid, ou comment daybed réutilise Colander pour la validation de données.

Cette présentation montrera aussi comment daybed peut vous aider à créér des applications "full javascript" de manière rapide et efficace.

Le projet est disponible à l'adresse https://github.com/spiral-project/daybed</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexis Métaireau</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3730/retour-sur-daybed-form-validation-as-a-service</guid><enclosure url="https://www.youtube.com/watch?v=n55dyB_L8xw" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/n55dyB_L8xw/maxresdefault.jpg"></media:thumbnail></item><item><title>Retour sur les djangocongs 2013</title><link>http://www.pyvideo.org/video/3729/retour-sur-les-djangocongs-2013</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Un retour sur les Djangocongs Belfort.

Comment c'était, qu'est ce qu'on y a fait ? De quoi on a parlé ? Est ce qu'il faisait beau, Qu'est ce qu'on y a mangé ? A quoi on a joué et est ce qu'on a plongé dans l'étang ? Qu'est ce qu'on y a codé et qu'est ce qu'on y a imaginé ?

Si vous les avez raté, vous saurez tout sur les Djangocongs 2013</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Michel Armand</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3729/retour-sur-les-djangocongs-2013</guid><enclosure url="https://www.youtube.com/watch?v=Mj31wAtkepI" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/Mj31wAtkepI/maxresdefault.jpg"></media:thumbnail></item><item><title>SaltStack, outil simple et efficace de gestion de configuration</title><link>http://www.pyvideo.org/video/3739/saltstack-outil-simple-et-efficace-de-gestion-de</link><description>&lt;p&gt;Abstract&lt;/p&gt;
SaltStack est à l'instar de Puppet, un outil de gestion de configuration. Il permet de grandement simplifier le travail quotidien des admistrateurs système, libérant du temps pour des tâches bien plus intéressantes.

Voulant utiliser un outil de gestion de configuration, je me suis naturellement tourné vers Puppet, CFEngine et Chef. Mais aprés quelques tests, j'ai trouvé ces outils trop compliqués. J'ai donc testé SaltStack, fut tout de suite convaincu. Simple d'usage, puissant et rapide, j'ai rapidement automatisé la configuration de mon infratructure. Cette session couvre les les fonctionnalités majeures de Salt en laissant une bonne partie à des démonstrations live.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastien Douche</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3739/saltstack-outil-simple-et-efficace-de-gestion-de</guid><enclosure url="https://www.youtube.com/watch?v=8yDML4CbXH0" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/8yDML4CbXH0/maxresdefault.jpg"></media:thumbnail></item><item><title>Shit happens...</title><link>http://www.pyvideo.org/video/3753/shit-happens</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Les erreurs sont le cauchemar des développeurs. En parler déclenche des discussion passionnées (et avouons-le, souvent des trolls) et même si les premiers langages de programmation ont désormais plus de 60 ans, personne ne peut dire qu'elle est la meilleure manière de gérer ces &amp;#@!&amp; d'erreurs. Codes de retour, exceptions, monads, ..., je donnerai un aperçu des différents outils qu'ont des langages comme C/Python/Ruby/Haskell/Go pour gérer les erreurs. La plupart des concepts démontrés seront applicables à d'autres langages que Python (même si les exemples de code seront majoritairement écrits en python).

Ne rêvez pas, je n'aurai pas corrigé vos erreurs à l'issue de cette présentation, mais vous aurez une meilleure idée de comment les dresser.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olivier Hervieu</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3753/shit-happens</guid><enclosure url="https://www.youtube.com/watch?v=5xJEKKaYJvs" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/5xJEKKaYJvs/maxresdefault.jpg"></media:thumbnail></item><item><title>Traquer les fuites mémoire en Python</title><link>http://www.pyvideo.org/video/3751/traquer-les-fuites-memoire-en-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Les fuites mémoire en Python ne peuvent pas être analysées avec les outils traditionnels car Python repose sur les compteurs de référence. Je vais présenter des outils spécifiques à Python pour vous aider à localiser vos fuites mémoires.

- Consommation globale du processus (mémoire RSS)
- Comprendre les cycles de référence
- Générer une image représentant les liens entre les objets
- Utilisation de gc.get_objects() et calcul manuel de la taille des objets
- Tracer les allocations mémoires à leur création
- PEP 445: Add new APIs to customize Python memory allocators implementée dans Python 3.4
- Projet pytracemalloc</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Victor Stinner</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3751/traquer-les-fuites-memoire-en-python</guid><enclosure url="https://www.youtube.com/watch?v=oQ17KDBr24I" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/oQ17KDBr24I/maxresdefault.jpg"></media:thumbnail></item><item><title>Tu peux webtest</title><link>http://www.pyvideo.org/video/3731/tu-peux-webtest</link><description>&lt;p&gt;Abstract&lt;/p&gt;
WebTest est une librairie framework agnostique permettant de tester n'importe quelle application WSGI et plus encore.

Après un bref rappel de ce qu'est la norme WSGI, cette présentation vous permettra d'apprécier l'étendue des possibilités de la librairie.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gael Pasgrimaud</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3731/tu-peux-webtest</guid><enclosure url="https://www.youtube.com/watch?v=prFLLfKQ9Do" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/prFLLfKQ9Do/maxresdefault.jpg"></media:thumbnail></item><item><title>Vagrant, packer et ruby pour automatiser des builds complexes</title><link>http://www.pyvideo.org/video/3741/vagrant-packer-et-ruby-pour-automatiser-des-buil</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Vagrant, packer et un peu de ruby pour automatiser des builds complexes.

Introduction

Tout le monde n'a pas la chance de ne dépendre que de paquets 100 % python. Python est devenu un outil de choix pour le calcul numérique, mais des paquets tels que numpy, scipy ou scikit-learn dépendent de librairies C, C++ et même Fortran qui dépendent fortement des plateformes.

J'aimerais présenter les outils packer et vagrant comme une solution pour produire des builds 100 % reproductibles. S'appuyant sur la virtualisation, ils permettent d'appliquer les principes de reproduction non seulement pour unix, mais aussi os x et même windows.

Le concept de provisionnement, et son application au problème de "packaging"

Cette section présentera tout d'abord la nécessité de reproduction pour la compilation, et justifiera pourquoi les VM sont les outils les plus adéquats aujourd'hui si l'on veut supporter toutes les plateformes usuelles, en particulier windows:

- architectures "3-tier" pour le provisionnement
- outils disponibles pour chacune des 3 couches
- présentation de vagrant et packer

vagrant, un outil simple pour la réutilisation de VM

Cette section commencera par illustrer les problèmes usuels du partage des VM entre développeurs, et montrera comment vagrant peut résoudre ces problèmes:

- le provisionnement comme solution au manque de transparence usuel avec les VMs
- flexibilité et traçabilité grâce à la combinaison chef/puppet/salt + vagrant

packer, un complément à vagrant

Vagrant suppose l'existence de 'base box', qui sont des images d'OS avec juste ce qu'il faut pour "bootstrapper" la suite du provisionnement. Packer est un outil qui permet de créer ses propres images:

- illustration du fonctionnement de packer
- cibler plusieurs technologies de virtualisation à partir d' un même template: virtualbox, vmware, mais aussi ec2.

Example pour la compilation de paquets 'wheel' pour numpy/scipy

Cette partie sera plus didactique, et basé sur un exemple réel pour compiler un wheel de numpy et scipy sur windows. L'exemple utilisera à la fois vagrant, packer et chef.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cournapeau</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3741/vagrant-packer-et-ruby-pour-automatiser-des-buil</guid><enclosure url="https://www.youtube.com/watch?v=iTU5CRuY96I" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/iTU5CRuY96I/maxresdefault.jpg"></media:thumbnail></item><item><title>ZeroServices</title><link>http://www.pyvideo.org/video/3722/zeroservices</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Qui n'a jamais eut besoin d'écrire des services réseau qui se découvrent automatiquement, qui détectent la perte d'un des service, qui permet la diffusion en unicast, en multicast ou broadcast ? ZeroServices vous simplifie la vie. ZeroServices est construit autour de ZeroMQ et de Tornado et vous permet d'écrire des services réseau sans efforts.

Présentation de ZeroServices, une libraire python écrite grâce au couple Tornado/ZeroMQ qui facilite l'écriture de services réseaux décentralisés. Grâce à la découverte automatique des pairs, à l'émission de message en unicast et/ou multicast et à la détection des services morts, ZeroServices permet d'écrire des services réseaux facilement et rapidement.

Cette conférence présentera ZeroServices, détaillera le fonctionnement et enfin présentera les capacités de la librairie avec une démo de service de chat.

ZeroServices est hébergé ici : https://github.com/Lothiraldan/ZeroServices</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Boris Feld</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3722/zeroservices</guid><enclosure url="https://www.youtube.com/watch?v=YUmp768O7Ro" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/YUmp768O7Ro/maxresdefault.jpg"></media:thumbnail></item></channel></rss>
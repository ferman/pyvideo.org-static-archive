<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of PyData Berlin 2014</title><link>http://www.pyvideo.org/category/55/pydata-berlin-2014/rss</link><description></description><atom:link href="http://www.pyvideo.org/category/55/pydata-berlin-2014/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 27 Jul 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>ABBY: A Django app to document your A/B tests</title><link>http://www.pyvideo.org/video/3063/abby-a-django-app-to-document-your-ab-tests</link><description>&lt;p&gt;Description&lt;/p&gt;
ABBY is a Django app that helps you manage your A/B tests. The main objective is to document all tests happening in your company, in order to better understand which measures work and which don't. Thereby leading to a better understanding of your product and your customer. ABBY offers a front-end that makes it easy to edit, delete or create tests and to add evaluation results. Further, it provides a RESTful API to integrate directly with our platform to easily handle A/B tests without touching the front-end. Another notable feature is the possibility to upload a CSV file and have the A/B test auto-evaluated, although this feature is considered highly experimental. At Jimdo, a do-it-yourself website builder, we have a team of about 180 people from different countries and with professional backgrounds just as diverse. Therefore it is crucial to have tools that allow having a common perspective on the tests. This facilitates having data informed discussions and to deduce effective solutions. In our opinion tools like ABBY are cornerstones to achieve the ultimate goal of being a data-driven company. It enables all our co-workers to review past and plan future tests to further improve our product and to raise the happiness of our customers. The proposed talk will give a detailed overview of ABBY, which eventually will be open-sourced, and its capabilities. I will further discuss the motivation behind the app and the influence it has on the way our company is becoming increasingly data driven.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andy Goldschmidt</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3063/abby-a-django-app-to-document-your-ab-tests</guid><enclosure url="http://video.ep14.c3voc.de/20249.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20249.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=Vx9UCD6V7y4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/Vx9UCD6V7y4/hqdefault.jpg"></media:thumbnail></item><item><title>Building the PyData Community</title><link>http://www.pyvideo.org/video/3059/building-the-pydata-community</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Travis Oliphant</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3059/building-the-pydata-community</guid><enclosure url="http://video.ep14.c3voc.de/20261.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20261.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=d9Qm3PPoYNQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/d9Qm3PPoYNQ/hqdefault.jpg"></media:thumbnail></item><item><title>Commodity Machine Learning</title><link>http://www.pyvideo.org/video/3064/commodity-machine-learning</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Mueller</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3064/commodity-machine-learning</guid><enclosure url="http://video.ep14.c3voc.de/20262.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20262.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=kX5jrFqryAE" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/kX5jrFqryAE/hqdefault.jpg"></media:thumbnail></item><item><title>Conda: a cross-platform package manager for any binary distribution</title><link>http://www.pyvideo.org/video/3057/conda-a-cross-platform-package-manager-for-any-b-0</link><description>&lt;p&gt;Description&lt;/p&gt;
Conda is an open source package manager, which can be used to manage binary packages and virtual environments on any platform. It is the package manager of the Anaconda Python distribution, although it can be used independently of Anaconda. We will look at how conda solves many of the problems that have plagued Python packaging in the past, followed by a demonstration of its features.
    We will look at the issues that have plagued packaging in the Python ecosystem in the past, and discuss how Conda solves these problems. We will show how to use conda to manage multiple environments. Finally, we will look at how to build your own conda packages.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ilan Schnell</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3057/conda-a-cross-platform-package-manager-for-any-b-0</guid><enclosure url="http://video.ep14.c3voc.de/20275.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20275.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=o47Nndkwffc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/o47Nndkwffc/hqdefault.jpg"></media:thumbnail></item><item><title>Exploring Patent Data with Python</title><link>http://www.pyvideo.org/video/3058/exploring-patent-data-with-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Experiences from building a recommendation engine for patent search using pythonic NLP and topic modeling tools such as Gensim.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Franta Polach</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3058/exploring-patent-data-with-python</guid><enclosure url="http://video.ep14.c3voc.de/20251.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20251.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=LWYiF31jiZ0" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/LWYiF31jiZ0/hqdefault.jpg"></media:thumbnail></item><item><title>Faster than Google? Optimization lessons in Python.</title><link>http://www.pyvideo.org/video/3061/faster-than-google-optimization-lessons-in-pytho</link><description>&lt;p&gt;Description&lt;/p&gt;
Lessons from translating Google's deep learning algorithm into Python. Can a Python port compete with Google's tightly optimized C code? Spoiler: making use of Python and its vibrant ecosystem (generators, NumPy, Cython...), the optimized Python port is cleaner, more readable and clocks in—somewhat astonishingly—4x faster than Google's C. This is 12,000x faster than a naive, pure Python implementation and 100x faster than an optimized NumPy implementation. The talk will go over what went well (data streaming to process humongous datasets, parallelization and avoiding GIL with Cython, plugging into BLAS) as well as trouble along the way (BLAS idiosyncrasies, Cython issues, dead ends). The quest is also documented on my blog.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radim Řehůřek</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3061/faster-than-google-optimization-lessons-in-pytho</guid><enclosure url="http://video.ep14.c3voc.de/20228.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20228.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=vU4TlwZzTfU" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/vU4TlwZzTfU/hqdefault.jpg"></media:thumbnail></item><item><title>Fast Serialization of Numpy Arrays with Bloscpack</title><link>http://www.pyvideo.org/video/3060/fast-serialization-of-numpy-arrays-with-bloscpack</link><description>&lt;p&gt;Description&lt;/p&gt;
Bloscpack [1] is a reference implementation and file-format for fast serialization of numerical data. It features lightweight, chunked and compressed storage, based on the extremely fast Blosc [2] metacodec and supports serialization of Numpy arrays out-of-the-box. Recently, Blosc -- being the metacodec that it is -- has received support for using the popular and widely used Snappy [3], LZ4 [4], and ZLib [5] codecs, and so, now Bloscpack supports serializing Numpy arrays easily with those codecs! In this talk I will present recent benchmarks of Bloscpack performance on a variety of artificial and real-world datasets with a special focus on the newly available codecs. In these benchmarks I will compare Bloscpack, both performance and usability wise, to alternatives such as Numpy's native offerings (NPZ and NPY), HDF5/PyTables [6], and if time permits, to novel bleeding edge solutions. Lastly I will argue that compressed and chunked storage format such as Bloscpack can be and somewhat already is a useful substrate on which to build more powerful applications such as online analytical processing engines and distributed computing frameworks. [1]: https://github.com/Blosc/bloscpack [2]: https://github.com/Blosc/c-blosc/ [3]: http://code.google.com/p/snappy/ [4]: http://code.google.com/p/lz4/ [5]: http://www.zlib.net/ [6]: http://www.pytables.org/moin</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valentin Haenel</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3060/fast-serialization-of-numpy-arrays-with-bloscpack</guid><enclosure url="http://video.ep14.c3voc.de/20226.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20226.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=TZdqeEd7iTM" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/TZdqeEd7iTM/hqdefault.jpg"></media:thumbnail></item><item><title>Introduction to the Signal Processing and Classification Environment pySPACE</title><link>http://www.pyvideo.org/video/3062/introduction-to-the-signal-processing-and-classif</link><description>&lt;p&gt;Description&lt;/p&gt;
This talk will give a basic introduction to the pySPACE framework and its current applications.

pySPACE (Signal Processing And Classification Environment) is a modular software for the processing of large data streams that has been specifically designed to enable distributed execution and empirical evaluation of signal processing chains. Various signal processing algorithms (so called nodes) are available within the software, from finite impulse response filters over data-dependent spatial filters (e.g., PCA, CSP, xDAWN) to established classifiers (e.g., SVM, LDA). pySPACE incorporates the concept of node and node chains of the Modular Toolkit for Data Processing (MDP) framework. Due to its modular architecture, the software can easily be extended with new processing nodes and more general operations. Large scale empirical investigations can be configured using simple text-configuration files in the YAML format, executed on different (distributed) computing modalities, and evaluated using an interactive graphical user interface.

pySPACE allows the user to connect nodes modularly and automatically benchmark the respective chains for different parameter settings and compare these with other node chains, e.g., by automatic evaluation of classification performances provided within the software. In addition, the pySPACElive mode of execution can be used for online processing of streamed data. The software specifically supports but is not limited to EEG data. Any kind of time series or feature vector data can be processed and analyzed.

pySPACE additionally provides interfaces to specialized signal processing libraries such as SciPy, scikit-learn, LIBSVM, the WEKA Machine Learning Framework, and the Maja Machine Learning Framework (MMLF).</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mario Michael Krell</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3062/introduction-to-the-signal-processing-and-classif</guid><enclosure url="http://video.ep14.c3voc.de/20268.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20268.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=KobSyPceR6I" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/KobSyPceR6I/hqdefault.jpg"></media:thumbnail></item><item><title>Intro to ConvNets</title><link>http://www.pyvideo.org/video/3054/intro-to-convnets</link><description>&lt;p&gt;Abstract&lt;/p&gt;
We will give an introduction to the recent development of Deep Neural Networks and focus in particular on Convolution Networks which are well suited to image classification problems. We will also provide you with the practical knowledge of how to get started with using ConvNets via the cuda-convnet python library.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kashif Rasul</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3054/intro-to-convnets</guid><enclosure url="http://video.ep14.c3voc.de/20257.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20257.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=W9_SNGymRwo" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/W9_SNGymRwo/hqdefault.jpg"></media:thumbnail></item><item><title>IPython and Sympy to Develop a Kalman Filter for Multisensor Data Fusion</title><link>http://www.pyvideo.org/video/3053/ipython-and-sympy-to-develop-a-kalman-filter-for</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The best filter algorithm to fuse multiple sensor informations is the Kalman filter. To implement it for non-linear dynamic models (e.g. a car), analytic calculations for the matrices are necessary. In this talk, one can see, how the IPython Notebook and Sympy helps to develop an optimal filter to fuse sensor information from different sources (e.g. acceleration, speed and GPS position) to get an optimal estimate. more: http://balzer82.github.io/Kalman/</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Balzer</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3053/ipython-and-sympy-to-develop-a-kalman-filter-for</guid><enclosure url="http://video.ep14.c3voc.de/20238.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20238.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=XSRr2HHedrY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/XSRr2HHedrY/hqdefault.jpg"></media:thumbnail></item><item><title>Lightning Talks</title><link>http://www.pyvideo.org/video/3050/lightning-talks-7</link><description></description><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3050/lightning-talks-7</guid><enclosure url="http://video.ep14.c3voc.de/29242.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/29242.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=C_GBFxt_3s0" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/C_GBFxt_3s0/hqdefault.jpg"></media:thumbnail></item><item><title>Make sense of your (big) data using Elasticsearch</title><link>http://www.pyvideo.org/video/3056/honza-kral-make-sense-of-your-big-data-using</link><description>&lt;p&gt;Abstract&lt;/p&gt;
In this talk I would like to show you a few real-life use-cases where Elasticsearch can help you make sense of your data. We will start with the most basic use case of searching your unstructured data and move on to more advanced topics such as faceting, aggregations and structured search. I would like to demonstrate that the very same tool and dataset can be used for real-time analytics as well as the basis for your more advanced data processing jobs. All in a distributed environment capable of handling terabyte-sized datasets. All examples will be shown with real data and python code demoing the new libraries we have been working on to make this process easier.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Honza Král</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3056/honza-kral-make-sense-of-your-big-data-using</guid><enclosure url="http://video.ep14.c3voc.de/20235.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20235.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=sCktucuv5Yo" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/sCktucuv5Yo/hqdefault.jpg"></media:thumbnail></item><item><title>Massively Parallel Processing with Procedural Python</title><link>http://www.pyvideo.org/video/3052/massively-parallel-processing-with-procedural-pyt</link><description>&lt;p&gt;Description&lt;/p&gt;
The Python data ecosystem has grown beyond the confines of single machines to embrace scalability. Here we describe one of our approaches to scaling, which is already being used in production systems. The goal of in-database analytics is to bring the calculations to the data, reducing transport costs and I/O bottlenecks. Using PL/Python we can run parallel queries across terabytes of data using not only pure SQL but also familiar PyData packages such as scikit-learn and nltk. This approach can also be used with PL/R to make use of a wide variety of R packages. We look at examples on Postgres compatible systems such as the Greenplum Database and on Hadoop through Pivotal HAWQ. We will also introduce MADlib, Pivotal’s open source library for scalable in-database machine learning, which uses Python to glue SQL queries to low level C++ functions and is also usable through the PyMADlib package.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ronert Obst</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3052/massively-parallel-processing-with-procedural-pyt</guid><enclosure url="http://video.ep14.c3voc.de/20232.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20232.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=rv6J6CYbGy4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/rv6J6CYbGy4/hqdefault.jpg"></media:thumbnail></item><item><title>Pandas' Thumb: unexpected evolutionary use of a Python library.</title><link>http://www.pyvideo.org/video/3051/pandas-thumb-unexpected-evolutionary-use-of-a-p</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This talk is a description of how - against a backdrop of data-drunk tax authorities, legal pressures on businesses to have appropriate compliance systems in place, and the constant pressure on their law firms to commoditise compliance services, Pandas may be about to make a foray from its venerable financial origins into a brave new fiscal world - and can revolutionise an industry by doing so. A case study covering the author's development of a Pandas-based stamp duty land tax engine ("ORVILLE") is discussed, and the inherent usefulness of Pandas in the world of tax analysis is explored.
&lt;p&gt;Description&lt;/p&gt;
Lawyers are not famed for their mathematical ability. On the contary - the law almost self-selects as a career choice for the numerically-challenged. So when the one UK tax that property lawyers generally felt comfortable dealing with (lease duty) was replaced with a new tax (stamp duty land tax) that was both arithmetically demanding and conceptually complex, it was inevitable that significant frustrations would arise. Suddenly, lawyers had to deal with concepts such as net present valuations, aggregation of several streams of fluctuating figures, and constant integration of a complex suite of credits and disregards. This talk is a description of how - against a backdrop of data-drunk tax authorities, legal pressures on businesses to have appropriate compliance systems in place, and the constant pressure on their law firms to commoditise compliance services, Pandas may be about to make a foray from its venerable financial origins into a brave new fiscal world - and can revolutionise an industry by doing so. A case study covering the author's development of a Pandas-based stamp duty land tax engine ("ORVILLE") is discussed, and the inherent usefulness of Pandas in the world of tax analysis is explored.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Nyland</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3051/pandas-thumb-unexpected-evolutionary-use-of-a-p</guid><enclosure url="http://video.ep14.c3voc.de/20240.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20240.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=CNQ_Ib4yxgQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/CNQ_Ib4yxgQ/hqdefault.jpg"></media:thumbnail></item><item><title>Panel: The challenges and frontiers of data science in Europe</title><link>http://www.pyvideo.org/video/3055/panel-the-challenges-and-frontiers-of-data-scien</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Drake,Ian Ozswald,James Powell,Kim Nilsoon,Valentin Haenel</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3055/panel-the-challenges-and-frontiers-of-data-scien</guid><enclosure url="http://video.ep14.c3voc.de/29257.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/29257.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=AtkDHrzgs7c" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/AtkDHrzgs7c/hqdefault.jpg"></media:thumbnail></item><item><title>Algorithmic Trading with Zipline</title><link>http://www.pyvideo.org/video/3068/algorithmic-trading-with-zipline</link><description>&lt;p&gt;Description&lt;/p&gt;
PyData Berlin 2014 - Python is quickly becoming the glue language which holds together data science and related fields like quantitative finance. Zipline is a BSD-licensed quantitative trading system which allows easy backtesting of investment algorithms on historical data. The system is fundamentally event-driven and a close approximation of how live-trading systems operate. Moreover, Zipline comes "batteries included" as many common statistics like moving average and linear regression can be readily accessed from within a user-written algorithm. Input of historical data and output of performance statistics is based on Pandas DataFrames to integrate nicely into the existing Python eco-system. Furthermore, statistic and machine learning libraries like matplotlib, scipy, statsmodels, and sklearn integrate nicely to support development, analysis and visualization of state-of-the-art trading systems. Zipline is currently used in production as the backtesting engine powering Quantopian.com -- a free, community-centered platform that allows development and real-time backtesting of trading algorithms in the web browser.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Wiecki</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3068/algorithmic-trading-with-zipline</guid><enclosure url="http://video.ep14.c3voc.de/20250.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20250.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=Qva7uxmOZuA" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/Qva7uxmOZuA/hqdefault.jpg"></media:thumbnail></item><item><title>Data Oriented Programming</title><link>http://www.pyvideo.org/video/3073/data-oriented-programming</link><description>&lt;p&gt;Description&lt;/p&gt;
Computers have traditionally been thought as tools for performing computations with numbers. Of course, its name in English has a lot to do with this conception, but in other languages, like the french 'ordinateur' (which express concepts more like sorting or classifying), one can clearly see the other side of the coin: computers can also be used to extract (usually new) information from data. Storage, reduction, classification, selection, sorting, grouping, among others, are typical operations in this 'alternate' goal of computers, and although carrying out all these tasks does imply doing a lot of computations, it also requires thinking about the computer as a different entity than the view offered by the traditional von Neumann architecture (basically a CPU with memory). In fact, when it is about programming the data handling efficiently, the most interesting part of a computer is the so-called hierarchical storage, where the different levels of caches in CPUs, the RAM memory, the SSD layers (there are several in the market already), the mechanical disks and finally, the network, are pretty much more important than the ALUs (arithmetic and logical units) in CPUs. In data handling, techniques like data deduplication and compression become critical when speaking about dealing with extremely large datasets. Moreover, distributed environments are useful mainly because of its increased storage capacities and I/O bandwidth, rather than for their aggregated computing throughput. During my talk I will describe several programming paradigms that should be taken in account when programming data oriented applications and that are usually different than those required for achieving pure computational throughput. But specially, and in a surprising turnaround, how the amazing amount of computational power in modern CPUs can also be useful for data handling as well.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesc Alted</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3073/data-oriented-programming</guid><enclosure url="http://video.ep14.c3voc.de/20260.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20260.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=KhJSg_rSzj8" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/KhJSg_rSzj8/hqdefault.jpg"></media:thumbnail></item><item><title>Dealing With Complexity</title><link>http://www.pyvideo.org/video/3081/dealing-with-complexity</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Paul Schmetz</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3081/dealing-with-complexity</guid><enclosure url="http://video.ep14.c3voc.de/20263.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20263.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=1_oU4qW7I9M" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/1_oU4qW7I9M/hqdefault.jpg"></media:thumbnail></item><item><title>Driving Moore's Law with Python-Powered Machine Learning: An Insider's Perspective</title><link>http://www.pyvideo.org/video/3075/driving-moores-law-with-python-powered-machine-l</link><description>&lt;p&gt;Abstract&lt;/p&gt;
People talk about a Moore's Law for gene sequencing, a Moore's Law for software, etc. This is talk is about *the* Moore's Law, the bull that the other "Laws" ride; and how Python-powered ML helps drive it. How do we keep making ever-smaller devices? How do we harness atomic-scale physics? Large-scale machine learning is key. The computation drives new chip designs, and those new chip designs are used for new computations, ad infinitum. High-dimensional regression, classification, active learning, optimization, ranking, clustering, density estimation, scientific visualization, massively parallel processing -- it all comes into play, and Python is powering it all.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trent McConaghy</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3075/driving-moores-law-with-python-powered-machine-l</guid><enclosure url="http://video.ep14.c3voc.de/20271.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20271.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=Jm-eBD9xR3w" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/Jm-eBD9xR3w/hqdefault.jpg"></media:thumbnail></item><item><title>Exploratory Time Series Analysis of NYC Subway Data</title><link>http://www.pyvideo.org/video/3065/exploratory-time-series-analysis-of-nyc-subway-da</link><description>&lt;p&gt;Description&lt;/p&gt;
What questions arise during a quick model assessment? In this hands-on-tutorial we want to cover the whole chain from preparing data to choosing and fitting a model to properly assessing the quality of a predictive model. Our dataset in this tutorial are the numbers of people entering and exiting New York subway stations. Among other ways of building a predictive model, we introduce the python package pydse ( http://pydse.readthedocs.org/ ) and apply it to the dataset in order to derive the parameters of an ARMA-model (autoregressive moving average). At the end of the tutorial we evaluate the models and examine the strengths and weaknesses of various ways to measure the accuracy and quality of a predictive model.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Felix Marczinowski,Philipp Mack,Sönke Niekamp</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3065/exploratory-time-series-analysis-of-nyc-subway-da</guid><enclosure url="http://video.ep14.c3voc.de/20270.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20270.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=U4p46XdXy6A" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/U4p46XdXy6A/hqdefault.jpg"></media:thumbnail></item><item><title>Extract Transform Load using mETL</title><link>http://www.pyvideo.org/video/3082/extract-transform-load-using-metl</link><description>&lt;p&gt;Description&lt;/p&gt;
mETL is an ETL package written in Python which was developed to load elective data for Central European University. Program can be used in a more general way, it can be used to load practically any kind of data to any target. Code is open source and available for anyone who want to use it. The main advantage to configurable via Yaml files and You have the possibility to write any transformation in Python and You can use it natively from any framework as well. We are using this tool in production for many of our clients and It is really stable and reliable. The project has a few contributors all around the world right now and I hope many developer will join soon. I really want to show you how you can use it in your daily work. In this tutorial We will see the most common situations: - Installation - Write simple Yaml configration files to load CSV, JSON, XML into MySQL or PostgreSQL Database, or convert CSV to JSON, etc. - Add tranformations on your fields - Filter records based on condition - Walk through a directory to feed the tool - How the mapping works - Generate Yaml configurations automatically from data source - Migrate a database to another database</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bence Faludi</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3082/extract-transform-load-using-metl</guid><enclosure url="http://video.ep14.c3voc.de/20253.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20253.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=NOGXdKbB-gQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/NOGXdKbB-gQ/hqdefault.jpg"></media:thumbnail></item><item><title>Generators Will Free Your Mind</title><link>http://www.pyvideo.org/video/3078/generators-will-free-your-mind</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3078/generators-will-free-your-mind</guid><enclosure url="http://video.ep14.c3voc.de/20258.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20258.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=JasPrZqImxo" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/JasPrZqImxo/hqdefault.jpg"></media:thumbnail></item><item><title>How to Spy with Python</title><link>http://www.pyvideo.org/video/3069/how-to-spy-with-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This talk will walk through what the US government has done in terms of spying on US citizens and foreigners with their PRISM program, then walk through how to do exactly that with Python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lynn Root</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3069/how-to-spy-with-python</guid><enclosure url="http://video.ep14.c3voc.de/20274.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20274.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=8m3fFPCUPQg" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/8m3fFPCUPQg/hqdefault.jpg"></media:thumbnail></item><item><title>Interactive Analysis of (Large) Financial Data Sets</title><link>http://www.pyvideo.org/video/3074/interactive-analysis-of-large-financial-data-se</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yves Hilpisch</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3074/interactive-analysis-of-large-financial-data-se</guid><enclosure url="http://video.ep14.c3voc.de/20259.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20259.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=XyqlduIcc2g" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/XyqlduIcc2g/hqdefault.jpg"></media:thumbnail></item><item><title>Low-rank matrix approximations in Python</title><link>http://www.pyvideo.org/video/3070/low-rank-matrix-approximations-in-python</link><description>&lt;p&gt;Description&lt;/p&gt;
Low-rank approximations of data matrices have become an important tool in machine learning and data mining. They allow for embedding high dimensional data in lower dimensional spaces and can therefore mitigate effects due to noise, uncover latent relations, or facilitate further processing. These properties have been proven successful in many application areas such as bio-informatics, computer vision, text processing, recommender systems, social network analysis, among others. Present day technologies are characterized by exponentially growing amounts of data. Recent advances in sensor technology, internet applications, and communication networks call for methods that scale to very large and/or growing data matrices. In this talk, we will describe how to efficiently analyze data by means of matrix factorization using the Python Matrix Factorization Toolbox (PyMF) and HDF5. We will briefly cover common methods such as k-means clustering, PCA, or Archetypal Analysis which can be easily cast as a matrix decomposition, and explain their usefulness for everyday data analysis tasks.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Thurau</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3070/low-rank-matrix-approximations-in-python</guid><enclosure url="http://video.ep14.c3voc.de/20266.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20266.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=kfEWZA-b-YQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/kfEWZA-b-YQ/hqdefault.jpg"></media:thumbnail></item><item><title>Packaging and Deployment</title><link>http://www.pyvideo.org/video/3079/packaging-and-deployment</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Travis Oliphant</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3079/packaging-and-deployment</guid><enclosure url="http://video.ep14.c3voc.de/20276.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20276.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=bR_WGj5MOlY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/bR_WGj5MOlY/hqdefault.jpg"></media:thumbnail></item><item><title>Parallel processing using python and gearman</title><link>http://www.pyvideo.org/video/3072/parallel-processing-using-python-and-gearman</link><description>&lt;p&gt;Description&lt;/p&gt;
When talking of parallel processing, some task requires a substantial set-up time. This is the case of Natural Language Processing (NLP) tasks such as classification, where models need to be loaded into memory. In these situations, we can not start a new process for every data set to be handled, but the system needs to be ready to process new incoming data. This talk will look at job queue systems, with particular focus on gearman. We will see how we are using it at Synthesio for NLP tasks; how to set up workers and clients, make it redundant and robust, monitor its activity and adapt to demand.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pedro Miguel Dias Cardoso</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3072/parallel-processing-using-python-and-gearman</guid><enclosure url="http://video.ep14.c3voc.de/20234.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20234.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=FRnP4UIgRI4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/FRnP4UIgRI4/hqdefault.jpg"></media:thumbnail></item><item><title>Python and pandas as back end to real-time data driven applications</title><link>http://www.pyvideo.org/video/3066/python-and-pandas-as-back-end-to-real-time-data-d</link><description>&lt;p&gt;Description&lt;/p&gt;
For data, and data science, to be the fuel of the 21th century, data driven applications should not be confined to dashboards and static analyses. Instead they should be the driver of the organizations that own or generates the data. Most of these applications are web-based and require real-time access to the data. However, many Big Data analyses and tools are inherently batch-driven and not well suited for real-time and performance-critical connections with applications. Trade-offs become often inevitable, especially when mixing multiple tools and data sources.   In this talk we will describe our journey to build a data driven application at a large Dutch financial institution. We will dive into the issues we faced, why we chose Python and pandas and what that meant for real-time data analysis (and agile development).   Important points in the talk will be, among others, the handling of geographical data, the access to hundreds of millions of records as well as the real time analysis of millions of data points.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Lanzani</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3066/python-and-pandas-as-back-end-to-real-time-data-d</guid><enclosure url="http://video.ep14.c3voc.de/20246.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20246.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=I8xBoXgJ5RM" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/I8xBoXgJ5RM/hqdefault.jpg"></media:thumbnail></item><item><title>Quantified Self: Analyzing the Big Data of our Daily Life</title><link>http://www.pyvideo.org/video/3077/quantified-self-analyzing-the-big-data-of-our-da</link><description>&lt;p&gt;Description&lt;/p&gt;
Applications for self tracking that collect, analyze, or publish personal and medical data are getting more popular. This includes either a broad variety of medical and healthcare apps in the fields of telemedicine, remote care, treatment, or interaction with patients, and a huge increasing number of self tracking apps that aims to acquire data form from people’s daily life. The Quantified Self movement goes far beyond collecting or generating medical data. It aims in gathering data of all kinds of activities, habits, or relations that could help to understand and improve one’s behavior, health, or well-being. Both, health apps as well as Quantified Self apps use either just the smartphone as data source (e.g., questionnaires, manual data input, smartphone sensors) or external devices and sensors such as ‘classical’ medical devices (e.g,. blood pressure meters) or wearable devices (e.g., wristbands or eye glasses). The data can be used to get insights into the medical condition or one’s personal life and behavior. This talk will provide an overview of the various data sources and data formats that are relevant for self tracking as well as strategies and examples for analyzing that data with Python. The talk will cover:

Accessing local and distributed sources for the heterogeneous Quantified Self data. That includes local data files generated by smartphone apps and web applications as well as data stored on cloud resources via APIs (e.g., data that is stored by vendors of self tracking hardware or data of social media channels, weather data, traffic data etc.)

Homogenizing the data. Especially, covering typical problems of heterogeneous Quantified Self data, such as missing data or different and non-standard data formatting.

Analyzing and visualizing the data. Depending on the questions one has, the data can be analyzed with statistical methods or correlations. For example, to get insight into one's personal physical activities, steps data form activity trackers can be correlated to location data and weather information. The talk covers how to conduct this and other data analysis tasks with tools such as pandas and how to visualize the results.

The examples in this talk will be shown as interactive IPython sessions.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3077/quantified-self-analyzing-the-big-data-of-our-da</guid><enclosure url="http://video.ep14.c3voc.de/20231.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20231.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=tSyQ36Zbkc0" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/tSyQ36Zbkc0/hqdefault.jpg"></media:thumbnail></item><item><title>Semantic Python: Mastering Linked Data with Python</title><link>http://www.pyvideo.org/video/3076/semantic-python-mastering-linked-data-with-pytho</link><description>&lt;p&gt;Description&lt;/p&gt;
Tim Berners-Lee defined the Semantic Web as a web of data that can be processed directly and indirectly by machines. More precisely, the Semantic Web can be defined as a set of standards and best practices for sharing data and the semantics of that data over the Web to be used by applications [DuCharme, 2013].

In particular, the Semantic Web is built on top of three main pillars: the RDF (i.e., Resource Description Framework) data model, the SPARQL query language, and the OWL standard for storing vocabularies and ontologies. These standards allows the huge amount of data on the Web to be available in a unique and unified standard format, contributing to the definition of the Web of Data (WoD) [1].

The WoD makes the web data to be reachable and easily manageable by Semantic Web tools, providing also the relationships among these data (thus practically setting up the “Web”). This collection of interrelated datasets on the Web can also be referred to as Linked Data [1].

Two typical examples of large Linked Dataset are FreeBase, and DBPedia, which essentially provides the so called Common sense Knowledge in RDF format. Python offers a very powerful and easy to use library to work with Linked Data: rdflib. RDFLib is a lightweight and functionally complete RDF library, allowing applications to access, create and manage RDF graphs in a very Pythonic fashion.

In this talk, a general overview of the main features provided by the rdflib package will be presented. To this end, several code examples will be discussed, along with a case study concerning the analysis of a (semantic) social graph. This case study will be focused on the integration between the networkx module and the rdflib library in order to crawl, access (via SPARQL), and analyze a Social Linked Data Graph represented using the FOAF (Friend of a Friend) schema.

This talk is intended for an Novice level audience, assuming a good knowledge of the Python language.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valerio Maggio</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3076/semantic-python-mastering-linked-data-with-pytho</guid><enclosure url="http://video.ep14.c3voc.de/20244.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20244.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=5DCS9LE-8rE" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/5DCS9LE-8rE/hqdefault.jpg"></media:thumbnail></item><item><title>Speed Without Drag</title><link>http://www.pyvideo.org/video/3067/speed-without-drag</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Speed without drag: making code faster when there's no time to waste A practical walkthrough over the state-of-the-art of low-friction numerical Python enhancing solutions, covering: exhausting CPython, NumPy, Numba, Parakeet, Cython, Theano, Pyston, PyPy/NumPyPy and Blaze.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Saul Diez-Guerra</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3067/speed-without-drag</guid><enclosure url="http://video.ep14.c3voc.de/20256.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20256.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=cRb96NEHW4I" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/cRb96NEHW4I/hqdefault.jpg"></media:thumbnail></item><item><title>Street Fighting Trend Research</title><link>http://www.pyvideo.org/video/3071/street-fighting-trend-research</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This talk shows how to tackle common tasks in applied trend research and technology foresight from identifying a data-source, getting the data and data cleaning to presenting the insights in meaningful visualizations.
&lt;p&gt;Description&lt;/p&gt;
This talk presents a very hands-on approach for identifying research and technology trends in various industries with a little bit of Pandas here, NTLK there and all cooked up in an IPython Notebook. Three examples featured in this talk are:
    How to find out the most interesting research topics cutting edge companies are after right now?
    How to pick sessions from a large conference program (think PyCon, PyData or Strata) that are presenting something really novel?
    How to automagically identify trends in industries such as computer vision or telecommunications?
    The talk will show how to tackle common tasks in applied trend research and technology foresight from identifying a data-source, getting the data and data cleaning to presenting the insights in meaningful visualizations.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benedikt Koehler</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3071/street-fighting-trend-research</guid><enclosure url="http://video.ep14.c3voc.de/20237.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20237.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=4c_AmPWo-iw" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/4c_AmPWo-iw/hqdefault.jpg"></media:thumbnail></item><item><title>Visualising Data through Pandas</title><link>http://www.pyvideo.org/video/3080/visualising-data-through-pandas</link><description>&lt;p&gt;Abstract&lt;/p&gt;
pandas &amp; ggplot: quick analysis with python and friends
&lt;p&gt;Description&lt;/p&gt;
This talk is about

* learning the basics of pandas 
* learning the basics of visualisation with ggplot 
* combining the two

Part of the talk will be slides, the other part will be done via an iPython-notebook. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vincent Warmerdam</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3080/visualising-data-through-pandas</guid><enclosure url="http://video.ep14.c3voc.de/20269.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://video.ep14.c3voc.de/20269.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=ZW8Aei2wlsM" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/ZW8Aei2wlsM/hqdefault.jpg"></media:thumbnail></item></channel></rss>
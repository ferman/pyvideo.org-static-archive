<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of PyOhio 2015</title><link>http://www.pyvideo.org/category/72/pyohio-2015/rss</link><description></description><atom:link href="http://www.pyvideo.org/category/72/pyohio-2015/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 02 Aug 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>A Trip to the SPA</title><link>http://www.pyvideo.org/video/3711/a-trip-to-the-spa</link><description>&lt;p&gt;Description&lt;/p&gt;
Modern web application experiences demand Single-Page-Application architectures. Join us on a journey building a simple kanban board with Flask and AngularJS.  We'll hack together a simple server API with Flask-SQLAlchemy and Flask-Marshmallow, then link it into a Bootstrap frontend with ngResource.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Griffith</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3711/a-trip-to-the-spa</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3711_A_Trip_to_the_SPA.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3711_A_Trip_to_the_SPA.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/l4TqiHtjuKc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/l4TqiHtjuKc/hqdefault.jpg"></media:thumbnail></item><item><title>Catching the bus on time -- Using Python, a Pebble Watch and (kind of) Open Data</title><link>http://www.pyvideo.org/video/3710/catching-the-bus-on-time-using-python-a-pebbl</link><description>&lt;p&gt;Description&lt;/p&gt;
Taking the bus used to be hard. You'd have to find a timetable, map out your route, and then cross your fingers that the bus actually showed up on time! Modern transit systems have equipped their fleet with GPS devices which provide near real-time location information. Using open data systems, a Python webapp, and a Pebble watch, let's build a bus time tracker that would make Dick Tracy envious!</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert Heinen</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3710/catching-the-bus-on-time-using-python-a-pebbl</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3710_Catching_the_bus_on_time_Using_Python_a_Pebble_Wat.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3710_Catching_the_bus_on_time_Using_Python_a_Pebble_Wat.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/dZQYeoH0Ni0" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/dZQYeoH0Ni0/hqdefault.jpg"></media:thumbnail></item><item><title>Developing a RESTful Python service on Windows</title><link>http://www.pyvideo.org/video/3697/developing-a-restful-python-service-on-windows</link><description>&lt;p&gt;Description&lt;/p&gt;
This talk will walk you through the development and design experience of the speaker creating a Python web service on Windows.  It will give an overview of integrating a WSGI server with Microsoft IIS or other alternatives.  In addition to the operational server infrastructure, this talk includes some discussion of RESTful practices and client side code.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joel B. Mohler</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3697/developing-a-restful-python-service-on-windows</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3697_Developing_a_RESTful_Python_service_on_Windows.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3697_Developing_a_RESTful_Python_service_on_Windows.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/3tJjv88Bwio" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/3tJjv88Bwio/hqdefault.jpg"></media:thumbnail></item><item><title>Fumbling Forward - Docker Don'ts</title><link>http://www.pyvideo.org/video/3691/fumbling-forward-docker-donts</link><description>&lt;p&gt;Description&lt;/p&gt;
Questing for the continuous-deployment grail, I've had plenty of pit and prat falls. Perhaps others can learn from my mistakes and do as I didn't.  This talk will demonstrate how [not] to stitch together Docker, Compose, Machine, Boot2Docker, YAML, CircleCI, EC2, Route53, and likely a few other tools into a simple yet automated code -&gt; commit -&gt; review -&gt; deploy process. 


</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason M. Green</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3691/fumbling-forward-docker-donts</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3691_Fumbling_Forward_Docker_Donts.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3691_Fumbling_Forward_Docker_Donts.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/ZLv2ROatlik" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/ZLv2ROatlik/hqdefault.jpg"></media:thumbnail></item><item><title>Growler - Using asyncio to Build a Web Framework</title><link>http://www.pyvideo.org/video/3686/growler-using-asyncio-to-build-a-web-framework</link><description>&lt;p&gt;Description&lt;/p&gt;
The asyncio library introduced a native way for python programs to handle multiple network connections with one thread, asynchronously. Inspired by the Express framework for nodejs, I set out to write my own web server using the new library. This is what I've learned.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Kubera</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3686/growler-using-asyncio-to-build-a-web-framework</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3686_Growler_Using_asyncio_to_Build_a_Web_Framework.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3686_Growler_Using_asyncio_to_Build_a_Web_Framework.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/vs7XOn1TXVQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/vs7XOn1TXVQ/hqdefault.jpg"></media:thumbnail></item><item><title>Introduction to PySchool.net</title><link>http://www.pyvideo.org/video/3715/introduction-to-pyschoolnet</link><description>&lt;p&gt;Description&lt;/p&gt;
PySchool.net is a Python programming environment where students can create, edit, load, save and execute Python scripts directly in a browser.  The main directives of PySchool.net is to be free for educators and students, and to reduce the technological burdens of hosting programming classes.  PySchool.net  is powered by Brython, and is 100% open source and is hosted on github.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Billy Earney</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3715/introduction-to-pyschoolnet</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3715_Introduction_to_PySchoolnet.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3715_Introduction_to_PySchoolnet.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/SBJR1WCBC0c" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/SBJR1WCBC0c/hqdefault.jpg"></media:thumbnail></item><item><title>Making sense of CORS using web.py</title><link>http://www.pyvideo.org/video/3704/making-sense-of-cors-using-webpy</link><description>&lt;p&gt;Description&lt;/p&gt;
Cross-Origin Resource Sharing is the bane of Javascript API clients existence. It is possible to easily implement CORS support in your Python server code with just a few simple request headers. Once your API is talking CORS, you are free from the tyranny of browsers' same-origin security policies. This talk will explain what CORS is, why should care, and work through an example using web.py.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zach Wick</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3704/making-sense-of-cors-using-webpy</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3704_Making_sense_of_CORS_using_webpy.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3704_Making_sense_of_CORS_using_webpy.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/gZelOtYjYv8" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/gZelOtYjYv8/hqdefault.jpg"></media:thumbnail></item><item><title>**More lightning talks!**</title><link>http://www.pyvideo.org/video/3717/more-lightning-talks</link><description>&lt;p&gt;Description&lt;/p&gt;
* [(0:00:00)](http://youtu.be/mKK2GKxFMSE?t=0h0m0s) 2015 was great, 2016 needs you. Eric and Brian
* [(0:03:06)](http://youtu.be/mKK2GKxFMSE?t=0h3m6s) Issue trackers for your town. - Chad Whitacre
* [(0:07:48)](http://youtu.be/mKK2GKxFMSE?t=0h7m48s) How much can I share with five minutes? -Ron DuPlain
* [(0:12:55)](http://youtu.be/mKK2GKxFMSE?t=0h12m55s) Computer colors importance. -Scott Sievert
* [(0:17:02)](http://youtu.be/mKK2GKxFMSE?t=0h17m2s) Piecing together a story with Google Maps. Lars
* [(0:22:06)](http://youtu.be/mKK2GKxFMSE?t=0h22m6s) Back to the Cheese Shop. -Cameron
* [(0:22:52)](http://youtu.be/mKK2GKxFMSE?t=0h22m52s) Logging Framework and Postgres -Matthew Wilson
* [(0:25:40)](http://youtu.be/mKK2GKxFMSE?t=0h25m40s) Conda and Virtualenv -Brain Costlow
* [(0:30:30)](http://youtu.be/mKK2GKxFMSE?t=0h30m30s) PyOhio 2017 -Brain Costlow
* [(0:33:15)](http://youtu.be/mKK2GKxFMSE?t=0h33m15s) All good things come to an end -Lars</description><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3717/more-lightning-talks</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3717_More_lightning_talks.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3717_More_lightning_talks.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/mKK2GKxFMSE" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/mKK2GKxFMSE/hqdefault.jpg"></media:thumbnail></item><item><title>Production Django: Building a Highly Scalable, Secure Django Site</title><link>http://www.pyvideo.org/video/3712/production-django-building-a-highly-scalable-se</link><description>&lt;p&gt;Description&lt;/p&gt;
When your Django application is ready for primetime, how do you ensure that it won't crash the second real users begin interacting with it? In this talk, we'll discuss building secure, scalable Django applications and the infrastructure they need to stand up to the test of production.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joseph Mosby</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3712/production-django-building-a-highly-scalable-se</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3712_Production_Django_Building_a_Highly_Scalable_Secur.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3712_Production_Django_Building_a_Highly_Scalable_Secur.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/VSMyzNgMxro" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/VSMyzNgMxro/hqdefault.jpg"></media:thumbnail></item><item><title>Python for Economists: An overview of Python tools for Economists</title><link>http://www.pyvideo.org/video/3702/python-for-economists-an-overview-of-python-tool</link><description>&lt;p&gt;Description&lt;/p&gt;
Python has developed applications in GIS, text analysis, networks, statistics, csv manipulation, data analysis, data mining and simulations. Despite this, there are few references for using python as an economist. This talk provides an introduction to economic tools using python. I conclude with python in data analysis and future projects for economists using python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gary Hlusko</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3702/python-for-economists-an-overview-of-python-tool</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3702_Python_for_Economists_An_overview_of_Python_tools_.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3702_Python_for_Economists_An_overview_of_Python_tools_.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/fi6aKSaHkjY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/fi6aKSaHkjY/hqdefault.jpg"></media:thumbnail></item><item><title>Python Packaging from Init to Deploy</title><link>http://www.pyvideo.org/video/3685/python-packaging-from-init-to-deploy</link><description>&lt;p&gt;Description&lt;/p&gt;
Python packaging really isn't that bad (anymore.) In this talk you'll learn how you can take your beautiful new Python code and share it with the world in a way that everyone benefits. I will cover tools and techniques you can use to get the boring stuff out of the way so you can focus on your code and deploy quickly, frequently, and consistently.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Forgac</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3685/python-packaging-from-init-to-deploy</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3685_Python_Packaging_from_Init_to_Deploy.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3685_Python_Packaging_from_Init_to_Deploy.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/4fzAMdLKC5k" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/4fzAMdLKC5k/hqdefault.jpg"></media:thumbnail></item><item><title>REPL-driven development</title><link>http://www.pyvideo.org/video/3705/repl-driven-development</link><description>&lt;p&gt;Description&lt;/p&gt;
You know the Read-Evaluate-Print-Loop you get when you type python, ipython or bpython? You should spend more time in it!
This talk describes development workflows using a REPL and their associated pitfalls. IPython and bpython features useful for writing, testing, debugging and using code will
be sprinkled throughout.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Ballinger</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3705/repl-driven-development</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3705_REPLdriven_development.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3705_REPLdriven_development.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/EwI-e3WlTew" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/EwI-e3WlTew/hqdefault.jpg"></media:thumbnail></item><item><title>Synchronizing Objects to YAML using Black Magic</title><link>http://www.pyvideo.org/video/3708/synchronizing-objects-to-yaml-using-black-magic</link><description>&lt;p&gt;Description&lt;/p&gt;
Lately, I've been running into many situations where I'd like to store program configuration and/or data in version control. YORM was born to provide automatic, bidirectional, and human-friendly mappings of Python object attributes to YAML files. In order to explain the inner-workings of this library, I'll be diving into some of the less common features of Python that I learned along the way.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jace Browning</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3708/synchronizing-objects-to-yaml-using-black-magic</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3708_Synchronizing_Objects_to_YAML_using_Black_Magic.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3708_Synchronizing_Objects_to_YAML_using_Black_Magic.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/0woNEKf-wAo" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/0woNEKf-wAo/hqdefault.jpg"></media:thumbnail></item><item><title>Testing the Database Layer: typical problems &amp; best practices</title><link>http://www.pyvideo.org/video/3695/testing-the-database-layer-typical-problems-be</link><description>&lt;p&gt;Description&lt;/p&gt;
We will cover typical problems and best practices for testing the database layer of Python applications.  We will also cover using factories vs fixtures for loading test data.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Randy Syring</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3695/testing-the-database-layer-typical-problems-be</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3695_Testing_the_Database_Layer_typical_problems_best_p.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3695_Testing_the_Database_Layer_typical_problems_best_p.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/ZBLaHL1mTW0" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/ZBLaHL1mTW0/hqdefault.jpg"></media:thumbnail></item><item><title>The Well Tempered API</title><link>http://www.pyvideo.org/video/3681/the-well-tempered-api</link><description>&lt;p&gt;Description&lt;/p&gt;
I can play 400 year old music, but I can't open a Word document from 1990. Centuries ago, a revolution in music enabled compositions to last for centuries with no bit rot. There are innumerable parallels between music and software, why don't our programs last longer? Software Engineering has some things to learn from the parallel world of music.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">K Lars Lohn</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3681/the-well-tempered-api</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3681_well-tempered-api.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3681_well-tempered-api.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/9koJOCL8Bms" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/9koJOCL8Bms/hqdefault.jpg"></media:thumbnail></item><item><title>Typing better and potentially faster with python</title><link>http://www.pyvideo.org/video/3693/typing-better-and-potentially-faster-with-python</link><description>&lt;p&gt;Description&lt;/p&gt;
We'll explore areas outside QWERTY keyboard layout most of us are born into.  And we'll build tools to help us expand that (layout) universe and understand it better using python. We'll go over my history of creating and using my custom keyboard layout (dvorak variant), how I designed and improved it over time, and how I confidently know it's better for me.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jamiel Almeida</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3693/typing-better-and-potentially-faster-with-python</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3693_Typing_better_and_potentially_faster_with_python.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3693_Typing_better_and_potentially_faster_with_python.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/ri7uGmjRp0M" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/ri7uGmjRp0M/hqdefault.jpg"></media:thumbnail></item><item><title>Why You Can't Sit With Us - Understanding Network Analysis in Python With Mean Girls</title><link>http://www.pyvideo.org/video/3687/why-you-cant-sit-with-us-understanding-network</link><description>&lt;p&gt;Description&lt;/p&gt;
Network analysis is a handy tool used to understand group dynamics, provide product recommendations, and prevent homicides (and other things). This talk will introduce the theory behind network analysis and showcase the flexibility of Python's NetworkX library. No knowledge of network analysis (or Mean Girls) is needed, but basic knowledge of Python and the iPython Notebook, will be helpful.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Harris</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3687/why-you-cant-sit-with-us-understanding-network</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3687_Why_You_Cant_Sit_With_Us_Understanding_Network_Ana.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3687_Why_You_Cant_Sit_With_Us_Understanding_Network_Ana.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/-s2w9M3J4uQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/-s2w9M3J4uQ/hqdefault.jpg"></media:thumbnail></item><item><title>A Calendar for Mars</title><link>http://www.pyvideo.org/video/3720/a-calendar-for-mars</link><description>&lt;p&gt;Description&lt;/p&gt;
A discussion of Martian timekeeping and using Python to create a Single Page Application about a calendar for mars using Flask, Twitter Bootstrap, and Backbone.js.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Roche</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3720/a-calendar-for-mars</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3720_A_Calendar_for_Mars.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3720_A_Calendar_for_Mars.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/6m9RQsW9t5g" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/6m9RQsW9t5g/hqdefault.jpg"></media:thumbnail></item><item><title>Art and Science With Six Million Timelapse Images and Python</title><link>http://www.pyvideo.org/video/3683/art-and-science-with-six-million-timelapse-images</link><description>&lt;p&gt;Description&lt;/p&gt;
I have been taking a picture every 10 seconds out my window for two years. This talk explores all the cool things you can do with almost 4 Terabytes of images to make art and demonstrate science. We'll touch on everything from pillow, pyephem, Django, Celery, and OpenCV.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Floehr</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3683/art-and-science-with-six-million-timelapse-images</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3683_Art_and_Science_With_Six_Million_Timelapse_Images_.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3683_Art_and_Science_With_Six_Million_Timelapse_Images_.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/Mfo4hVc71Qw" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/Mfo4hVc71Qw/hqdefault.jpg"></media:thumbnail></item><item><title>Automating Your Browser and Desktop Apps</title><link>http://www.pyvideo.org/video/3692/automating-your-browser-and-desktop-apps</link><description>&lt;p&gt;Description&lt;/p&gt;
There's a lot of data on the web and in your desktop apps, but accessing it can involve a lot of tedious typing and clicking. In this talk Al Sweigart explains web scraping techniques and programmatically controlling the keyboard and mouse to automate these tasks for you. Covers the Selenium and PyAutoGUI modules.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Al Sweigart</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3692/automating-your-browser-and-desktop-apps</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3692_Automating_Your_Browser_and_Desktop_Apps.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3692_Automating_Your_Browser_and_Desktop_Apps.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/ZYQV8BZwAjA" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/ZYQV8BZwAjA/hqdefault.jpg"></media:thumbnail></item><item><title>Best Practices for Python Scripting</title><link>http://www.pyvideo.org/video/3675/best-practices-for-python-scripting</link><description>&lt;p&gt;Description&lt;/p&gt;
The Python REPL is an amazing tool for exploring a problem and quickly finding an answer.  But how do you turn that "quick and dirty" snippet into an elegant, reusable module? In this talk, you'll learn how to isolate input, output, configuration options and more from your core logic to transform that block of code into a package and script that behave well in command line environments.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Back</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3675/best-practices-for-python-scripting</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3675_Best_Practices_for_Python_Scripting.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3675_Best_Practices_for_Python_Scripting.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/lNjKBhD9x1M" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/lNjKBhD9x1M/hqdefault.jpg"></media:thumbnail></item><item><title>Coroutines, Async/Await, Asyncio and the Pulsar Library</title><link>http://www.pyvideo.org/video/3672/coroutines-asyncawait-asyncio-and-the-pulsar-l</link><description>&lt;p&gt;Description&lt;/p&gt;
I will discuss the past benefits of using gevent, greenlet and twisted and how asyncio acts as a new solution in Python 3. This talk will focus on the new async/await features for Python 3.5, as well as the Pulsar library, a powerful coroutine library that builds on asyncio coroutines.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David J Felix</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3672/coroutines-asyncawait-asyncio-and-the-pulsar-l</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3672_Coroutines_AsyncAwait_Asyncio_and_the_Pulsar_Libra.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3672_Coroutines_AsyncAwait_Asyncio_and_the_Pulsar_Libra.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/M5-mcKh8QmY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/M5-mcKh8QmY/hqdefault.jpg"></media:thumbnail></item><item><title>Data Science: It's Easy as Pyǃ</title><link>http://www.pyvideo.org/video/3706/data-science-its-easy-as-py</link><description>&lt;p&gt;Description&lt;/p&gt;
Over the last several years, many amazing Python projects have been created for working with data, making Python one of the top languages for data scientists. In this talk, I'll cover all five stages of the OSEMN data science process, and several Python libraries that can be used at each stage. To demo, I'll illustrate the creation of a language classification algorithm, using Wikipedia articles.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Becker</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3706/data-science-its-easy-as-py</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3706_Data_Science_Its_Easy_as_Py%C7%83.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3706_Data_Science_Its_Easy_as_Py%C7%83.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/HIEoeEQRSAQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/HIEoeEQRSAQ/hqdefault.jpg"></media:thumbnail></item><item><title>Filling the Flask</title><link>http://www.pyvideo.org/video/3700/filling-the-flask</link><description>&lt;p&gt;Description&lt;/p&gt;
Just because Flask is a micro-framework doesn’t mean we still don’t want to have great AAA (authentication, authorization, and accounting), email services, simplified database access/migrations and form handling. Lets look at some of the most common libraries used to build the powerful simplicity of Flask into a full featured web application without having to reinvent the wheel each time. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Myers</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3700/filling-the-flask</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3700_Filling_the_Flask.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3700_Filling_the_Flask.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/wHPr-pAHQwE" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/wHPr-pAHQwE/hqdefault.jpg"></media:thumbnail></item><item><title>From Synchronous to Asynchronous Postgres with Tornado</title><link>http://www.pyvideo.org/video/3698/from-synchronous-to-asynchronous-postgres-with-to</link><description>&lt;p&gt;Description&lt;/p&gt;
During my talk two years ago "ORM vs SQL Roundup" I concluded with some simple ways to do Object Relationship mapping without the heavy overhead of a full featured ORM. This talk will show how I transformed the code to work asynchronously.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Robellard</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3698/from-synchronous-to-asynchronous-postgres-with-to</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3698_From_Synchronous_to_Asynchronous_Postgres_with_Tor.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3698_From_Synchronous_to_Asynchronous_Postgres_with_Tor.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/C7m9gkCQCXc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/C7m9gkCQCXc/hqdefault.jpg"></media:thumbnail></item><item><title>How I built a power debugger out of the standard library and things I found on the internet</title><link>http://www.pyvideo.org/video/3679/how-i-built-a-power-debugger-out-of-the-standard</link><description>&lt;p&gt;Description&lt;/p&gt;
Smiley spys on your application, recording everything it does, using Python's built-in tracing facility and a database to create a complete record of your program's runtime so you can study it. Most of the tools I used to create Smiley are in Python's standard library, and the history of Smiley's development serves as a framework to discuss those tools and how you can tap their power yourself.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Doug Hellmann</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3679/how-i-built-a-power-debugger-out-of-the-standard</guid><enclosure url="http://youtu.be/VDbiMXs9fgM" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/VDbiMXs9fgM/hqdefault.jpg"></media:thumbnail></item><item><title>How I learned Python while working at Eventbrite</title><link>http://www.pyvideo.org/video/3701/how-i-learned-python-while-working-at-eventbrite</link><description>&lt;p&gt;Description&lt;/p&gt;
How do you learn a new tech stack while shipping code at the same time? When I joined Eventbrite I knew Java and Ruby (and don't ask me to program in either of those anymore, I don't remember). I'll give some tips and strategies while saying what worked -- and didn't -- for me when I was learning Django at Eventbrite.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Lacker</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3701/how-i-learned-python-while-working-at-eventbrite</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3701_How_I_learned_Python_while_working_at_Eventbrite.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3701_How_I_learned_Python_while_working_at_Eventbrite.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/iIQqUQBG_Jg" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/iIQqUQBG_Jg/hqdefault.jpg"></media:thumbnail></item><item><title>How I taught my dog to text me selfies</title><link>http://www.pyvideo.org/video/3714/how-i-taught-my-dog-to-text-me-selfies</link><description>&lt;p&gt;Description&lt;/p&gt;
If you want to get into hardware hacking but don't want to learn a new language, this talk's for you. The Arduino Yun is Wifi enabled and comes with Python installed. Using Python, Twilio, a webcam and a big red button, I taught my dog how to send selfies. In this talk, we'll live code the solution from beginning to end. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Baugues</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3714/how-i-taught-my-dog-to-text-me-selfies</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3714_How_I_taught_my_dog_to_text_me_selfies.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3714_How_I_taught_my_dog_to_text_me_selfies.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/h8BrLJfRCKk" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/h8BrLJfRCKk/hqdefault.jpg"></media:thumbnail></item><item><title>How to be a good mentor</title><link>http://www.pyvideo.org/video/3719/how-to-be-a-good-mentor</link><description>&lt;p&gt;Description&lt;/p&gt;
I've been lucky enough to work with a team of 15 engineers and every single one of them has been a mentor to me formally or informally.  What makes a great mentor? How can you encourage people to stay in the field and help them to become better engineers. When your junior developers are better your whole team benefits. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Liz Tom</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3719/how-to-be-a-good-mentor</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3719_How_to_be_a_good_mentor.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3719_How_to_be_a_good_mentor.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/j1G9R0DHNWA" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/j1G9R0DHNWA/hqdefault.jpg"></media:thumbnail></item><item><title>Is that spam in my ham? A novice's inquiry into classification.</title><link>http://www.pyvideo.org/video/3690/is-that-spam-in-my-ham-a-novices-inquiry-into-c</link><description>&lt;p&gt;Description&lt;/p&gt;
**Supervised learning, machine learning, classifiers!** *Help?* In this talk I define a problem, identifying an email as spam, from the perspective of a beginner and show how Python can help us learn to classify. We will translate knowing spam "when I see it" into a basic model and use a Naive Bayes classifier to determine if email is spam. We will train our classifier with examples and practice!</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lorena Mesa</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3690/is-that-spam-in-my-ham-a-novices-inquiry-into-c</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3690_Is_that_spam_in_my_ham_A_novices_inquiry_into_clas.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3690_Is_that_spam_in_my_ham_A_novices_inquiry_into_clas.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/GfmTq1PJkE4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/GfmTq1PJkE4/hqdefault.jpg"></media:thumbnail></item><item><title>Learning to learn Python</title><link>http://www.pyvideo.org/video/3677/learning-to-learn-python</link><description>&lt;p&gt;Description&lt;/p&gt;
For those new to programming and Python, the best way to learn the language can be confusing. However, the web provides many avenues from MOOCs, learning communities, user groups, books, online tutorials, and Q&amp;A sites to begin learning and build skills. What path should you take as a solo learner? This talk will provide an overview of places to get started and strategies to learn smarter.
.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ann Schoenenberger</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3677/learning-to-learn-python</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3677_Learning_to_learn_Python.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3677_Learning_to_learn_Python.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/HC9CzEjCCu4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/HC9CzEjCCu4/hqdefault.jpg"></media:thumbnail></item><item><title>**Lightning talks!**</title><link>http://www.pyvideo.org/video/3721/lightning-talks-15</link><description></description><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3721/lightning-talks-15</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3721_Lightning_talks_2.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3721_Lightning_talks_2.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/hV-ulMpwMvo" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/hV-ulMpwMvo/hqdefault.jpg"></media:thumbnail></item><item><title>Name Things Once</title><link>http://www.pyvideo.org/video/3718/name-things-once</link><description>&lt;p&gt;Description&lt;/p&gt;
Naming things is hard so you should do as little of it as possible. Your coworkers will thank you for it.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Diederich</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3718/name-things-once</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3718_Name_Things_Once.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3718_Name_Things_Once.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/hZ7hgYKKnF0" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/hZ7hgYKKnF0/hqdefault.jpg"></media:thumbnail></item><item><title>Network Automation using Ansible and Python</title><link>http://www.pyvideo.org/video/3709/network-automation-using-ansible-and-python</link><description>&lt;p&gt;Description&lt;/p&gt;
This session will look at some of the ways that network infrastructure can be managed in an automated way using Ansible and Python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Oswalt</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3709/network-automation-using-ansible-and-python</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3709_Network_Automation_using_Ansible_and_Python.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3709_Network_Automation_using_Ansible_and_Python.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/VYEVjKvMKqU" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/VYEVjKvMKqU/hqdefault.jpg"></media:thumbnail></item><item><title>Open-Source Society (PyOhio 2015 keynote)</title><link>http://www.pyvideo.org/video/3671/keynote-by-catherine-devlin</link><description>&lt;p&gt;Description&lt;/p&gt;
Open-source developers don't just build software - we also build ways to work cooperatively.  We can serve as a laboratory of cooperation that develops and demonstrate cooperative tools, techniques, and attitudes that will have a huge benefit to the world outside software, helping human society scale more effectively than it ever has.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Catherine Devlin</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3671/keynote-by-catherine-devlin</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3671_Keynote_by_Catherine_Devlin.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3671_Keynote_by_Catherine_Devlin.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/fYDdq4sqi24" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/fYDdq4sqi24/hqdefault.jpg"></media:thumbnail></item><item><title>Pandas Dataframes At The Cinema</title><link>http://www.pyvideo.org/video/3674/pandas-dataframes-at-the-cinema</link><description>&lt;p&gt;Description&lt;/p&gt;
Using data from the Internet Movie Database, students will use the Pandas data analysis library to search the data and answer questions about it. This will be a more focused version of the tutorial I gave at PyCon this year, with an emphasis on demonstrations that get the students ready to go home and work on the several hours' worth of fun exercises that the full tutorial includes.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3674/pandas-dataframes-at-the-cinema</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3674_Pandas_Dataframes_At_The_Cinema.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3674_Pandas_Dataframes_At_The_Cinema.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/Bn2OAoi3SPk" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/Bn2OAoi3SPk/hqdefault.jpg"></media:thumbnail></item><item><title>Python as the multitool of data science</title><link>http://www.pyvideo.org/video/3713/python-as-the-multitool-of-data-science</link><description>&lt;p&gt;Description&lt;/p&gt;
Python has lead the way in making data science more accessible with a number of solid data driven libraries. This talk will be a high introduction to familiarize people interested in data science with some of the more common Python tools such as pandas for data munging and analysis, numpy for scientific computing, scikit-learn for machine learning and matplotlib for visualizing your data.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derik Pell</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3713/python-as-the-multitool-of-data-science</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3713_Python_as_the_multitool_of_data_science.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3713_Python_as_the_multitool_of_data_science.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/rJGme8MboSg" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/rJGme8MboSg/hqdefault.jpg"></media:thumbnail></item><item><title>Simple Games for Python Beginners</title><link>http://www.pyvideo.org/video/3696/simple-games-for-python-beginners</link><description>&lt;p&gt;Description&lt;/p&gt;
This class is designed for enthusiasts just starting out with Python.  We will design and build a simple game and, along the way, learn about various statements and data structures in Python.  If you can write and run "hello, world!" but don't know what to do next, this class is for you!  Note that this is not a class on pyGame.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Lindstrom</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3696/simple-games-for-python-beginners</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3696_Simple_Games_for_Python_Beginners.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3696_Simple_Games_for_Python_Beginners.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/3b4D4R11lEs" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/3b4D4R11lEs/hqdefault.jpg"></media:thumbnail></item><item><title>Stumbling blocks of a Python newbie</title><link>http://www.pyvideo.org/video/3678/stumbling-blocks-of-a-python-newbie</link><description>&lt;p&gt;Description&lt;/p&gt;
In our PyLadies study group the training resources we’ve used have common stumbling blocks which can make learning difficult for the beginner.  We will provide suggestions on how to overcome these challenges and to increase the success of learners.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amy Hubbard,Dwight Hubbard</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3678/stumbling-blocks-of-a-python-newbie</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3678_Stumbling_blocks_of_a_Python_newbie.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3678_Stumbling_blocks_of_a_Python_newbie.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/8h-_gHMxse4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/8h-_gHMxse4/hqdefault.jpg"></media:thumbnail></item><item><title>Super Intermediate Python 3</title><link>http://www.pyvideo.org/video/3680/super-intermediate-python-3</link><description>&lt;p&gt;Description&lt;/p&gt;
This talk is a follow up of my 2013 Super Advanced Python talk, but now will be much more focused on functional programming and data transformation. We will deep dive into the wonders of functional programming with Python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Chandler III</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3680/super-intermediate-python-3</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3680_Super_Intermediate_Python_3.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3680_Super_Intermediate_Python_3.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/3bgpTlVw6Lg" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/3bgpTlVw6Lg/hqdefault.jpg"></media:thumbnail></item><item><title>Teaching a Computer to Fight Itself (Implementing an OGRE AI)</title><link>http://www.pyvideo.org/video/3707/teaching-a-computer-to-fight-itself-implementing</link><description>&lt;p&gt;Description&lt;/p&gt;
OGRE is an asymmetric board game pitting a futuristic fighting force of infantry and armor against a single, massive, artificially intelligent cyber tank.  Figuring out a winning strategy was difficult, so I taught my computer how to play the game, and learn to play it better using Python.

Source code available at: https://github.com/gar0u/ogre-ai</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">William Hutton</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3707/teaching-a-computer-to-fight-itself-implementing</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3707_Teaching_a_Computer_to_Fight_Itself_Implementing_a.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3707_Teaching_a_Computer_to_Fight_Itself_Implementing_a.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/LX-PZLwpNJ0" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/LX-PZLwpNJ0/hqdefault.jpg"></media:thumbnail></item><item><title>Using Python to Get Out the Vote</title><link>http://www.pyvideo.org/video/3694/using-python-to-get-out-the-vote</link><description>&lt;p&gt;Description&lt;/p&gt;
This talk will explore how I used Python to power the get-out-the-vote campaign for a local school levy ballot issue—saving thousands of consulting dollars along the way.  We’ll talk about fusing and normalizing available data sources, reading and writing CSV files, and data modeling and querying using SQLAlchemy.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Pirnat</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3694/using-python-to-get-out-the-vote</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3694_Using_Python_to_Get_Out_the_Vote.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3694_Using_Python_to_Get_Out_the_Vote.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/9ZvxbxfTVt4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/9ZvxbxfTVt4/hqdefault.jpg"></media:thumbnail></item><item><title>You Gotta Want It: Building Up Women in Computer Science</title><link>http://www.pyvideo.org/video/3716/you-gotta-want-it-building-up-women-in-computer</link><description>&lt;p&gt;Description&lt;/p&gt;
Tech's diversity problem is well-known, and college communities are no exception. This is the story of building up Case Western's women in computer science community over a year, and how to apply the same strategies to your own company or community.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephanie Hippo</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3716/you-gotta-want-it-building-up-women-in-computer</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3716_You_Gotta_Want_It_Building_Up_Women_in_Computer_Sc.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pyohio-2015/3716_You_Gotta_Want_It_Building_Up_Women_in_Computer_Sc.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/H9GpEOUojeQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="https://i.ytimg.com/vi/H9GpEOUojeQ/hqdefault.jpg"></media:thumbnail></item></channel></rss>
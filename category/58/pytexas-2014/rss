<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of PyTexas 2014</title><link>http://www.pyvideo.org/category/58/pytexas-2014/rss</link><description></description><atom:link href="http://www.pyvideo.org/category/58/pytexas-2014/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Sun, 05 Oct 2014 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>A CPython Eating Its Own Tail</title><link>http://www.pyvideo.org/video/3205/a-cpython-eating-its-own-tail</link><description>&lt;p&gt;Description&lt;/p&gt;
This is an expert-level talk that dives into CPython and discusses various ways to embed Python interpreters. It starts with the "very high level" embedding &amp; the "pure" embedding, shows a fairly novel "zero interpreter" embedding using Cython, a few attempts at a ctypes/cffi embedding, and builds to a finish with a source-filter embedding of a Python interpreter into itself. 

The purpose of this talk is to have some fun diving into CPython internals while looking practical approaches to embedding CPython interpreters into other (C/C++) processes. The final result, a Python 3 interpreter embedded into a Python 2 interpreter as an extension model, is novel but may be of fairly limited actual use. It is, however, pretty wild and a lot of fun!</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3205/a-cpython-eating-its-own-tail</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3205_A_CPython_Eating_Its_Own_Tail.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3205_A_CPython_Eating_Its_Own_Tail.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/OOMtmi7Annc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/OOMtmi7Annc/hqdefault.jpg"></media:thumbnail></item><item><title>A D&amp;D-based guide to Contribution and Inclusion in the Python Community</title><link>http://www.pyvideo.org/video/3190/a-dd-based-guide-to-contribution-and-inclusion-i</link><description>&lt;p&gt;Description&lt;/p&gt;
The Python community needs many different types of contributions to thrive. If you ever thought, "I'm not a great programmer, so I can't contribute to the Python community. :-(", you're WRONG!

First, using classes and roles from Dungeons &amp; Dragons (D&amp;D) as a lens, we'll  look at multiple contributing roles in the Python community, and how you can find one that fits you. Not familiar with D&amp;D? I'll provide a brief, relevant primer.

Next, we'll continue the discussion to see how Inclusiveness helps us get those different contributors into the Python community. To use D&amp;D language, a party of only one class won't go far. We'll also look at how Inclusiveness is NOT the same thing as Diversity or Political Correctness.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kojo Idrissa</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3190/a-dd-based-guide-to-contribution-and-inclusion-i</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3190_A_DDbased_guide_to_Contribution_and_Inclusion_in_t.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3190_A_DDbased_guide_to_Contribution_and_Inclusion_in_t.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/Xpd9ms2v3Yc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/Xpd9ms2v3Yc/hqdefault.jpg"></media:thumbnail></item><item><title>Asynchronous Programming with Tornado Web Server</title><link>http://www.pyvideo.org/video/3192/asynchronous-programming-with-tornado-web-server</link><description>&lt;p&gt;Description&lt;/p&gt;
I will define what asynchronous means and why it is useful for todays web applications. I will also give and introduction to using Tornado web server and go over syntax. Then I'll will do a code walk through of small project I wrote using Tornado Web Server and virtualenv that utilizes calls Google maps API and demonstrates asynchronous calls.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kacie Houser</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3192/asynchronous-programming-with-tornado-web-server</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3192_Asynchronous_Programming_with_Tornado_Web_Server.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3192_Asynchronous_Programming_with_Tornado_Web_Server.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/r9sy7tcDlzU" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/r9sy7tcDlzU/hqdefault.jpg"></media:thumbnail></item><item><title>Conducting and Visualizing Set-Theoretic Social Research with Python</title><link>http://www.pyvideo.org/video/3148/conducting-and-visualizing-set-theoretic-social-r</link><description>&lt;p&gt;Description&lt;/p&gt;
In this talk, I will discuss a suite of F/OSS programs (Python/Qt) that I have developed for conducting "qualitative comparative analysis," a social research technique for analyzing subset relationships.  (For example, religious fundamentalists constitute a
rough subset of political conservatives: most religious fundamentalists are politically conservative but most conservatives aren't religious fundamentalists.)

The talk will review the process of developing the software, beginning with an R implementation that was ultimately discarded, and outline why I ended up choosing Python and review the consequences of that choice, both pro and con.  I will also discuss my current work on developing new techniques for visualizing subset relationships, including different approaches to presenting Venn and Euler diagrams.
More generally, I'll assess benefits and disadvantages of using Python for developing academic software.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Claude Rubinson</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3148/conducting-and-visualizing-set-theoretic-social-r</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3148_Conducting_and_Visualizing_SetTheoretic_Social_Res.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3148_Conducting_and_Visualizing_SetTheoretic_Social_Res.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/SdJ0jaLFmRs" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/SdJ0jaLFmRs/hqdefault.jpg"></media:thumbnail></item><item><title>GIS for Python People</title><link>http://www.pyvideo.org/video/3189/gis-for-python-people</link><description>&lt;p&gt;Description&lt;/p&gt;
It seems like everyone is talking about GIS lately, but what exactly is it, anyway? And more importantly: as a Python user, why should you care? 

This talk's goal is twofold: first, to try and demystify the basic idea of "GIS" for people who are interested in the topic and are coming from a Python background. I'll cover general GIS concepts, talk about spatial data, and what makes it unique. Second, to show how you might be able to use and integrate GIS into your work. I'll go over some of the more common Python tools available for working with GIS data, and show examples of use-cases. Although I'll briefly touch on major GIS industry players, my main focus will be on easily-accessible, free &amp; open source tools.

This is an all-levels talk: like the title says, this is for "Python People"! Whether you consider yourself a seasoned Python developer, an enthusiastic fan, or are just getting started: you should be able to learn something new while following along with the concepts &amp; examples I'll discuss. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sara Safavi</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3189/gis-for-python-people</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3189_GIS_for_Python_People.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3189_GIS_for_Python_People.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/CTZRZFehjFU" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/CTZRZFehjFU/hqdefault.jpg"></media:thumbnail></item><item><title>How to get started and keep going with Python</title><link>http://www.pyvideo.org/video/3187/how-to-get-started-and-keep-going-with-python</link><description>&lt;p&gt;Description&lt;/p&gt;
So you have decided that you want to learn Python. Right now there are lots of resources available for people who want to learn Python. But how do you keep going once you have embarked on this path? This talk draws on my personal experiences as I’m working on becoming proficient with Python programming. It aims at encouraging novices in Python to take advantage of all the resources that are available to become proficient. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Constanze Kratel</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3187/how-to-get-started-and-keep-going-with-python</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3187_How_to_get_started_and_keep_going_with_Python.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3187_How_to_get_started_and_keep_going_with_Python.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/P4_xmNBmIYU" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/P4_xmNBmIYU/hqdefault.jpg"></media:thumbnail></item><item><title>How to write dumber tests</title><link>http://www.pyvideo.org/video/3200/how-to-write-dumber-tests</link><description>&lt;p&gt;Description&lt;/p&gt;
Writing and debugging code is hard, but testing shouldn't be.  This talk will discuss common techniques for writing simpler tests that still exercise your production code while preventing you from spending time debugging test code.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luke Lee</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3200/how-to-write-dumber-tests</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3200_How_to_write_dumber_tests.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3200_How_to_write_dumber_tests.webm" mime_type="video/webm"></media:content><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3200_How_to_write_dumber_tests.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/Xjv8ZwZf-h4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/Xjv8ZwZf-h4/hqdefault.jpg"></media:thumbnail></item><item><title>Lightning Talks</title><link>http://www.pyvideo.org/video/3206/lightning-talks-11</link><description>&lt;p&gt;Description&lt;/p&gt;
 * (00:00) - Sasha Hart -- Make PyPI Fast
 * (0:01:36) - Sasha Hart -- Find Your Editor
 * (0:04:17) - Jeff Rush -- Ways to Call Out
 * (0:06:28) - Jeff Rush -- Weak References
 * (0:08:17) - James Powell -- Newton's Method
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell,Jeff Rush,Sasha Hart</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3206/lightning-talks-11</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3206_Lightning_Talks_3.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3206_Lightning_Talks_3.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/y5OWRJZut8E" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/y5OWRJZut8E/hqdefault.jpg"></media:thumbnail></item><item><title>Modeling Dollar and Community Currency Flows in a Virtual US County Using Python</title><link>http://www.pyvideo.org/video/3203/modeling-dollar-and-community-currency-flows-in-a</link><description>&lt;p&gt;Description&lt;/p&gt;
John Boik is the author of the new book "Economic Direct Democracy: A Framework to End Poverty and Maximize Well-Being." John will delve into his Python-based simulation model of flows of the dollar and a proposed community currency (called the token) in a virtual US county.  He gives background on the proposed community currency system, called the Token Exchange System, explores how the model is structured, presents modeling results, and discusses potential social impact as guided and informed his book's thesis. As a hint of scale and potential impact, annual currency flows in the simulation model are measured in the billions.  A global partnership of interested academic, civil society, government, business, and philanthropy groups is now forming to move the book's proposal forward. 

Simulation model background: http://www.principledsocietiesproject.org/simulation-model/

Python TES-simulation Package: https://pypi.python.org/pypi/TES-simulation

Project and book details: http://www.principledsocietiesproject.org/ </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Boik</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3203/modeling-dollar-and-community-currency-flows-in-a</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3203_Modeling_Dollar_and_Community_Currency_Flows_in_a_.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3203_Modeling_Dollar_and_Community_Currency_Flows_in_a_.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/TYVLX3EoU-w" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/TYVLX3EoU-w/hqdefault.jpg"></media:thumbnail></item><item><title>Mogwai: Graph Databases in your App</title><link>http://www.pyvideo.org/video/3198/mogwai-graph-databases-in-your-app</link><description>&lt;p&gt;Description&lt;/p&gt;
Graph Databases can be very powerful when used correctly, unfortunately the landscape is still very young, let alone finding a python library to interface with your database.  Here we will cover Titan (a highly scalable graph database) and Mogwai (a python OGM, maintained by me) to interface with the database in an intuitive and easy fashion. 

We'll very quickly cover the concept of graph databases, and interacting with Titan via the Gremlin REPL. Following that we'll go headstrong into working with Mogwai and create a simple web API.

http://mogwai.readthedocs.org/
http://bitbucket.org/wellaware/mogwai</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cody Lee</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3198/mogwai-graph-databases-in-your-app</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3198_Mogwai_Graph_Databases_in_your_App.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3198_Mogwai_Graph_Databases_in_your_App.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/BOqj6-UGBAc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/BOqj6-UGBAc/hqdefault.jpg"></media:thumbnail></item><item><title>PostgreSQL 9.4's "jsonb" Document Store</title><link>http://www.pyvideo.org/video/3186/postgresql-94s-jsonb-document-store</link><description>&lt;p&gt;Description&lt;/p&gt;
I will give an intro to PostgreSQL's "jsonb" JSON document store; how it compares to MongoDB; guidelines for choosing between SQL-only, SQL+jsonb, and MongoDB; and using it from Python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Micah Yoder</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3186/postgresql-94s-jsonb-document-store</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3186_PostgreSQL_94s_jsonb_Document_Store.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3186_PostgreSQL_94s_jsonb_Document_Store.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/6-2tpHLLM1o" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/6-2tpHLLM1o/hqdefault.jpg"></media:thumbnail></item><item><title>Python on the Brain: A Quick Dive into NuPIC</title><link>http://www.pyvideo.org/video/3201/python-on-the-brain-a-quick-dive-into-nupic</link><description>&lt;p&gt;Description&lt;/p&gt;
At OSCON 2013 Numenta's Jeff Hawkin presented NuPIC, an open source implementation of his theories on how the brain stores information, makes connections between entities, and predicts the future.  In this talk we'll do a quick overview of the neocortical theory, and then dive into an interesting code example of how NuPIC works, and build a simple, fun neocortical prediction app in python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Kramer</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3201/python-on-the-brain-a-quick-dive-into-nupic</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3201_Python_on_the_Brain_A_Quick_Dive_into_NuPIC.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3201_Python_on_the_Brain_A_Quick_Dive_into_NuPIC.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/UURtDfHZrw4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/UURtDfHZrw4/hqdefault.jpg"></media:thumbnail></item><item><title>Reliable Testing &amp; Deployments with pip and Wheels</title><link>http://www.pyvideo.org/video/3202/reliable-testing-deployments-with-pip-and-wheel</link><description>&lt;p&gt;Description&lt;/p&gt;
I plan to briefly introduce pip requirements files and the wheel format.  I will then demonstrate an approach for structuring requirements files, using "snapshot" requirement files, and building "wheelhouses" that get committed to your VCS.  This approach has the following benefits:

- known working &amp; tested dependencies are clearly communicated between developers
- project setup for new developers is simplified
- build servers no longer throw erroneous errors if PyPI is down
- production environments no longer need build tools installed on them
- production environments are guaranteed to be running on the same version of dependencies that were developed on and tested</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Randy Syring</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3202/reliable-testing-deployments-with-pip-and-wheel</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3202_Reliable_Testing_Deployments_with_pip_and_Wheels.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3202_Reliable_Testing_Deployments_with_pip_and_Wheels.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/FcRgR7bBIUU" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/FcRgR7bBIUU/hqdefault.jpg"></media:thumbnail></item><item><title>Running in the USA: Analysis of World-Wide GPS Tracks in Running Events</title><link>http://www.pyvideo.org/video/3199/running-in-the-usa-analysis-of-world-wide-gps-tr</link><description>&lt;p&gt;Description&lt;/p&gt;
MapMyFitness is an open fitness tracking platform that collects hundreds of thousands of tracks every day from GPS fitness devices around the planet.  Within this massive database of fitness activity lies untold insights into human behavior.  In this talk, I'll show how I use Python-based analysis tools for identifying running events, from 5ks to marathons). Using a combination of Amazon Redshift SQL, scipy, matplotlib &amp; pandas, I'll show how you can glean a variety of insight into running event performance, from weather and training effects on speed, to regional &amp; demographic differences in attendance.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyler Eastman</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3199/running-in-the-usa-analysis-of-world-wide-gps-tr</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3199_Running_in_the_USA_Analysis_of_WorldWide_GPS_Track.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3199_Running_in_the_USA_Analysis_of_WorldWide_GPS_Track.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/yuxu5Y-N0CY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/yuxu5Y-N0CY/hqdefault.jpg"></media:thumbnail></item><item><title>Snakes in Sheets</title><link>http://www.pyvideo.org/video/3197/snakes-in-sheets</link><description>&lt;p&gt;Description&lt;/p&gt;
Microsoft Excel continues to be popular across many industries where data analysis is fundamental to success. It marries powerful organization and presentation functionality to sift through large datasets. However, the default scripting language for Excel, VBA, is often cumbersome to use. Python is maturing as a quantitative scripting language with a growing scientific community around it, so it makes great sense to marry Excel’s user interface with Python’s extensive data acquisition and analysis libraries.

This talk introduces you to Pyinex, an open source project to embed a Python interpreter within an Excel addin. It directly exposes Python user defined functions as Excel worksheet functions, allows users to call arbitrary Python code from within Excel, and provides an interactive Python session all from within the same process space. Pyinex brings to Excel all the goodies of Python—data analysis using SciPy, NumPy, Pandas and more; integration with databases, web services, and other network resources; rapid function prototyping; extensive library support; and so much more.

This talk will demonstrate the capabilities of Pyinex and give an overview of how it works internally.  The aim is to present the tool for both end-users and developers to inspire the audience thinking of new use cases and spark conversation on how to further improve the project.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abhipray Sahoo</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3197/snakes-in-sheets</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3197_Snakes_in_Sheets.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3197_Snakes_in_Sheets.webm" mime_type="video/webm"></media:content><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3197_Snakes_in_Sheets.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=X3ImPHjAmUQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/X3ImPHjAmUQ/hqdefault.jpg"></media:thumbnail></item><item><title>Swift for Pythonistas</title><link>http://www.pyvideo.org/video/3191/swift-for-pythonistas</link><description>&lt;p&gt;Description&lt;/p&gt;
Swift, Apple's new iOS/OS X programming language, is remarkably Pythonic. Is it easy for a Pythonista to start writing iOS apps? This talk will expose you briefly to Swift, the development environment and discuss the biggest differences between Python and Swift. After this talk, you will know how to approach the platform and see if Swift programming is for you.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Donoho</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3191/swift-for-pythonistas</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3191_Swift_for_Pythonistas.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3191_Swift_for_Pythonistas.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/l0p3_nb2qLo" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/l0p3_nb2qLo/hqdefault.jpg"></media:thumbnail></item><item><title>Visualizing Twitter Data with Blaze and Bokeh</title><link>http://www.pyvideo.org/video/3204/visualizing-twitter-data-with-blaze-and-bokeh</link><description>&lt;p&gt;Description&lt;/p&gt;
Making nice interactive data visualizations in the browser should be easy and fun! Let's explore tweets with simple IPython notebooks, a Blaze interface and Bokeh plots!

Bokeh is a Python interactive visualization library that targets modern web browsers for presentation. Its goal is to provide elegant, concise construction of novel graphics in the style of D3.js, but also deliver this capability with high-performance interactivity over very large or streaming datasets. http://bokeh.pydata.org/

Blaze provides a uniform and adaptable interface to access a variety of backends, which include streaming Python, Pandas, SQLAlchemy, and Spark.
http://blaze.pydata.org/</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Doig</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3204/visualizing-twitter-data-with-blaze-and-bokeh</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3204_Visualizing_Twitter_Data_with_Blaze_and_Bokeh.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3204_Visualizing_Twitter_Data_with_Blaze_and_Bokeh.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/YpJJYFS5tYk" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/YpJJYFS5tYk/hqdefault.jpg"></media:thumbnail></item><item><title>An Introduction to AngularJS for the Python Web Developer</title><link>http://www.pyvideo.org/video/3157/an-introduction-to-angularjs-for-the-python-web-d</link><description>&lt;p&gt;Description&lt;/p&gt;
An introduction to AngularJS and how to use it in your Python web app.  This talk will cover different web architectures and how Python and AngularJS fit together to implement them.  It will also cover the frontend concepts introduced by the AngularJS and how to use them.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Bailey</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3157/an-introduction-to-angularjs-for-the-python-web-d</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3157_An_Introduction_to_AngularJS_for_the_Python_Web_De.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3157_An_Introduction_to_AngularJS_for_the_Python_Web_De.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/tYTkc-LsjXk" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/tYTkc-LsjXk/hqdefault.jpg"></media:thumbnail></item><item><title>Ascending the Summit: Using Selenium to test web applications</title><link>http://www.pyvideo.org/video/3162/ascending-the-summit-using-selenium-to-test-web</link><description>&lt;p&gt;Description&lt;/p&gt;
We built a testing suite, Summit,  in Python using Selenium to functionally test our application, the Decisio Health Patient Dashboard.  

I intend to show how that testing suite got us through the FDA 510(k) clearance process and how to use Selenium and Python to test an application in a headless and graphical browser.  </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hari Radhakrishnan</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3162/ascending-the-summit-using-selenium-to-test-web</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3162_Ascending_the_Summit_Using_Selenium_to_test_web_ap.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3162_Ascending_the_Summit_Using_Selenium_to_test_web_ap.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/6TfxDUeJegU" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/6TfxDUeJegU/hqdefault.jpg"></media:thumbnail></item><item><title>Building concurrent network applications with asyncio</title><link>http://www.pyvideo.org/video/3179/building-concurrent-network-applications-with-asy</link><description>&lt;p&gt;Description&lt;/p&gt;
In this talk, I'll introduce the `asyncio` module, which was recently added to the Python standard library. I'll talk about the problems that can be solved with asynchronous I/O and will show how the tools provided by the module, including event loops, coroutines, and futures, along with Python's new `yield from` syntax, can be used to build a concurrent network application.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joel Watts</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3179/building-concurrent-network-applications-with-asy</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3179_Building_concurrent_network_applications_with_asyn.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3179_Building_concurrent_network_applications_with_asyn.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/7gLZr5A2niM" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/7gLZr5A2niM/hqdefault.jpg"></media:thumbnail></item><item><title>Case Study: Using Git to manage UI derived configuration Elements</title><link>http://www.pyvideo.org/video/3156/case-study-using-git-to-manage-ui-derived-config</link><description>&lt;p&gt;Description&lt;/p&gt;
Git is common choice for DVCS by software development teams. This case study describes a python system called ClicBank, that captures domain specific UI entity definitions (in medical insurance industry) as XML files and manages changes in the configurations using open source Git modules. This case study will describe the use cases driving this design, design choices,  schema approach, implementation decisions, python modules, workspace/repository design, number of managed entities, GIT performance and status of project. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Doug Matzke</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3156/case-study-using-git-to-manage-ui-derived-config</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3156_Case_Study_Using_Git_to_manage_UI_derived_configur.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3156_Case_Study_Using_Git_to_manage_UI_derived_configur.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/48fcIml0-_Y" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/48fcIml0-_Y/hqdefault.jpg"></media:thumbnail></item><item><title>Command line interfaces are easy, use them</title><link>http://www.pyvideo.org/video/3175/the-command-line-interface-because-why-not</link><description>&lt;p&gt;Description&lt;/p&gt;
Building a useful and pleasant command line experience is easy.  If you've never really tried adding a command line interface (CLI) to your python scripts or maybe you still have a bitter taste in your mouth from the days of sys.argv, getopt, optparse, and argparse.

I invite you to take another look ... or your first look at command line interfaces and how easy and useful it is for your progress and sanity.

Comparing `Begins`, `DocOpt`, and `Click`
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eloy Zuniga Jr.</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3175/the-command-line-interface-because-why-not</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3175_Command_line_interfaces_are_easy_use_them.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3175_Command_line_interfaces_are_easy_use_them.webm" mime_type="video/webm"></media:content><media:content url="http://www.youtube.com/watch?v=1fsgxOGHl6M" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/1fsgxOGHl6M/hqdefault.jpg"></media:thumbnail></item><item><title>Creating a  browser-based virtual computer lab for teaching and collaboration</title><link>http://www.pyvideo.org/video/3176/creating-a-browser-based-virtual-computer-lab-fo</link><description>&lt;p&gt;Description&lt;/p&gt;
With laptops and tablets becoming more powerful and more ubiquitous in the classroom, traditional computer labs with rows of expensive desktop computers are slowly beginning to lose their relevance. An alternative approach for computer-assisted instruction is to use a browser-based virtual computer lab. The different approaches to providing a virtual computing environment for Python, and the associated challenges, will be discussed. Options for providing a multi-user environment include running a public IPython Notebook server, or using alternative free/commercial solutions that incorporate the notebook interface, such as JiffyLab, Sage Math Cloud, GraphTerm, and Wakari. A virtual computer lab implemented using the GraphTerm server will be described. The advantages of physical computer labs, such as face-to-face interaction, and the challenge of replicating them in a virtual environment will be discussed as well.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ramalingam Saravanan</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3176/creating-a-browser-based-virtual-computer-lab-fo</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3176_Creating_a_browserbased_virtual_computer_lab_for_t.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3176_Creating_a_browserbased_virtual_computer_lab_for_t.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/eue3ysdOO1A" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/eue3ysdOO1A/hqdefault.jpg"></media:thumbnail></item><item><title>Dates &amp; Time: pain points, useful libraries, and testing considerations</title><link>http://www.pyvideo.org/video/3161/dates-time-pain-points-useful-libraries-and</link><description>&lt;p&gt;Description&lt;/p&gt;
Date &amp; Time handling in Python has it's ups &amp; downs.  In this talk, we will cover:

* some of the pain points and weaknesses in the Python standard library
* two libraries I have found helpful: dateutils and arrow
* best practices for working with timezones
* best practices for testing code that deals with dates and time</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Randy Syring</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3161/dates-time-pain-points-useful-libraries-and</guid><enclosure url="http://youtu.be/GZl-13bbq60" length="None" type="video/flv"></enclosure><media:thumbnail url="https://i.ytimg.com/vi/GZl-13bbq60/3.jpg"></media:thumbnail></item><item><title>Democratization of Open Data with Python &amp; Open Source</title><link>http://www.pyvideo.org/video/3180/democratization-of-open-data-with-python-open-s</link><description>&lt;p&gt;Description&lt;/p&gt;
Since the beginning of 2000s, Eric von Hippel has presented Models on how Paradigm Shift from Producer Innovation to User and Open Collaborative Innovation, this can be true not only on products, also in how the users can produce innovation on service like the OpenData &amp; Open Government, don't need the main publisher, researcher or Government provide all the work. The communities can push more innovation around this new services.

Nowadays, everybody can improve the data available, curate, create, publish and provide more value on public &amp; open data. Learn a framework like Flask is more accessible than ever, host &amp; publish REST services for free, host the code of project for free also. It's democratizing all the way. All can be done with Python.

In this presentation I'll demonstrate how can use GitHub to publish a data sets (and proper updates) and the code of the Python REST API with no more than 100 lines of code which can be deployed on local installation, plus, with few commands,  deploy on a service with a free tier like OpenShift for a worldwide audience.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Espartaco Palma</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3180/democratization-of-open-data-with-python-open-s</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3180_Democratization_of_Open_Data_with_Python_Open_Sour.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3180_Democratization_of_Open_Data_with_Python_Open_Sour.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/pPqf4PvSEXM" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/pPqf4PvSEXM/hqdefault.jpg"></media:thumbnail></item><item><title>Generators Will Free Your Mind</title><link>http://www.pyvideo.org/video/3170/generators-will-free-your-mind-0</link><description>&lt;p&gt;Description&lt;/p&gt;
What are generators and coroutines in Python? What additional conceptualisations do they offer, and how can we use them to better model problems? It's an intermediate-level talk around the core concept of generators with a lot of examples of not only neat things you can do with generators but also new ways to model and conceptualise problems.

Generators are one of the most notable features of Python, and they are a critical component of Python 3's driving focus on iterability as a core protocol. This talk introduces the basic concepts surrounding generators, generator expressions, and co-routines, then dives into ways that generators can improve our code: not just in terms of performance but also by offering us better ways to model our problems. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3170/generators-will-free-your-mind-0</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3170_Generators_Will_Free_Your_Mind.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3170_Generators_Will_Free_Your_Mind.webm" mime_type="video/webm"></media:content><media:content url="http://www.youtube.com/watch?v=jitWXLY5aj4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/jitWXLY5aj4/hqdefault.jpg"></media:thumbnail></item><item><title>Getting along with Python</title><link>http://www.pyvideo.org/video/3169/getting-along-with-python</link><description>&lt;p&gt;Description&lt;/p&gt;
So you've finished your introductory course or tutorial on Python, you feel good about your knowledge of the language, and you might have some projects under your belt. What now? 
How about some of the things that aren't really code, which nobody really teaches you in a class or tutorial, which can take years to learn by yourself?
That's what this talk is about: a few of the most common pain points for Python programmers which can easily be avoided by adopting certain tools and practices "around" the coding itself. Not coincidentally, the same tips might also help improve your code and make your life with other Python programmers more harmonious.
Material will roughly summarize/follow the contents of http://gawp.sashahart.net, as a general and gently opinionated tour of common practices in the Python community.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sasha Hart</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3169/getting-along-with-python</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3169_Getting_along_with_Python.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3169_Getting_along_with_Python.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/ikk2Y0Exs5c" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/ikk2Y0Exs5c/hqdefault.jpg"></media:thumbnail></item><item><title>Graph Databases via Networkx</title><link>http://www.pyvideo.org/video/3182/graph-databases-via-networkx</link><description>&lt;p&gt;Description&lt;/p&gt;
Graph databases are a different way to approach your data.  I'll be talking about techniques from social network analysis to do some toy problems to get you thinking in a different direction using a library called Networkx.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Langley</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3182/graph-databases-via-networkx</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3182_Graph_Databases_via_Networkx.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3182_Graph_Databases_via_Networkx.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/HCre6aYeEKc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/HCre6aYeEKc/hqdefault.jpg"></media:thumbnail></item><item><title>High Resolution Reader for Traffic Signal Controllers</title><link>http://www.pyvideo.org/video/3173/high-resolution-reader-for-traffic-signal-control</link><description>&lt;p&gt;Description&lt;/p&gt;
see signalengineer.com for a description of this project offered as open source on github

topics I would like to cover if given 20-25 minutes

1) short background on traffic signal control
2) the Purdue specification for high resolution (0.1 second) data logs
3) interfacing the traffic signal controller by writing a Python shell around WinSCP
4) interfacing SQLite and CSV data using Python
5) developing a user interface using QtDesigner and Pyside
6) the need for threading in the Qt user interface and other lessons learned through this project
7) developing documentation with Sphinx and using WebKit to display it within the Qt interface
8) wrapping the project with cx_freeze
9) using the Inno Setup Compiler to create a windows setup file for the finished project</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Black</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3173/high-resolution-reader-for-traffic-signal-control</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3173_High_Resolution_Reader_for_Traffic_Signal_Controll.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3173_High_Resolution_Reader_for_Traffic_Signal_Controll.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/q_XrnfMOg_M" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/q_XrnfMOg_M/hqdefault.jpg"></media:thumbnail></item><item><title>I ♥ Maps: Quantum GIS + Python</title><link>http://www.pyvideo.org/video/3160/i-maps-quantum-gis-python</link><description>&lt;p&gt;Description&lt;/p&gt;
Quantum GIS (QGIS) is an open-source, highly customizable geospatial application that's great for data exploration, manipulation, and cartographic preparation -- in other words, it's software that allows you to make detailed, aesthetically-pleasing maps for free!

QGIS is also *extremely* script-able with Python, and integrates with a large number of database and analysis backends (GRASS, R, PostGIS, etc.). In this talk, Paige Bailey will be giving a short overview of QGIS; detailing a few mapping case studies; then showing how to leverage additional functionality by writing custom Python plugins.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paige Bailey</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3160/i-maps-quantum-gis-python</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3160_I_Maps_Quantum_GIS_Python.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3160_I_Maps_Quantum_GIS_Python.webm" mime_type="video/webm"></media:content><media:content url="http://www.youtube.com/watch?v=7OU0SjOR-r0" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/7OU0SjOR-r0/hqdefault.jpg"></media:thumbnail></item><item><title>Is your helper library opinionated enough?</title><link>http://www.pyvideo.org/video/3158/is-your-helper-library-opinionated-enough</link><description>&lt;p&gt;Description&lt;/p&gt;
It's a constant debate.

How do you build a helper library?

At one end of the spectrum we have Runscope CEO John Sheehan who thinks that helper libraries are evil and shouldn't exist at all. At the other we find helper libraries that don't look or smell anything like the API. And somewhere in the middle we have helper libraries that are so close to the API itself that they are nothing more than a thin veneer.

Which is better? Who’s right? The real question to me is how idiomatic should a helper library be? Should a Django library make a Django developer feel comfortable, or should she have to read the API docs to understand how it works? Should a Python library look RESTful, or should it look like a hierarchy of classes?

At our company, we maintain two libraries. They both have advantages and disadvantages, they appeal to different developers, and sometimes even the same developer at different times.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Murphy</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3158/is-your-helper-library-opinionated-enough</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3158_Is_your_helper_library_opinionated_enough.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3158_Is_your_helper_library_opinionated_enough.webm" mime_type="video/webm"></media:content><media:content url="http://www.youtube.com/watch?v=XwtAZ34H3rE" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/XwtAZ34H3rE/hqdefault.jpg"></media:thumbnail></item><item><title>Keynote - Developer Experience: Marketing matters</title><link>http://www.pyvideo.org/video/3167/keynote-developer-experience-marketing-matters</link><description>&lt;p&gt;Description&lt;/p&gt;
**In room 2300A**

### Come and Be Amazed!!

![Alt text](https://pbs.twimg.com/media/Bv-GL8uCcAAVN7d.jpg:large)</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jesse Noller</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3167/keynote-developer-experience-marketing-matters</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3167_Keynote_Developer_Experience_Marketing_matters.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3167_Keynote_Developer_Experience_Marketing_matters.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/-vZ_E1OO_PY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/-vZ_E1OO_PY/hqdefault.jpg"></media:thumbnail></item><item><title>Python and Spreadsheets: State of the Union, Oct 2014</title><link>http://www.pyvideo.org/video/3178/python-and-spreadsheets-state-of-the-union-oct</link><description>&lt;p&gt;Description&lt;/p&gt;
At PyTexas 2013 I gave a talk on using Python to work with spreadsheets. The landscape is rapidly changing and the options have expanded. This talk will be a whirlwind tour of your options for using Python with spreadsheets (NOT just Excel) as of late 2014. From processing spreadsheet *files* to using Python to directly control a spreadsheet app, we'll see what's available, with a focus on how it can help **you** with what you work on.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kojo Idrissa</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3178/python-and-spreadsheets-state-of-the-union-oct</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3178_Python_and_Spreadsheets_State_of_the_Union_Oct_201.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3178_Python_and_Spreadsheets_State_of_the_Union_Oct_201.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/3K8QXqI-Ols" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/3K8QXqI-Ols/hqdefault.jpg"></media:thumbnail></item><item><title>Snake charming with pyenv</title><link>http://www.pyvideo.org/video/3181/snake-charming-with-pyenv</link><description>&lt;p&gt;Description&lt;/p&gt;
In this talk we'll discuss how to use pyenv to manage multiple versions of python to allow you to develop and test your code in Python 2, Python 3, pypy, etc.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Douglas Mendizábal</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3181/snake-charming-with-pyenv</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3181_Snake_charming_with_pyenv.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3181_Snake_charming_with_pyenv.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/hx9lElBTXng" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/hx9lElBTXng/hqdefault.jpg"></media:thumbnail></item><item><title>Unlocking Data Trapped in Audio and Video Files</title><link>http://www.pyvideo.org/video/3165/unlocking-data-trapped-in-audio-and-video-files</link><description>&lt;p&gt;Description&lt;/p&gt;
As more and more apps record audio and video files we need to start thinking about what to do with those files.  Playing them back isn't enough.  Media files are full of data that developers can start exploiting thanks to an emergent category of signal and natural language processing APIs.

There are only 3 options for processing the words embedded in these files:

1. Transcribe them yourself, manually.
2. Find a transcript made by someone else.
3. Use a library that extracts the words for you.   

As the developer of a python library that automates the extraction and processing of words in media files, I'll demonstrate how easy it is to make audio and video libraries fully searchable, create a word cloud of keywords from a recorded phone call, and extract topics from news broadcast.  

I'll show coding examples as well as products using this API.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Murphy</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3165/unlocking-data-trapped-in-audio-and-video-files</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3165_Unlocking_Data_Trapped_in_Audio_and_Video_Files.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3165_Unlocking_Data_Trapped_in_Audio_and_Video_Files.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/KI0m0tFEAnY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/KI0m0tFEAnY/hqdefault.jpg"></media:thumbnail></item><item><title>When Scrum goes horribly wrong</title><link>http://www.pyvideo.org/video/3163/when-scrum-goes-horribly-wrong</link><description>&lt;p&gt;Description&lt;/p&gt;
The purpose of this talk is to provide an accounting of why Agile/Scrum projects fail. We will define failure, discuss reason(s) an Agile managed project ends in failure fail and offer solutions to the most common causes of failed projects. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bryan Haardt</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3163/when-scrum-goes-horribly-wrong</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3163_When_Scrum_goes_horribly_wrong.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3163_When_Scrum_goes_horribly_wrong.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/bYqHaZXDXuw" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/bYqHaZXDXuw/hqdefault.jpg"></media:thumbnail></item><item><title>3 hours to Docker fundamentals: Jumpstart your Docker knowledge</title><link>http://www.pyvideo.org/video/3154/3-hours-to-docker-fundamentals-jumpstart-your-do</link><description>&lt;p&gt;Description&lt;/p&gt;
Docker, the new trending containerization technique, is gaining interest from organizations of all sizes with its lightweight, portable, “build once, configure once and run anywhere” functionalities. Docker skills are expected to be in high-demand because of its ability to streamline workflow and reduce the need for hardware investment. 

This tutorial focuses on providing an in-depth understanding of Docker and how to containerize Python web applications. Docker provides a mechanism for low overhead virtualization and can be a key aspect of a DevOps architecture. Docker allows isolated environments to be created in a single machine without imposing a performance overhead. This leads to new possibilities for optimizing the developer flows and creating multi-tenant applications, saving time coding and improving quality. 

This tutorial will highlight a list of best practices, pitfalls, and dos and dont’s from real-world case studies.  We’ll walk through:

- Basic concepts and Docker terminology
- Docker Commands
- Must Know Docker Features
- Docker in the real world using examples of projects implemented at Flux7
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aater Suleman</dc:creator><pubDate>Fri, 03 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3154/3-hours-to-docker-fundamentals-jumpstart-your-do</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3154_3_hours_to_Docker_fundamentals_Jumpstart_your_Dock.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3154_3_hours_to_Docker_fundamentals_Jumpstart_your_Dock.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/ddhU3NMrhX4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/ddhU3NMrhX4/hqdefault.jpg"></media:thumbnail></item><item><title>Python 101++: Let's Get Down to Business</title><link>http://www.pyvideo.org/video/3153/python-101-lets-get-down-to-business</link><description>&lt;p&gt;Description&lt;/p&gt;
You've started the Codecademy and Coursera courses; you've thumbed through Zed Shaw's "Learn Python the Hard Way"; and now you're itching to see what Python can help you do.  This is the workshop for you!

Here's the breakdown: we're going to be taking you on a whirlwind tour of Python's capabilities.  By the end of the workshop, you should be able to easily follow any of the widely available Python courses on the internet, and have a grasp on some of the more complex aspects of the language.  

Please don't forget to bring your personal laptop!

Audience:
This course is aimed at those who already have some basic programming experience, either in Python or in another high level programming language (such as C/C++, Fortran, Java, Ruby, Perl, or Visual Basic).  If you're an absolute beginner -- new to Python, and new to programming in general -- make sure to check out the "Python 101" workshop!

chapters:
(00:00)
(0:01:33)
(0:01:39)
(0:09:39)
(0:10:24)
(0:14:34)
(0:18:11)
(0:23:45)
(0:24:06)
(0:25:37)
(0:37:31)
(1:28:25)
(1:28:27) </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paige Bailey</dc:creator><pubDate>Fri, 03 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3153/python-101-lets-get-down-to-business</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3153_Python_101_Lets_Get_Down_to_Business.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3153_Python_101_Lets_Get_Down_to_Business.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/zmWsgVk6VGw" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/zmWsgVk6VGw/hqdefault.jpg"></media:thumbnail></item><item><title>Python 101: Python for Absolute Beginners</title><link>http://www.pyvideo.org/video/3149/python-101-python-for-absolute-beginners</link><description>&lt;p&gt;Description&lt;/p&gt;
If you're absolutely new to Python, and to programming in general, this is the place to start!  

Here's the breakdown: by the end of this workshop, you'll have Python downloaded onto your personal machine; have a general idea of what Python can help you do; be pointed in the direction of some excellent practice materials; and have a basic understanding of the syntax of the language. 

Please don't forget to bring your laptop!

Audience:
"Python 101" is geared toward individuals who are new to programming. If you've had some programming experience (shell scripting, MATLAB, Ruby, etc.), then you'll probably want to check out the more intermediate workshop, "Python 101++".</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paige Bailey</dc:creator><pubDate>Fri, 03 Oct 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3149/python-101-python-for-absolute-beginners</guid><enclosure url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3149_Python_101_Python_for_Absolute_Beginners.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://64966d3674e0a64d8f4a-47c94b14ef8e1f83d5390cdb0629c6ed.r53.cf2.rackcdn.com/pytexas-2014/3149_Python_101_Python_for_Absolute_Beginners.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/2LOHY-HsYHc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/2LOHY-HsYHc/hqdefault.jpg"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of PyCon AU 2012</title><link>http://www.pyvideo.org/category/30/pycon-au-2012/rss</link><description></description><atom:link href="http://www.pyvideo.org/category/30/pycon-au-2012/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Thu, 23 Aug 2012 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>Lightning Talks Sunday and Conference Close</title><link>http://www.pyvideo.org/video/1619/lightning-talks-sunday-and-conference-close-0</link><description></description><pubDate>Thu, 23 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1619/lightning-talks-sunday-and-conference-close-0</guid><enclosure url="http://www.youtube.com/watch?v=CNobTNnJeFE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/CNobTNnJeFE/hqdefault.jpg"></media:thumbnail></item><item><title>Big data with python</title><link>http://www.pyvideo.org/video/1621/big-data-with-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Dealing with big data isn't a particularly new problem. There are all sorts of
new solutions, each with their own niche, their own hype. It's important to
remember that python is not "too slow" for big data, and that with projects
such as


&lt;p&gt;Description&lt;/p&gt;
Dealing with big data isn't a particularly new problem. There are all sorts of
new solutions, each with their own niche, their own hype. It's important to
remember that python is not "too slow" for big data, and that with projects
such as scipy, numpy, cython and rpy, python is becoming a better tool then
ever for data processing. In this talk we'll be explaining some of the theory
behind big data problems, where python fits in and some of the more
interesting things you can do.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Sharp</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1621/big-data-with-python</guid><enclosure url="http://www.youtube.com/watch?v=sN3pRNh-_6Y" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/sN3pRNh-_6Y/hqdefault.jpg"></media:thumbnail></item><item><title>Building a Cloud Service with Python</title><link>http://www.pyvideo.org/video/1639/building-a-cloud-service-with-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Presentation will go in-depth on the architecture of a web application service
built on Amazon Web Services (AWS) cloud infrastructure, including: -
developing a responsive, high-performance web application in Django -
implementing


&lt;p&gt;Description&lt;/p&gt;
Presentation will go in-depth on the architecture of a web application service
built on Amazon Web Services (AWS) cloud infrastructure, including:

  * developing a responsive, high-performance web application in Django
  * implementing a REST API for automating the web application
  * using Python's networking capabilities to monitor and aggregate log files from multiple remote servers in real time
  * automating deployment in Python using fabric
  * interacting with AWS using the boto library

From a business point of view I will also talk about the opportunities that
modern cloud computing platforms present to developers and how to best exploit
them.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Barham</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1639/building-a-cloud-service-with-python</guid><enclosure url="http://www.youtube.com/watch?v=R4feORh5MrU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/R4feORh5MrU/hqdefault.jpg"></media:thumbnail></item><item><title>Django Testing Tips</title><link>http://www.pyvideo.org/video/1626/django-testing-tips</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Django's test framework is excellent for ensuring that your site/app is
robust, but is often neglected because of the time it can take to build and
maintain a comprehensive test suite. Here we will discuss a number of tips and
tricks to reduce the overheads involved.


&lt;p&gt;Description&lt;/p&gt;
Django's test framework is excellent for ensuring that your site/app is
robust, but is often neglected because of the time it can take to build and
maintain a comprehensive test suite. Here we will discuss a number of tips and
tricks to reduce the overheads involved and have you writing reusable tests
almost as fast as you can test in the browser itself.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Meers</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1626/django-testing-tips</guid><enclosure url="http://www.youtube.com/watch?v=ScjhonARTvU" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/ScjhonARTvU/hqdefault.jpg"></media:thumbnail></item><item><title>Funcargs and other fun with pytest</title><link>http://www.pyvideo.org/video/1632/funcargs-and-other-fun-with-pytest</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Pytest is a mature and comprehensive testing suite for Python projects, but it
can be a little intimidating for newcomers. Where do these mysterious funcargs
come from, how do parametrised tests work, and where are my xUnit-style setUp
and tearDown methods?


&lt;p&gt;Description&lt;/p&gt;
Pytest is a mature and comprehensive testing suite for Python projects, but it
can be a little intimidating for newcomers. Where do these mysterious funcargs
come from, how do parametrised tests work, and where are my xUnit-style setUp
and tearDown methods?

Pytest lives by "convention over configuration" - which is great once you know
what the conventions are. This talk will look at real examples of pytest in
use, emphasising the features that differentiate it from nose.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brianna Laugher</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1632/funcargs-and-other-fun-with-pytest</guid><enclosure url="http://www.youtube.com/watch?v=DTNejE9EraI" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/DTNejE9EraI/hqdefault.jpg"></media:thumbnail></item><item><title>Keynote: Python for Humans</title><link>http://www.pyvideo.org/video/1634/keynote-python-for-humans</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python's ecosystem is held up to a high standard, but it falls short in a few
key areas. A handful of crucial APIs are an absolute pain to work with. We'll
go over where these APIs went wrong and learn about strong and elegant API
desig


&lt;p&gt;Description&lt;/p&gt;
Python’s ecosystem is held up to a high standard, but it falls short in a few
key areas. A handful of crucial APIs are an absolute pain to work with. We’ll
go over where these APIs went wrong and learn about strong and elegant API
design. The high barriers to entry in Python will be discussed. Potential
solutions will be proposed.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kenneth Reitz</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1634/keynote-python-for-humans</guid><enclosure url="http://www.youtube.com/watch?v=Y97D8j6CAog" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/Y97D8j6CAog/hqdefault.jpg"></media:thumbnail></item><item><title>Lightning Talks Saturday</title><link>http://www.pyvideo.org/video/1635/lightning-talks-saturday-0</link><description></description><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1635/lightning-talks-saturday-0</guid><enclosure url="http://www.youtube.com/watch?v=GpW7l3ng6T4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/GpW7l3ng6T4/hqdefault.jpg"></media:thumbnail></item><item><title>Making Your Application Behave</title><link>http://www.pyvideo.org/video/1624/making-your-application-behave</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Behave is a tool for behaviour-driven development inspired by the Cucumber
tool for Ruby. It allows developers and stakeholders to agree on how a
particular piece of software should behave using an English-like Given-When-
Then syntax and f


&lt;p&gt;Description&lt;/p&gt;
Behave is a tool for behaviour-driven development inspired by the Cucumber
tool for Ruby. It allows developers and stakeholders to agree on how a
particular piece of software should behave using an English-like Given-When-
Then syntax and for that behaviour for then to be easily tested in whatever
manner is appropriate.

This presentation will provide an introduction to behaviour-driven
development, behaviour testing in general and the behave tool along with its
advantages over alternatives such as lettuce and freshen.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benno Rice</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1624/making-your-application-behave</guid><enclosure url="http://www.youtube.com/watch?v=u8BOKuNkmhg" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/u8BOKuNkmhg/hqdefault.jpg"></media:thumbnail></item><item><title>Neatly Twisted</title><link>http://www.pyvideo.org/video/1620/neatly-twisted</link><description>&lt;p&gt;Abstract&lt;/p&gt;
In many Python circles, Twisted is the recommended framework for all
networking and multitasking applications. Twisted provides a powerful,
extensible event-driven framework with built-in support for many network
protocols.


&lt;p&gt;Description&lt;/p&gt;
In many Python circles, Twisted is the recommended framework for all
networking and multitasking applications. Twisted provides a powerful,
extensible event-driven framework with built-in support for many network
protocols. But without due care, Twisted’s event-driven features can result in
code that’s a nightmare to read and maintain. In this presentation, I will
review the basics of Twisted, and show some of the features which make Twisted
such a popular framework. I’ll share my experiences debugging and maintaining
mission-critical Twisted applications, discuss some of the pitfalls to avoid
when coding with Twisted, and present tips and tricks for debugging Twisted
code and writing Twisted code that’s a pleasure to read and maintain.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Bartlett</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1620/neatly-twisted</guid><enclosure url="http://www.youtube.com/watch?v=7Au2PDYD6Bk" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/7Au2PDYD6Bk/hqdefault.jpg"></media:thumbnail></item><item><title>No! Bad Pony!</title><link>http://www.pyvideo.org/video/1628/no-bad-pony</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The Django community is not short of ideas that could be added to the core
repository. Some of these ideas are great, and are just waiting for the right
implementation or the attention of a core developer. Other ideas are just not
going to happen. However, it's not always obvious why an idea will be
rejected. This talk will attempt explain the reasoning behind a couple of
specific decisions. More broadly, this talk will aims to provide general
guidance on the decision making process of the Django core. It will also
address how you can get started contributing to Django.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Russell Keith-Magee</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1628/no-bad-pony</guid><enclosure url="http://www.youtube.com/watch?v=xFh40R5KcV8" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/xFh40R5KcV8/hqdefault.jpg"></media:thumbnail></item><item><title>Node Schmode: Pythonic Real-Time Web</title><link>http://www.pyvideo.org/video/1623/node-schmode-pythonic-real-time-web</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Using gevent, pyramid and socket-io for a micro framework approach to creating
real-time web apps without the braces. Why is gevent so cool and how it can
let you write fast scalable apps with asynchronous IO without twisting your
mind.


&lt;p&gt;Description&lt;/p&gt;
Using gevent, pyramid and socket-io for a micro framework approach to creating
real-time web apps without the braces. Why is gevent so cool and how it can
let you write fast scalable apps with asynchronous IO without twisting your
mind.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dylan Jay</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1623/node-schmode-pythonic-real-time-web</guid><enclosure url="http://www.youtube.com/watch?v=Y6ky9fgUCiE" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/Y6ky9fgUCiE/hqdefault.jpg"></media:thumbnail></item><item><title>Path Dependent Development: Why on Earth are you using SQL Alchemy as a JSON validator?</title><link>http://www.pyvideo.org/video/1625/path-dependent-development-why-on-earth-are-you</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The PulpDist project uses SQL Alchemy as part of a custom JSON validator. This
could be seen as an unusual choice, so it's worth exploring the way this
approach came to be adopted. Practicing iterative development means coping
with the tension between "doing the simplest thing that could possibly work"
to meet immediate project requirements and avoiding "reinventing the wheel".


&lt;p&gt;Description&lt;/p&gt;
The PulpDist project uses SQL Alchemy as part of a custom JSON validator. This
could be seen as an unusual choice, so it's worth exploring the way this
approach came to be adopted.

Practicing iterative development means coping with the inevitable tension
between "doing the simplest thing that could possibly work" to meet immediate
project requirements and avoiding "reinventing the wheel" in order to take
full advantage of existing software components.

This means that iterative software designs are inevitably path dependent:
decisions made in early iterations can shape later aspects of a project in
unexpected ways. These early influences may even predate the project itself,
instead being a consequence of wider organisational policies and the personal
preferences and abilities of key developers.

Understanding some of these factors can help with understanding why:

  * "good enough" is usually a better target than "perfect"
  * "Not Invented Here" syndrome is not always the villain it is frequently made out to be
  * the need to extensively rewrite existing components is not always a sign of past failure

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Coghlan</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1625/path-dependent-development-why-on-earth-are-you</guid><enclosure url="http://www.youtube.com/watch?v=PYw2K0_ZZ0w" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/PYw2K0_ZZ0w/hqdefault.jpg"></media:thumbnail></item><item><title>PyPy - is it ready for production?</title><link>http://www.pyvideo.org/video/1636/pypy-is-it-ready-for-production</link><description>&lt;p&gt;Abstract&lt;/p&gt;
I have followed the development of PyPy since 2004 and played with various
releases to see what the PyPy team had achieved. It wasn't until the release
of PyPy 1.18 that I actually ran some existing production python code under
it. The perc


&lt;p&gt;Description&lt;/p&gt;
I have followed the development of PyPy since 2004 and played with various
releases to see what the PyPy team had achieved. It wasn't until the release
of PyPy 1.18 that I actually ran some existing production python code under
it. The perceived performance improvement of this exercise inspired me to
implement a more scientific method for comparing the runtime performance of
CPython and PyPy running various Python production code sets that we use in
the company I work for. This presentation will discuss the results of this
comparison and the positives and negatives with utilising PyPy in production.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Rees</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1636/pypy-is-it-ready-for-production</guid><enclosure url="http://www.youtube.com/watch?v=KN9eHa2cXNQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/KN9eHa2cXNQ/hqdefault.jpg"></media:thumbnail></item><item><title>Python Lifesavers</title><link>http://www.pyvideo.org/video/1637/python-lifesavers</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Every now and then you'll find yourself with one of life's tricky situations.
OK, so maybe not a literally life-threatening one. But when you remember
Python is a batteries-included, script-like programming language found pretty
much e


&lt;p&gt;Description&lt;/p&gt;
Every now and then you'll find yourself with one of life's tricky situations.
OK, so maybe not a literally life-threatening one. But when you remember
Python is a batteries-included, script-like programming language found pretty
much everywhere, it really will feel like a lifesaver. A one-line web server?
A super-simple GUI test automation suite? Come and hear about all those handy
tips and tricks that will get you out of a bind. One day, somewhere you'll be
glad you did!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Duncan Macneil</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1637/python-lifesavers</guid><enclosure url="http://www.youtube.com/watch?v=ifF1gzAHX44" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/ifF1gzAHX44/hqdefault.jpg"></media:thumbnail></item><item><title>Python Powered Computational Geometry</title><link>http://www.pyvideo.org/video/1627/python-powered-computational-geometry</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Computational Geometry is the study of geometry with the support of
appropriate algorithms, and influences a broad range of fields of science,
engineering and mathematics including: Computation Fluid Dynamics (CFD),
Finite Element Model


&lt;p&gt;Description&lt;/p&gt;
Computational Geometry is the study of geometry with the support of
appropriate algorithms, and influences a broad range of fields of science,
engineering and mathematics including: Computation Fluid Dynamics (CFD),
Finite Element Modelling (FEM), Computer Aided Design / Modelling (CAD/CAM),
Robotics, Computer Graphics and Collision Detection.

While it is possible to quickly implement naive versions of computational
geometry algorithms in any language, such algorithms can be expensive and time
consuming to write, debug and maintain. The advent of a number of tools,
including new bindings for the Computational Geometry Algorithms Library
(CGAL) and the ipython notebook make Python an ideal tool for experimentation
with fast and numerically robust algorithms.

The presentation will include demonstrations of a number of common two- and
three-dimensional computational geometry algorithms:

  * Triangulations (and Voronoi diagrams)
  * Mesh refinement
  * Intersection testing
  * Alpha shapes
  * Convex hulls
  * Constructive Solid Geometry
  * Minkowski Sums

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Walker</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1627/python-powered-computational-geometry</guid><enclosure url="http://www.youtube.com/watch?v=zWhMc3am7ao" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/zWhMc3am7ao/hqdefault.jpg"></media:thumbnail></item><item><title>RPy: Powerful Analytics within python</title><link>http://www.pyvideo.org/video/1622/rpy-powerful-analytics-within-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
R is an incredibly powerful statistical programming language. It is the choice
for powerful set and forgets analytics. However it is a specialist language
without strong functionality in other areas. In areas where significant
preproc


&lt;p&gt;Description&lt;/p&gt;
R is an incredibly powerful statistical programming language. It is the choice
for powerful set and forgets analytics. However it is a specialist language
without strong functionality in other areas. In areas where significant
preprocessing of data, or where the statistics produced are part of a larger
system such as looking for patterns in the load behaviour of a web server, a
match with a strong general language is an obvious solution. Because of its
wide use and potential integration with R, python is that language.

This talk will be targeted at python programmers who wish to integrate
statistical and data analysis into their work, providing options for real time
data monitoring and analysis. This talk is accessible for anyone with a basic
understanding of python.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rhydwyn Mcguire</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1622/rpy-powerful-analytics-within-python</guid><enclosure url="http://www.youtube.com/watch?v=puoIKCfgX1w" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/puoIKCfgX1w/hqdefault.jpg"></media:thumbnail></item><item><title>Techniques for improving Python performance</title><link>http://www.pyvideo.org/video/1630/techniques-for-improving-python-performance</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Andrew Rowe will detail and demonstrate a number of proven techniques for
improving the performance of large Python programs.


&lt;p&gt;Description&lt;/p&gt;
  * Using multiprocessing.
  * Using custom extensions.
  * Refactoring code.
  * using comprehensions.
  * Dictionaries v. Lists.
  * Range v. xrange.
  * Profiling.
  * Detecting choke points.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Rowe</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1630/techniques-for-improving-python-performance</guid><enclosure url="http://www.youtube.com/watch?v=pBF3dKrVhxQ" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/pBF3dKrVhxQ/hqdefault.jpg"></media:thumbnail></item><item><title>Towards continuous deployment with Django</title><link>http://www.pyvideo.org/video/1631/towards-continuous-deployment-with-django</link><description>&lt;p&gt;Abstract&lt;/p&gt;
It's no secret that python is fantastic when it comes to rapid prototyping and
development. This talk covers continuous deployment.


&lt;p&gt;Description&lt;/p&gt;
It's no secret that python is fantastic when it comes to rapid prototyping and
development. When it comes to deploying a web application, the road to glory
isn't as well paved and navigating the array of techniques and tools can be
daunting.

This talk will address the advantages of continuous deployment, the success
factors involved and the tools available, mainly focusing on experiences with
Django web development.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roger Barnes</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1631/towards-continuous-deployment-with-django</guid><enclosure url="http://www.youtube.com/watch?v=_lgWVkYYtf4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/_lgWVkYYtf4/hqdefault.jpg"></media:thumbnail></item><item><title>Triage: real-world error logging for web applications</title><link>http://www.pyvideo.org/video/1629/triage-real-world-error-logging-for-web-applicat</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Modern web applications can quickly develop many moving parts. As they grow in
traffic, infrastructure, services and features, keeping track of errors and
communicating about them becomes more challenging.


&lt;p&gt;Description&lt;/p&gt;
In this talk we present Triage, a homegrown tool at 99designs for aggregating
and managing errors in a live production system. Although written in Python,
Triage is designed to ingest errors in a language agnostic way. We describe
our path from simpler logging techniques which we outgrew, the new workflows
around error management which it allows, and some challenges we faced along
the way.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lars Yencken,Luke Cawood</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1629/triage-real-world-error-logging-for-web-applicat</guid><enclosure url="http://www.youtube.com/watch?v=LVeecddAd8g" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/LVeecddAd8g/hqdefault.jpg"></media:thumbnail></item><item><title>Virtual robotic car racing with Python and TORCS</title><link>http://www.pyvideo.org/video/1638/virtual-robotic-car-racing-with-python-and-torcs</link><description>&lt;p&gt;Abstract&lt;/p&gt;
A highly visual (racing videos) presentation showing the TORCS racing
simulator, a Python implementation of a virtual robot car, and a covering of
the basic AI algorithms required to make the wheels go round. AI, math, Python
an


&lt;p&gt;Description&lt;/p&gt;
A highly visual (racing videos) presentation showing the TORCS racing
simulator, a Python implementation of a virtual robot car, and a covering of
the basic AI algorithms required to make the wheels go round. AI, math, Python
and eye candy. What could possibly go wrong... what indeed.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tennessee Leeuwenburg</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1638/virtual-robotic-car-racing-with-python-and-torcs</guid><enclosure url="http://www.youtube.com/watch?v=BGOtqXA_y1E" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/BGOtqXA_y1E/hqdefault.jpg"></media:thumbnail></item><item><title>Web Server Bottlenecks And Performance Tuning</title><link>http://www.pyvideo.org/video/1633/web-server-bottlenecks-and-performance-tuning-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
A benchmark of a hello world application is often what developers use to make
the all important decision of what web hosting infrastructure they use. Worse
is that in many cases this is the only sort of performance testing or monitor


&lt;p&gt;Description&lt;/p&gt;
A benchmark of a hello world application is often what developers use to make
the all important decision of what web hosting infrastructure they use. Worse
is that in many cases this is the only sort of performance testing or
monitoring they will ever do. When it comes to their production applications
they are usually flying blind and have no idea of how it is performing and
what they need to do to tune their web application stack.

This talk will provide an overview as to where in your overall request
handling pipeline the main overheads are going to arise. It will then zoom in
and discuss different limiting factors or bottlenecks which can arise within
your WSGI server stack and system that can directly affect the performance of
your Python web application.

Such factors that will be discussed will include:

  * Use of threads vs processes.
  * Number of processors available.
  * Python global interpreter lock (GIL)
  * Amount of memory available.
  * Slow HTTP browsers/clients.
  * Browser keep alive connections.
  * Need to handle static assets.

From this will be provided some general guidelines of what is a good
configuration/architecture to use for different types of Python web
applications.

The importance of continuous production monitoring will also be covered,
ensuring that you know when the performance of your system is dropping off due
to changing traffic patterns as well as code changes you have made in your
actual web application.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1633/web-server-bottlenecks-and-performance-tuning-0</guid><enclosure url="http://www.youtube.com/watch?v=eOkxLCCbU9w" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/eOkxLCCbU9w/hqdefault.jpg"></media:thumbnail></item><item><title>Debugging Live Python Web Applications</title><link>http://www.pyvideo.org/video/1643/debugging-live-python-web-applications-0</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Monitoring tools will record the result of what happened to your web
application or system when a problem arises, but for some classes of problem
are of limited help in working out what happened, except through inference or
by way of


&lt;p&gt;Description&lt;/p&gt;
Monitoring tools will record the result of what happened to your web
application or system when a problem arises, but for some classes of problem
are of limited help in working out what happened, except through inference or
by way of anecdotal evidence.

This talk will describe the limitations on what monitoring tools can help you
with. It will then move onto look at a range of debugging tools and techniques
which can be applied to web applications, but also separate them into what can
and cannot be used on live production web applications.

Topics which will be discussed will include:

  * Browser viewable error pages.
  * Browser based debuggers.
  * Python interactive debuggers.
  * Post-mortem exception analysis.
  * Methods for dumping Python stack traces
  * Methods for dumping C stack traces.
  * Methods for analysing thread utilisation.
  * Interactive process introspection tools.
  * Error reporting and logging services.
  * Performance monitoring services.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1643/debugging-live-python-web-applications-0</guid><enclosure url="http://www.youtube.com/watch?v=FG2ai9XFzSo" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/FG2ai9XFzSo/hqdefault.jpg"></media:thumbnail></item><item><title>Human as a Second Language: Succeeding with the Natural Language Toolkit</title><link>http://www.pyvideo.org/video/1642/human-as-a-second-language-succeeding-with-the-n</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The Natural Language Toolkit (NLTK) suite offers powerful tools for natural
language processing and analysis. Like many other code libraries, it enables
programmers to achieve results when working with data they may not be an
expert


&lt;p&gt;Description&lt;/p&gt;
The Natural Language Toolkit (NLTK) suite offers powerful tools for natural
language processing and analysis. Like many other code libraries, it enables
programmers to achieve results when working with data they may not be an
expert in the handling of - in this case, human language. The NLTK is
particularly valuable as human language skills are in general something
programmers can get along without, and therefore they are likely to be ill-
equipped with the tools to most effectively work with language data. However,
while NLTK provides programmers with a way to work with all the relevant parts
of language without needing to rely on their own grammar skills, there are
many concepts in the field of natural language processing that require basic
comprehension of natural language operation, which may make knowing where to
start working with the NLTK difficult for the average programmer.

This presentation will demonstrate some of the NLTK's powerful and impressive
features, while covering the concepts that will enable any programmer to work
cool tricks on natural language. The application of the NLTK to a very basic
artificial intelligence will be shown.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elyse Maria Glina</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1642/human-as-a-second-language-succeeding-with-the-n</guid><enclosure url="http://www.youtube.com/watch?v=GynvZHDdUgA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/GynvZHDdUgA/hqdefault.jpg"></media:thumbnail></item><item><title>Keynote: What to build. How to build it.  Python can help!</title><link>http://www.pyvideo.org/video/1645/keynote-what-to-build-how-to-build-it-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
There's been a lot of buzz about "Lean Startups," "Customer Development,"
"Business Model Generation" and related topics lately. And there is a real
transformation in the way we design and build products at work behind all that
buzz.


&lt;p&gt;Description&lt;/p&gt;
There’s been a lot of buzz about “Lean Startups,” “Customer Development,”
“Business Model Generation” and related topics lately. And there is a real
transformation in the way we design and build products at work behind all that
buzz.

But the fundamental principle behind all of them is applying scientific and
experimental methodologies to product design decision making. The tools of
Lean Startups are:

  * Data collection and analysis
  * Writing hypothesis and models
  * Creating experiments to test those models
  * Learning from those experiments, and refining/redesigning the model

Fortunately Python is a great tool for those looking to apply data science to
product design.

Python can help with everything from statistical analysis, to rapid
development of viable products, to the creation of complex models that can be
used to tweak the levers of growth, and it’s easy to combine these with off
the shelf tools that help you analyze traffic patterns and figure out what
product changes actually make a difference.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Ramm</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1645/keynote-what-to-build-how-to-build-it-python</guid><enclosure url="http://www.youtube.com/watch?v=tzXWTrpCyCM" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/tzXWTrpCyCM/hqdefault.jpg"></media:thumbnail></item><item><title>Python Dark Corners Revisited</title><link>http://www.pyvideo.org/video/1641/python-dark-corners-revisited</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python can be deceptive - it looks so simple.


&lt;p&gt;Description&lt;/p&gt;
Python can be deceptive - it looks so simple. Surely it will take only 5 to 10
minutes to learn.

Self taught programmers often miss important fundamentals in Python -
including:

  * Everything is an Object. Yes everything. Integers, 'real' objects, functions, classes. Ooooh template metaprogramming.
  * It's only a name. Whoops. True, False, no longer None.
  * 'Objects can change their type'. Not.
  * How the heck to a actually make a copy
  * Which parts of tuples are constant?
  * Deep and Shallow - weren't not talking philosophy here
  * Accidental name creation - there's no easy solution
  * Argument passing, Mutable arguments, default arguments, Mutable default arguments
  * Questions

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Lovett</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1641/python-dark-corners-revisited</guid><enclosure url="http://www.youtube.com/watch?v=CD_Eh8GLCPA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/CD_Eh8GLCPA/hqdefault.jpg"></media:thumbnail></item><item><title>Python Web Templating Battle</title><link>http://www.pyvideo.org/video/1648/python-web-templating-battle</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Head to head - popular templating engines using in the Python world will be
compared and contrasted. Increasingly, frameworks allow many different choices
in templating engines. In this talk I’ll discuss the different approaches,
demo and pros and cons to help you decide if there is a better templating
engine for you.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ivan Teoh</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1648/python-web-templating-battle</guid><enclosure url="http://www.youtube.com/watch?v=eZ6mC5-Dz4w" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/eZ6mC5-Dz4w/hqdefault.jpg"></media:thumbnail></item><item><title>The Lazy Dev's Guide to Testing Your Web API</title><link>http://www.pyvideo.org/video/1646/the-lazy-devs-guide-to-testing-your-web-api</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Do you enjoy writing test cases for your web application? If so then this may
not be the talk for you. I'm going to show you how to make a single test suite
perform triple testing duty, so you can get on with writing the fun stuff.


&lt;p&gt;Description&lt;/p&gt;
Do you enjoy writing test cases for your web application? If so then this may
not be the talk for you. I'm going to show you how to make a single test suite
perform triple testing duty, so you can get on with writing the fun stuff.

First, I'll show you how to use WebTest to construct a simple functional
testsuite for your application. By running in-process against a WSGI callable,
the tests can be fast and light enough to form part of your regularly-executed
suite.

Second, we'll use WSGIProxy to turn this into a deployment/acceptance test
script that you can point at a real live server to verify its behaviour. Run
this after every deployment to make sure you haven't broken something in the
wild.

Finally, we'll connect the suite to FunkLoad and pummel the server with a
distributed barrage of tests, to see how it copes under pressure.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan Kelly</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1646/the-lazy-devs-guide-to-testing-your-web-api</guid><enclosure url="http://www.youtube.com/watch?v=8fB2qY8s2i4" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/8fB2qY8s2i4/hqdefault.jpg"></media:thumbnail></item><item><title>The web beyond usernames and passwords</title><link>http://www.pyvideo.org/video/1644/the-web-beyond-usernames-and-passwords</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Persona is a new cross-browser login and identity system for the web that is
pragmatic, federated, and serves the user.


&lt;p&gt;Description&lt;/p&gt;
Persona is a new cross-browser login and identity system for the web that is
pragmatic, federated, and serves the user.

Unlike other popular solutions, it puts a strong emphasis on privacy
protection and makes your browser the trusted intermediary. Developed by
Mozilla, it is based on the simple idea of users demonstrating ownership of
their email address (with a generous serving of crypto magic under the hood).

This talk will give a high-level overview of the system and then show how
simple it is to add support for it in a Python webapp. If you want to make it
easy for users to log into your site but don't want the risks and hassle of
storing passwords, or if you cannot quite get your head around complicated
authentication systems, then this talk is for you!

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francois Marier</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1644/the-web-beyond-usernames-and-passwords</guid><enclosure url="http://www.youtube.com/watch?v=T6Iu7KgiC0A" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/T6Iu7KgiC0A/hqdefault.jpg"></media:thumbnail></item><item><title>Visualising architecture</title><link>http://www.pyvideo.org/video/1647/visualising-architecture</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Architecture. It's an oxymoron all by itself, and using Python is no silver
bullet to the perennial problem of code rot and design complexity. How does
complexity bite us in practise? What tools exist to simplify and explain arc


&lt;p&gt;Description&lt;/p&gt;
Architecture. It's an oxymoron all by itself, and using Python is no silver
bullet to the perennial problem of code rot and design complexity. How does
complexity bite us in practise? What tools exist to simplify and explain
architecture? Is anybody doing this right? This talk will cover some tools
that exist for visualising Python codebases, examining architectures and how
to deal with things in practise.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tennessee Leeuwenburg</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1647/visualising-architecture</guid><enclosure url="http://www.youtube.com/watch?v=vOyF_LDeXTc" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/vOyF_LDeXTc/hqdefault.jpg"></media:thumbnail></item><item><title>What's New in Python for Science and Engineering</title><link>http://www.pyvideo.org/video/1640/whats-new-in-python-for-science-and-engineering</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This is a tutorial about using Python for scientific and engineering purposes,
focusing on the latest and best tools available in 2012. It will walk you
through exploring a variety of interesting domains and problems using the
latest


&lt;p&gt;Description&lt;/p&gt;
This is a presentation about the latest and most exciting tools in Python for
scientific and engineering applications in 2012. It will walk you through
what's now possible with tools like the IPython Notebook, the Pandas toolkit
for data analysis, and IPython integration with SymPy, R, and Cython. It will
then give you an update on the status of Python 3 ports of major packages. It
will show why Python is an outstanding tool for science and engineering work,
and getting better.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Edward Schofield</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1640/whats-new-in-python-for-science-and-engineering</guid><enclosure url="http://www.youtube.com/watch?v=jCpLiT0QRRA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/jCpLiT0QRRA/hqdefault.jpg"></media:thumbnail></item></channel></rss>
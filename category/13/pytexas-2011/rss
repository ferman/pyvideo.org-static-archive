<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of PyTexas 2011</title><link>http://www.pyvideo.org/category/13/pytexas-2011/rss</link><description></description><atom:link href="http://www.pyvideo.org/category/13/pytexas-2011/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 11 Mar 2016 12:10:20 -0000</lastBuildDate><ttl>500</ttl><item><title>About Python Namespaces (and Code Objects)</title><link>http://www.pyvideo.org/video/549/about-python-namespaces--and-code-objects</link><description>&lt;p&gt;Abstract&lt;/p&gt;
An explanation of some of the underlying concepts of Python, come learn about
names and values placed in namespaces, modified by code objects and collected
into modules.


&lt;p&gt;Description&lt;/p&gt;
We'll explore namespaces using the Python interactive prompt, with graphical
display of object trees using Graphviz. Also explained will be the namespace
concepts of closures and early binding; how to define new objects without
subclassing via use of default/curried arguments and closures.

</description><guid>http://www.pyvideo.org/video/549/about-python-namespaces--and-code-objects</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/549_about-python-namespaces-and-code-objects.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-AboutPythonNamespacesAndCodeObjects984-914.jpg"></media:thumbnail></item><item><title>Asynchronous Web Development with Tornado</title><link>http://www.pyvideo.org/video/561/asynchronous-web-development-with-tornado</link><description>&lt;p&gt;Abstract&lt;/p&gt;
An introduction to non-blocking web development with Tornado, an open-source
server and simple framework from Facebook/FriendFeed.


&lt;p&gt;Description&lt;/p&gt;
Web frameworks like Django, Flask, etc. are great for most traditional web
sites. However, there is a growing need to produce web applications that are
responsive to external "events", whether a response from Twitter's API or a
new message in an online chat room. Newer, non-blocking frameworks like
Tornado seek to address this in a scalable manner.

This talk will briefly introduce non-blocking principles and patterns, and
move quickly into an overview of the library, as well as use cases and anti-
use cases. A portion of the time will also be spent pointing out community
libraries that are building on Tornado's foundation.

Outline:

  1. Introduction
    1. Why another framework?
    2. Intro to Asynchronous Design
  2. Overview of a Tornado project
    1. a. Application
    2. b. Basic (blocking) Request Handlers
    3. c. Templates
    4. d. Asynchronous Handlers
    5. e. To block or not to block
  3. Batteries included
    1. Auth module
    2. Options module
    3. Database
    4. UIModules
    5. Security
  4. Community
    1. a. Tornad.io
    2. b. No-SQL libraries
    3. c. Twisted integration
    4. d. Torn Admin
  5. Q&amp;A;

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Marshall</dc:creator><guid>http://www.pyvideo.org/video/561/asynchronous-web-development-with-tornado</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/561_asynchronous-web-development-with-tornado.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-AsynchronousWebDevelopmentWithTornado459-712.jpg"></media:thumbnail></item><item><title>Cassandra for Python Developers</title><link>http://www.pyvideo.org/video/556/cassandra-for-python-developers</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Apache Cassandra is an open source, distributed (NoSQL) database. This will
give a high level introduction to Cassandra and its data model; it will detail
the features of pycassa, the Python client library for Cassandra, and how to
interact with Cassandra through it.


&lt;p&gt;Description&lt;/p&gt;
Being non-relational, Cassandra's data model is fundamentally different from
that of a relational database. In addition, it uses an RPC based API rather
than a query language. On top of that, Cassandra is a distributed database, so
the client must be aware of and interact with multiple nodes in the cluster.
All of these attributes of Cassandra make the client libraries a different
experience. Fortunately, the Python client library is the easiest way to use
Cassandra. This talk will start with a high level overview of the clustering
model of Cassandra then its data model. A large portion of the talk will cover
the pycassa methods that interact with the data model of Cassandra, i.e.
inserting, fetching, and removing data. A small amount of time will be
dedicated to describing connection pooling in pycassa -- how it handles node
failures, distributes requests, etc. The final 10 minutes will be devoted to
Q&amp;A.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tyler Hobbs</dc:creator><guid>http://www.pyvideo.org/video/556/cassandra-for-python-developers</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/556_cassandra-for-python-developers.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-CassandraForPythonDevelopers227-199.jpg"></media:thumbnail></item><item><title>Custom Decorators for Authentication and Authorization</title><link>http://www.pyvideo.org/video/555/custom-decorators-for-authentication-and-authoriz</link><description>&lt;p&gt;Abstract&lt;/p&gt;
An introduction to writing decorators, with an example of how they can be used
to handle common authentication and authorization actions for a set of web
services.


&lt;p&gt;Description&lt;/p&gt;
To provide access to enterprise directory data and services to developers at
Texas A&amp;M; University, we have implemented a set of RESTful web services,
using Django as our framework. Because these services include access to
protected data, all web service clients must authenticate and be authorized to
access a particular service. In order to implement the logic for making
authentication and authorization decisions in one place, and cleanly apply it
to any view, we wrote a custom decorator. This talk will cover the basic
concepts behind decorators, how to write a decorator, and walk through our
implementation of a decorator for authN/authZ.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Zylks</dc:creator><guid>http://www.pyvideo.org/video/555/custom-decorators-for-authentication-and-authoriz</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/555_custom-decorators-for-authentication-and-authorization.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-CustomDecoratorsForAuthenticationAndAuthorization489-643.jpg"></media:thumbnail></item><item><title>Daemon Slaying! Or, Unix Daemons in Python for fun and profit!</title><link>http://www.pyvideo.org/video/558/daemon-slaying--or--unix-daemons-in-python-for-fu</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Learn the in's and out's of creating Unix Daemons in Python. Walker Hale will
walk you through several examples, gotchas, and tips and tricks.


&lt;p&gt;Description&lt;/p&gt;
Daemons are those pieces of software in Unix (including Linux and Mac OS X)
that run in the background and typically start automatically during system
boot. Times when you might want a daemon include:

  * Monitoring an "inbox" directory in situations where a cron job is not appropriate
  * Managing (possibly multiple) instances of software according to business rules

Although most daemons are written in C, Python is a great alternative.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Walker Hale</dc:creator><guid>http://www.pyvideo.org/video/558/daemon-slaying--or--unix-daemons-in-python-for-fu</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/558_daemon-slaying-or-unix-daemons-in-python-for-fun-and-profit.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-DaemonSlayingOrUnixDaemonsInPythonForFunAndProfit354-542.jpg"></media:thumbnail></item><item><title>Getting Started with PyMongo</title><link>http://www.pyvideo.org/video/559/getting-started-with-pymongo</link><description>&lt;p&gt;Abstract&lt;/p&gt;
A look at how to get started with MongoDB using Python. The talk will cover
basic concepts, a brief walkthrough of some more advanced features, and how
Texas A&amp;M is using MongoDB and Python to solve some large data problems.


&lt;p&gt;Description&lt;/p&gt;
In the last month, we've started an effort to aggregate our logs so we can do
some real-time, holistic log analysis. Among other things, we are tracking
failed logins across all points of entry, identifying possibly compromised
accounts (simultaneous logins from multiple IPs, geographically disparate
logins), and identifying high-volume mailers across multiple mail relays. The
talk will include an introduction to MongoDB (NoSQL, data structures,
querying, indexing, differences from relational databases, etc); some
important performance and reliability features like its support for replica
sets, sharding, and map/reduce; and some very cool features like GridFS and
geospatial indexing. All of this, with the exception of database
configuration, will be demoed with MongoDB's python client.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Zylks</dc:creator><guid>http://www.pyvideo.org/video/559/getting-started-with-pymongo</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/559_getting-started-with-pymongo.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-GettingStartedWithPyMongo126-736.jpg"></media:thumbnail></item><item><title>Lightning Talks</title><link>http://www.pyvideo.org/video/557/lightning-talk1</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Comprised of five minute presentations crammed together back to back, this
event is frequently one of the most popular and entertaining events at PyCon
and PyTexas.

</description><guid>http://www.pyvideo.org/video/557/lightning-talk1</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/557_lightning-talks.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-LightningTalks506-734.jpg"></media:thumbnail></item><item><title>Logging De-Mystified! Basics to Advanced!</title><link>http://www.pyvideo.org/video/560/logging-de-mystified--basics-to-advanced</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This talk covers the Python Logging Module!


&lt;p&gt;Description&lt;/p&gt;
Walker Hale will explore the standard Python Logging Module and provide a tour
from the basics through intermediate examples, and touch on advanced logging
strategies.

Do you write programs that run longer than 5 minutes? Would you like to
leverage Python's excellent logging system more fully? Even if you don't use
Python for your long-running processes, you will learn valuable and widely-
applicable logging techniques.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Walker Hale</dc:creator><guid>http://www.pyvideo.org/video/560/logging-de-mystified--basics-to-advanced</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/560_logging-de-mystified-basics-to-advanced.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-LoggingDeMystifiedBasicsToAdvanced968-723.jpg"></media:thumbnail></item><item><title>Packaging</title><link>http://www.pyvideo.org/video/552/packaging</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Voted on by the PyTexas community, this talk is guaranteed to be insightful
and informative. We just don't know what it is yet.

</description><guid>http://www.pyvideo.org/video/552/packaging</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/552_packaging.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-Packaging843-482.jpg"></media:thumbnail></item><item><title>Programming a Simple Game in Python</title><link>http://www.pyvideo.org/video/551/programming-a-simple-game-in-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
If you missed Greg Lindstrom's first talk on programming a simple game in
Python, check out this one. This time, you'll be building a "Wheel of
Fortune"-style game.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Lindstrom</dc:creator><guid>http://www.pyvideo.org/video/551/programming-a-simple-game-in-python</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/551_programming-a-simple-game-in-python.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-ProgrammingASimpleGameInPython300-773.jpg"></media:thumbnail></item><item><title>Simplify your (Python) Life</title><link>http://www.pyvideo.org/video/554/simplify-your--python--life</link><description>&lt;p&gt;Abstract&lt;/p&gt;
We'll go over some intermediate to advanced topics and consider pros and cons
of choosing the simpler approach vs. the possibly more complicated or
redundant one. The aim is to reduce the number of language APIs and constructs
most programmers have to carry in their head to a smaller and more coherent
set. Along the way some best practices will also be discussed that are at a
higher level than things that can be flagged by automated syntax checking
tools such as pylint, pyflakes, etc.


&lt;p&gt;Description&lt;/p&gt;
Following are the topics we'll cover:

  * Language/API design and how warts can creep into even well designed products over time.
  * "Worse is better" approach may be good enough ("satisficing").
  * An eclectic mix of language constructs that usually trip newcomers--and sometimes even experienced programmers--which we'll survey:
    1. __new__
    2. __del__
    3. __call__
    4. __slots__
    5. classmethod vs. staticmethod
    6. decorators (guidelines for writing your own)
    7. class decorators vs. metaclasses
    8. delegation via getattr
    9. Interfaces and getattr
  * We'll see how delegation and interfaces tie into the thinking behind GoF Design Patterns.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sameer Khan</dc:creator><guid>http://www.pyvideo.org/video/554/simplify-your--python--life</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/554_simplify-your-python-life.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-SimplifyYourPythonLife131-952.jpg"></media:thumbnail></item><item><title>The Magic of Metaprogramming</title><link>http://www.pyvideo.org/video/550/the-magic-of-metaprogramming</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Learn the magic of writing programs that monitor, alter and react to the
execution of program code by responding to imports, changes to variables,
calls to functions and invocations of the builtins. This talk goes beyond the
static world of metaclasses and class decorators into the dynamics of
tracepoints.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Rush</dc:creator><guid>http://www.pyvideo.org/video/550/the-magic-of-metaprogramming</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/550_the-magic-of-metaprogramming.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-TheMagicOfMetaprogramming664-615.jpg"></media:thumbnail></item><item><title>Using Message Queues for Distributed Processing</title><link>http://www.pyvideo.org/video/562/using-message-queues-for-distributed-processing</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Message queues provide a reliable, language agnostic method for sharing data
between processes for distributed processing, and to manage work flows. This
talk will examine the role of message queues in a redesign of the provisioning
process for Texas A&amp;M; University's enterprise directory.


&lt;p&gt;Description&lt;/p&gt;
About six months ago we moved our account provisioning process from a
monolithic Perl script to a set of distributed, interconnected python scripts.
By using message queues (specifically beanstalkd) to pass messages between the
processes, we were able to build a system that was much faster, more reliable
and more flexible.

I will walk through the process that led us to choose beanstalkd, look at some
alternatives that are available, and describe some use cases for message
queues.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Zylks</dc:creator><guid>http://www.pyvideo.org/video/562/using-message-queues-for-distributed-processing</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/562_using-message-queues-for-distributed-processing.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-UsingMessageQueuesForDistributedProcessing897-27.jpg"></media:thumbnail></item><item><title>virtualenv, pip, and virtualenvwrapper</title><link>http://www.pyvideo.org/video/553/virtualenv--pip--and-virtualenvwrapper</link><description>&lt;p&gt;Abstract&lt;/p&gt;
virtualenv, pip, and virtualenvwrapper are vital tools for any Python
developer. This beginner-level presentation will introduce each of these.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jon Nials</dc:creator><guid>http://www.pyvideo.org/video/553/virtualenv--pip--and-virtualenvwrapper</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pytexas-2011/553_virtualenv-pip-and-virtualenvwrapper.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Nextdayvideo-virtualenvPipAndVirtualenvwrapper256-563.jpg"></media:thumbnail></item></channel></rss>
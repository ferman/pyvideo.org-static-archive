<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of ChiPy</title><link>http://www.pyvideo.org/category/14/chipy/rss</link><description></description><atom:link href="http://www.pyvideo.org/category/14/chipy/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Thu, 12 Mar 2015 00:00:00 -0500</lastBuildDate><ttl>500</ttl><item><title>November 2014 Chipy Talks</title><link>http://www.pyvideo.org/video/3359/november-2014-chipy-talks</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Talks from the November 2014 meeting. Hidden Markov Models to improve activity recognition in patients with spinal cord injury and Innate learning: training the brain before the eyes open.
&lt;p&gt;Description&lt;/p&gt;
### Hidden Markov Models to improve activity recognition in patients with spinal cord injury  
By: Asma Mehjabeen

Fitness tracking is great for calories and steps, but similar sensors are capable of reporting much more about how we move throughout the day. This is especially important in assessing the quality of movement for those with limited mobility. Doctors often want to know more detail about patient behavior after therapy to select and adjust the appropriate intervention. Using machine learning on wearable accelerometer signals, we estimate the activities patients with incomplete spinal cord injury are performing. By combining windowed classifier estimates over time using a hidden markov model, we show how error rates can be significantly decreased, which brings more detailed assessments of patient activity closer to a clinical reality.

### Innate learning: training the brain before the eyes open  
By: Isaac Adorno

Amorphous, blob-like patterns of neural activity form and move over the eye during visual development in animals. Why do such patterns exist? We show that these patterns are this way to better prepare the visual system for natural vision. Essentially, these are movies played in the eyes to refine the visual system before the eyes even open. We use python to model the developing visual system, produce an efficient code based on those patterns, and show how that code matches what is seen biologically. In this way, we show that during your early development you are learning from innately generated patterns - a unique twist in the debates of nature and nurture.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Asma Mehjabeen,Isaac Adorno</dc:creator><guid>http://www.pyvideo.org/video/3359/november-2014-chipy-talks</guid><enclosure url="https://www.youtube.com/watch?v=EEwufSsx4O8" length="None" type="video/flv"></enclosure><media:thumbnail url="/static/videos/img/no_thumbnail.png"></media:thumbnail></item><item><title>Open Government Data Movement </title><link>http://www.pyvideo.org/video/975/open-government-data-movement</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The history and goals of the open government data movement nationally and in
Chicago, previous commercial uses of open data, such as weather data, and a
couple of contemporary examples of how cities and independent groups are using
open data.
</description><guid>http://www.pyvideo.org/video/975/open-government-data-movement</guid><enclosure url="https://www.youtube.com/watch?v=wNRb2P9bjTc" length="None" type="video/flv"></enclosure><media:thumbnail url="/static/videos/img/no_thumbnail.png"></media:thumbnail></item><item><title>A Talk on Giving a Pythonic Talk </title><link>http://www.pyvideo.org/video/3378/a-talk-on-giving-a-pythonic-talk</link><description>&lt;p&gt;Description&lt;/p&gt;
Xan Vongsathorn and Catherine Vongsathorn will be giving a talk about talks. It turns out that many of python's core principles apply very well to presentations -- or for that matter, communication more generally -- which may be why we like python so much. Xan and Catherine want to get people excited not only about giving talks but also about using them to *actually communicate*. You donâ€™t have to be an expert, nor do you need natural talent, to give a good talk; this metatalk will discuss guiding principles that set effective presentations apart and can be applied to any technical talk.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Catherine Vongsathorn,Xan Vongsathorn</dc:creator><pubDate>Thu, 12 Mar 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3378/a-talk-on-giving-a-pythonic-talk</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/3378_A_Talk_on_Giving_a_Pythonic_Talk.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/3378_A_Talk_on_Giving_a_Pythonic_Talk.webm" mime_type="video/webm"></media:content><media:content url="http://youtu.be/xK7uxQkoIeM" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/xK7uxQkoIeM/hqdefault.jpg"></media:thumbnail></item><item><title>From Code to Coffee Table with Blender and Sly</title><link>http://www.pyvideo.org/video/3379/from-code-to-coffee-table-with-blender-and-sly</link><description>&lt;p&gt;Description&lt;/p&gt;
I've been developing a Python library for turning 3D models into CNC-machinable parts. I will demonstrate the basics of the library and how I used it to build a wood coffee table.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Meshulam</dc:creator><pubDate>Thu, 12 Mar 2015 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/3379/from-code-to-coffee-table-with-blender-and-sly</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/3379_From_Code_to_Coffee_Table_with_Blender.webm" length="None" type="video/webm"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/3379_From_Code_to_Coffee_Table_with_Blender.webm" mime_type="video/webm"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/3379_From_Code_to_Coffee_Table_with_Blender.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/ib2n2msvVZk" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/ib2n2msvVZk/hqdefault.jpg"></media:thumbnail></item><item><title>Django+Elasticsearch+Haystack to Search PDFs and Such</title><link>http://www.pyvideo.org/video/3377/djangoelasticsearchhaystack-to-search-pdfs-and</link><description>&lt;p&gt;Description&lt;/p&gt;
Have you ever wanted to search the contents of uploaded PDFs, Docs, and other document formats on your website?  Django Haystack (with the Elasticsearch search backend) is a great way to add search to your site, but it does not support full document indexing out of the box.  I'd like to share a solution that I cobbled together to allow this combination of tools the ability to search document contents. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Jasinski</dc:creator><pubDate>Thu, 12 Feb 2015 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3377/djangoelasticsearchhaystack-to-search-pdfs-and</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/DjangoElasticsearchHaystack_to.webm?Signature=VCu0QWgnQkqRJ0k%2BWEzBSpZoqnk%3D&amp;Expires=1423871709&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/webm"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/DjangoElasticsearchHaystack_to.webm?Signature=VCu0QWgnQkqRJ0k%2BWEzBSpZoqnk%3D&amp;Expires=1423871709&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/webm"></media:content><media:content url="http://youtu.be/xr1b39XMtBQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/xr1b39XMtBQ/hqdefault.jpg"></media:thumbnail></item><item><title>REST on Django</title><link>http://www.pyvideo.org/video/3376/rest-on-django</link><description>&lt;p&gt;Description&lt;/p&gt;
A quick overview through the components that make up Django REST Framework with a dive into a sample project.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Bain</dc:creator><pubDate>Thu, 12 Feb 2015 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3376/rest-on-django</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/REST_on_Django.webm?Signature=QaG%2FxoFtSAlss0RUhvOfeWXPmA0%3D&amp;Expires=1424051762&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/webm"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/REST_on_Django.webm?Signature=QaG%2FxoFtSAlss0RUhvOfeWXPmA0%3D&amp;Expires=1424051762&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/webm"></media:content><media:content url="http://youtu.be/UVC62eGQTOQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/UVC62eGQTOQ/hqdefault.jpg"></media:thumbnail></item><item><title>A lightning look at O'Reilly's Python books</title><link>http://www.pyvideo.org/video/3371/a-lightning-look-at-oreillys-python-books</link><description>&lt;p&gt;Description&lt;/p&gt;
Wouldn't it be awesome if ChiPy wrote its own book? We'd be able to get BEvERages for weeks, maybe months on the royalty! If so, we'd need to see what's already out there.

This lightning talk takes a look at O'Reilly's Python books using requests and BeautifulSoup, with a little of scipy's hierarchical clustering on the book descriptions. It is presented in an iPython notebook.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tanya Schlusser</dc:creator><pubDate>Thu, 11 Dec 2014 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3371/a-lightning-look-at-oreillys-python-books</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/3371_A_lightning_look_at_OReillys_Python_books.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/3371_A_lightning_look_at_OReillys_Python_books.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/XKXk8EFnzdU" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/XKXk8EFnzdU/hqdefault.jpg"></media:thumbnail></item><item><title>Python For Humans</title><link>http://www.pyvideo.org/video/3375/python-for-humans-3</link><description>&lt;p&gt;Description&lt;/p&gt;
Pythonâ€™s ecosystem is held up to a high standard, but it falls short in a few key areas. A handful of crucial APIs are an absolute pain to work with. Weâ€™ll go over where these APIs went wrong and learn about strong and elegant API design. The high barriers to entry in Python will be discussed. Potential solutions will be proposed. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kenneth Reitz</dc:creator><pubDate>Thu, 11 Dec 2014 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3375/python-for-humans-3</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/Python_For_Humans.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/Python_For_Humans.mp4" mime_type="video/mp4"></media:content><media:content url="http://www.youtube.com/watch?v=bpZS9ehw98k" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i.ytimg.com/vi/bpZS9ehw98k/hqdefault.jpg"></media:thumbnail></item><item><title>Pingo means "pin, go!"</title><link>http://www.pyvideo.org/video/2704/pingo-means-pin-go</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2704/pingo-means-pin-go</guid><enclosure url="http://youtu.be/PNkml72Wuck" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i.ytimg.com/vi/PNkml72Wuck/hqdefault.jpg"></media:thumbnail></item><item><title>Garbage Collection w/ Ref. Cycles</title><link>http://www.pyvideo.org/video/2555/garbage-collection-w-ref-cycles</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Reference counting is very useful but it has an odd problem.  We employ a technique from graphs to approach it.  The solution works but it's a bit slow.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Brady</dc:creator><pubDate>Thu, 09 Jan 2014 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2555/garbage-collection-w-ref-cycles</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/2555_Garbage_Collection_w_Ref_Cycles.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/2555_Garbage_Collection_w_Ref_Cycles.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=VCeENPxyZJw" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/VCeENPxyZJw/hqdefault.jpg"></media:thumbnail></item><item><title>Lexical Graphs with Natural Language Processing using NLTK</title><link>http://www.pyvideo.org/video/2554/lexical-graphs-with-natural-language-processing-u</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Brian will talk about his experiences using Python and NLTK http://nltk.org/ to run language comparisons to generate lexical difference graphs like the one mentioned in the "Lexical Distance Among the Languages of Europe" article. http://bit.ly/1cS46Ba

The focus will be on the NLTK and how its internals work to process a language. This talk will be his best one ever.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Ray</dc:creator><pubDate>Thu, 09 Jan 2014 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2554/lexical-graphs-with-natural-language-processing-u</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/2554_Lexical_Graphs_with_Natural_Language_Processing_us.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/2554_Lexical_Graphs_with_Natural_Language_Processing_us.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=cj-DTFmIUjE" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/cj-DTFmIUjE/hqdefault.jpg"></media:thumbnail></item><item><title>There were 986 roadway fatalities in Illinois in 2013. Where's the data?</title><link>http://www.pyvideo.org/video/2556/there-were-986-roadway-fatalities-in-illinois-in</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Seen on garish LED roadway signs all around Chicago on New Year's Eve, 2013: 986 TRAFFIC DEATHS IN 2013. It leads to many questions: On what roads? When did the accidents happen? What do we do now? I'm scared to drive. I will talk about purging my fears by finding the data to answer some of those questions. http://tothebeat.github.io/fatal-car-crashes/ This talk will involve PythonAnywhere, IPython, a module that's not even on PyPi (dbfpy), searching for and finding open government data, CartoDB, Google Fusion Tables, csv, and maybe Pandas. Rest assured, there will be no graphic photos. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Bennett</dc:creator><pubDate>Thu, 09 Jan 2014 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2556/there-were-986-roadway-fatalities-in-illinois-in</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/2556_There_were_986_roadway_fatalities_in_Illinois_in_2.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/2556_There_were_986_roadway_fatalities_in_Illinois_in_2.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=MN1y5lvSHQ8" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/MN1y5lvSHQ8/hqdefault.jpg"></media:thumbnail></item><item><title>A Visual Guide To Pandas</title><link>http://www.pyvideo.org/video/2551/a-visual-guide-to-pandas</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Pandas is the data-munging Swiss Army knife of the Python world. Often you know how your data should look but it's not so obvious how to get there, so I'll present a visual approach to learning the library and data manipulation. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Wirth</dc:creator><pubDate>Thu, 12 Dec 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2551/a-visual-guide-to-pandas</guid><enclosure url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2551_A_Visual_Guide_To_Pandas.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2551_A_Visual_Guide_To_Pandas.mp4" mime_type="video/mp4"></media:content><media:content url="http://youtu.be/9d5-Ti6onew" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/9d5-Ti6onew/hqdefault.jpg"></media:thumbnail></item><item><title>Storm (with python (and a side of clojure))</title><link>http://www.pyvideo.org/video/2553/storm-with-python-and-a-side-of-clojure</link><description>&lt;p&gt;Abstract&lt;/p&gt;
A walking tour of Storm, what it is, what you can do, and how you can use it with python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philip Doctor</dc:creator><pubDate>Thu, 12 Dec 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2553/storm-with-python-and-a-side-of-clojure</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/2553_Storm_with_python_and_a_side_of_clojure.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/2553_Storm_with_python_and_a_side_of_clojure.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=ja-iZG610o8" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/ja-iZG610o8/hqdefault.jpg"></media:thumbnail></item><item><title>The Chicago Process: How Braintree Develops Software</title><link>http://www.pyvideo.org/video/2552/the-chicago-process-how-braintree-develops-softw</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Braintree needs to be highly available and secure, while still maintaining a rapid development pace and strict backwards compatibility. In order to achieve that, we use what has become known as the "Chicago Process". This involves pairing, strict TDD, a team structure, and weekly iterations, all to empower the devs to make decisions and get work of a high quality done while avoiding siloing.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Forsyth</dc:creator><pubDate>Thu, 12 Dec 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2552/the-chicago-process-how-braintree-develops-softw</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/2552_The_Chicago_Process_How_Braintree_Develops_Softwar.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/2552_The_Chicago_Process_How_Braintree_Develops_Softwar.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=eBTRRVr3AIQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/eBTRRVr3AIQ/hqdefault.jpg"></media:thumbnail></item><item><title>CivicLab and Between the Bars</title><link>http://www.pyvideo.org/video/2448/civiclab-and-between-the-bars</link><description>&lt;p&gt;Abstract&lt;/p&gt;
In this talk, I will present on a slice of the maker movement called "civic making" and a new space that has opened up in Chicago to encourage this type creation, CivicLab.  As an example of "civic making" I will discuss Between the Bars, a paper based blogging platform for those who are incarcerated, built in Django.  I will also discuss our choice in framework and the pros/cons of our approach.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benjamin Sugar</dc:creator><pubDate>Thu, 14 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2448/civiclab-and-between-the-bars</guid><enclosure url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2448_CivicLab_and_Between_the_bars.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2448_CivicLab_and_Between_the_bars.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=-PbcJjr_SFE" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/-PbcJjr_SFE/hqdefault.jpg"></media:thumbnail></item><item><title>How Open Source Hardware Will Change the World</title><link>http://www.pyvideo.org/video/2450/how-open-source-hardware-will-change-the-world</link><description>&lt;p&gt;Abstract&lt;/p&gt;
What if there was an open source project that changed how we produce the most fundamental apsects of our lives? From the food we eat, to the houses we live in, this project wants to open source the tools we use to obtain what we need to live. Come to the ChiPy meeting to find out the name of the project.
 </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ebreo</dc:creator><pubDate>Thu, 14 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2450/how-open-source-hardware-will-change-the-world</guid><enclosure url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2450_How_Open_Source_Hardware_Will_Change_the_World.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2450_How_Open_Source_Hardware_Will_Change_the_World.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=RLRDnC9SQWk" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/RLRDnC9SQWk/hqdefault.jpg"></media:thumbnail></item><item><title>Measure It</title><link>http://www.pyvideo.org/video/2449/measure-it</link><description>&lt;p&gt;Abstract&lt;/p&gt;
measure_it provides timing and counting for iterators (and other code segments).</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Fein</dc:creator><pubDate>Thu, 14 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2449/measure-it</guid><enclosure url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2449_Measure_It.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2449_Measure_It.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=A_C4Z4RDDgI" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/A_C4Z4RDDgI/hqdefault.jpg"></media:thumbnail></item><item><title>Monoids in Python</title><link>http://www.pyvideo.org/video/2447/monoids-in-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Monoids are largely badly explained, but actually quite beautiful.  I would like to take a brief tour of what a monoid is and how they can help out with mundane every day tasks in python.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philip Doctor</dc:creator><pubDate>Thu, 14 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2447/monoids-in-python</guid><enclosure url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2447_Monoids_in_Python.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2447_Monoids_in_Python.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=50qhv8C3s9I" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/50qhv8C3s9I/hqdefault.jpg"></media:thumbnail></item><item><title>PyData Recap Lightning Talk</title><link>http://www.pyvideo.org/video/2452/pydata-recap-lightning-talk</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Recap of last weeks PyData conference in NYC. </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Wirth</dc:creator><pubDate>Thu, 14 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2452/pydata-recap-lightning-talk</guid><enclosure url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2452_PyData_Recap_Lightning_Talk.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2452_PyData_Recap_Lightning_Talk.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=I7B2BtgjfgY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/I7B2BtgjfgY/hqdefault.jpg"></media:thumbnail></item><item><title>What happened at #aaronswhack?</title><link>http://www.pyvideo.org/video/2451/what-happened-at-aaronswhack</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Many python programmers showed up to participate in the Chicago #aaronswhack. Here's a list of what they worked on, and here are pointers to local projects as well as worldwide projects.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sheila Miguez</dc:creator><pubDate>Thu, 14 Nov 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/2451/what-happened-at-aaronswhack</guid><enclosure url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2451_What_happened_at_aaronswhack.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://cf9ce50bbcc7255cb659-8cbed8cf7e3a131cd8f1c3e383d10041.r93.stream.cf2.rackcdn.com/chipy/2451_What_happened_at_aaronswhack.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=UJdPBKCPDnw" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/UJdPBKCPDnw/hqdefault.jpg"></media:thumbnail></item><item><title>Post djangocon: An overview of edX</title><link>http://www.pyvideo.org/video/2355/post-djangocon-an-overview-of-edx</link><description>&lt;p&gt;Abstract&lt;/p&gt;
edx is a major django application serving huge numbers of students for MIT, Harvard, Stanford, Berkely, and more.  
- A brief history of Computer-Based Instruction (python has a role);
- incomplete survey of current open-source CBI;
- edX: how's it different / what's it's rough structure, what (besides django/python) is involved;
- edX: hacking the platform (django development);
- edX: hacking courses; a deployment-level VM, and how to get started there;
- finally: future topics:  deployment; what this can't do (maybe) and why;
- wrapup: call for interest &amp; edx project night(s);

I'll try to have some USBs for anyone who want to try one of the edX VMs during the talk
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">yarko</dc:creator><pubDate>Thu, 12 Sep 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2355/post-djangocon-an-overview-of-edx</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Post_djangocon_An_overview_of_.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Post_djangocon_An_overview_of_.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=f1FoYwe_DT4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/f1FoYwe_DT4/hqdefault.jpg"></media:thumbnail></item><item><title>Set it, and forget it! Auto Scale on Rackspace</title><link>http://www.pyvideo.org/video/2356/set-it-and-forget-it-auto-scale-on-rackspace</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Rackspace is rolling out a new service to allow your cloud to scale on its own, called Auto Scale. Built on Monitoring, Auto Scale allows you to grow or shrink your fleet of resources as demand changes.

pyrax, a Python package for working with OpenStack-based clouds like Rackspace's, just released Auto Scale and Monitoring support with version 1.5.0.

I'll show how you can use pyrax to deploy servers and automatically add or remove them based on their usage.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Curtin</dc:creator><pubDate>Thu, 12 Sep 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2356/set-it-and-forget-it-auto-scale-on-rackspace</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Set_it_and_forget_it_Auto_Scal.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Set_it_and_forget_it_Auto_Scal.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=-0P5EvYI0Rk" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/-0P5EvYI0Rk/hqdefault.jpg"></media:thumbnail></item><item><title>What's Love Got to do with It? / Love: for techies</title><link>http://www.pyvideo.org/video/2357/whats-love-got-to-do-with-it-love-for-techie</link><description>&lt;p&gt;Abstract&lt;/p&gt;
What you think Love is - is (probably) wrong.

The correct metaphor / definition for live will make much more sense to the software person.  In fact, it will help with team building and design too.  Yup.

Grab a beer.   I'll tell you a story about how this evolved (turing machine example), how and where evolution selected it, and why it works - and how it works for approaching problems (design) too.

Then I'll lay out the api (functional description).

Don't take it too seriously.
You couldn't have known.
Now you will.
Cheers!</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">yarko</dc:creator><pubDate>Thu, 12 Sep 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2357/whats-love-got-to-do-with-it-love-for-techie</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Whats_Love_Got_to_do_with_It_L.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Whats_Love_Got_to_do_with_It_L.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=Qu6MVLnt2D8" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/Qu6MVLnt2D8/hqdefault.jpg"></media:thumbnail></item><item><title>Asynchronous I/O in Python 3</title><link>http://www.pyvideo.org/video/2194/asynchronous-io-in-python-3</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Feihong talks about PEP 3156 and the basic usage of Tulip,  the reference implementation.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Feihong Hsu</dc:creator><pubDate>Thu, 11 Jul 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2194/asynchronous-io-in-python-3</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Asynchronous_IO_in_Python_3.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Asynchronous_IO_in_Python_3.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=jMgRUI7V_mk" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/jMgRUI7V_mk/hqdefault.jpg"></media:thumbnail></item><item><title> ipython / notebook demo</title><link>http://www.pyvideo.org/video/2195/ipython-notebook-demo</link><description>&lt;p&gt;Abstract&lt;/p&gt;
ipython was a big focus of Scipy:  Fernando gave a keynote, Brian gave a talk, and there was a tutorial. 

 ipython appeals to a broad audience from beginners to advanced users. "IDLE is awful and I basically learned Python using iPython" says Jason, whose presentation will touch on the powerful features and extensibility for advanced users.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Wirth</dc:creator><pubDate>Thu, 11 Jul 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/2195/ipython-notebook-demo</guid><enclosure url="http://s3.us.archive.org/ndvchipy/ipython_notebook_demo.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/ipython_notebook_demo.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=upw-AIzWcfQ" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/upw-AIzWcfQ/hqdefault.jpg"></media:thumbnail></item><item><title>Ultimate Language Shootout IV: C# is slightly better than you might imagine</title><link>http://www.pyvideo.org/video/1863/ultimate-language-shootout-iv-c-is-slightly-bet</link><description>&lt;p&gt;Abstract&lt;/p&gt;
If you find yourself accidentally writing c#, you can still have some fun.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philip Doctor</dc:creator><pubDate>Thu, 13 Jun 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1863/ultimate-language-shootout-iv-c-is-slightly-bet</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=fByR4ghTOS8" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i3.ytimg.com/vi/fByR4ghTOS8/hqdefault.jpg"></media:thumbnail></item><item><title>Ultimate Language Shootout IV: CoffeeScript</title><link>http://www.pyvideo.org/video/1864/ultimate-language-shootout-iv-coffeescript</link><description>&lt;p&gt;Abstract&lt;/p&gt;
A brief introduction to CoffeeScript, given at ChiPy's Ultimate Language Shootout IV.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Feihong Hsu</dc:creator><pubDate>Thu, 13 Jun 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1864/ultimate-language-shootout-iv-coffeescript</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=oH_cEl2SMr8" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i4.ytimg.com/vi/oH_cEl2SMr8/hqdefault.jpg"></media:thumbnail></item><item><title>Ultimate Language Shootout IV: Go: come drink the delicious kool-aid</title><link>http://www.pyvideo.org/video/1865/ultimate-language-shootout-iv-go-come-drink-the</link><description>&lt;p&gt;Abstract&lt;/p&gt;
From the makers of the wildly successful Plan 9 operating system and B programming language. Go is Google's stab at systems programming.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Sutton</dc:creator><pubDate>Thu, 13 Jun 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1865/ultimate-language-shootout-iv-go-come-drink-the</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=Aec6HTVv5EM" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/Aec6HTVv5EM/hqdefault.jpg"></media:thumbnail></item><item><title>Ultimate Language Shootout IV: Haskell or: How a List Comprehension Is Like a Burrito</title><link>http://www.pyvideo.org/video/1866/ultimate-language-shootout-iv-haskell-or-how-a</link><description>&lt;p&gt;Abstract&lt;/p&gt;
It's a compiled, statically typed, lazy, purely functional programming language. About as far as possible from Python? Not quite. The languages have a lot in common and Python has already borrowed a few tricks from Haskell.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Kettler</dc:creator><pubDate>Thu, 13 Jun 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1866/ultimate-language-shootout-iv-haskell-or-how-a</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=c5MPg88mdgc" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i4.ytimg.com/vi/c5MPg88mdgc/hqdefault.jpg"></media:thumbnail></item><item><title>Ultimate Language Shootout IV: QUASI</title><link>http://www.pyvideo.org/video/1867/ultimate-language-shootout-iv-quasi</link><description>&lt;p&gt;Abstract&lt;/p&gt;
1977 -  A language, the description of which was handed to me on about one hundred and fifty mimeographed eight and one half by eleven sheets.  Robert Sibley handed it to the class to use as our compiler project.  </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Randy Baxley</dc:creator><pubDate>Thu, 13 Jun 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1867/ultimate-language-shootout-iv-quasi</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=Peww9AUH6yM" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/Peww9AUH6yM/hqdefault.jpg"></media:thumbnail></item><item><title>Ultimate Language Shootout IV: Ruby</title><link>http://www.pyvideo.org/video/1868/ultimate-language-shootout-iv-ruby</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Ruby, what you need to know</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ross Heflin</dc:creator><pubDate>Thu, 13 Jun 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1868/ultimate-language-shootout-iv-ruby</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Ultimate_Language_Shootout_IV_.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=NP0-Df2tISA" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i3.ytimg.com/vi/NP0-Df2tISA/hqdefault.jpg"></media:thumbnail></item><item><title>Hy: A Lisp that transforms itself into the Python AST. </title><link>http://www.pyvideo.org/video/1869/hy-a-lisp-that-transforms-itself-into-the-python</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Webber</dc:creator><pubDate>Thu, 09 May 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1869/hy-a-lisp-that-transforms-itself-into-the-python</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Hy_a_lisp_that_transforms_itse.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Hy_a_lisp_that_transforms_itse.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=SB9TWabor1k" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/SB9TWabor1k/hqdefault.jpg"></media:thumbnail></item><item><title> In-project virtualenvs </title><link>http://www.pyvideo.org/video/1870/in-project-virtualenvs</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Webber</dc:creator><pubDate>Thu, 09 May 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1870/in-project-virtualenvs</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Inproject_virtualenvs.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Inproject_virtualenvs.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=kXoSASlq7zU" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/kXoSASlq7zU/hqdefault.jpg"></media:thumbnail></item><item><title>Who saved The Onion, from being hacked by "Syrian Electronic Army"</title><link>http://www.pyvideo.org/video/1871/who-saved-the-onion-from-being-hacked-by-syrian</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Well, this isn't at all Python related (or even all that technical), but at The Onion, we recently had a little run-in with the "hackers" from the "Syrian Electronic Army", and could talk about some lessons learned from that, if there's any interest.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Bloomfield</dc:creator><pubDate>Thu, 09 May 2013 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1871/who-saved-the-onion-from-being-hacked-by-syrian</guid><enclosure url="http://s3.us.archive.org/ndvchipy/Who_saved_The_Onion_from_being.mp4" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/ndvchipy/Who_saved_The_Onion_from_being.mp4" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=dXTtcs6DrzY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/dXTtcs6DrzY/hqdefault.jpg"></media:thumbnail></item><item><title>Open Science</title><link>http://www.pyvideo.org/video/1650/open-science</link><description>&lt;p&gt;Abstract&lt;/p&gt;
pdftribute and open science</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sheila Miguez</dc:creator><pubDate>Fri, 15 Feb 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/1650/open-science</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_feb_2013/open_science.mp4?Signature=XZKp9vCwDdo%2FwlPBpf8rEiui%2F1k%3D&amp;Expires=1361267235&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_feb_2013/open_science.mp4?Signature=XZKp9vCwDdo%2FwlPBpf8rEiui%2F1k%3D&amp;Expires=1361267235&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=u2ujTHH40nw" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/u2ujTHH40nw/hqdefault.jpg"></media:thumbnail></item><item><title>Scraping from the Web: An Overview That Does Not Contain Too Much Cussing</title><link>http://www.pyvideo.org/video/1649/scraping-with-python</link><description>&lt;p&gt;Abstract&lt;/p&gt;
A high level overview of how we did scraping at EveryBlock.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Feihong Hsu</dc:creator><pubDate>Fri, 15 Feb 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/1649/scraping-with-python</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_feb_2013/Scraping_with_Python.mp4?Signature=dWiCFwRZAyv0bG8wwkXx7vvJH2s%3D&amp;Expires=1361272540&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_feb_2013/Scraping_with_Python.mp4?Signature=dWiCFwRZAyv0bG8wwkXx7vvJH2s%3D&amp;Expires=1361272540&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=bWk0P7w2aZg" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i3.ytimg.com/vi/bWk0P7w2aZg/hqdefault.jpg"></media:thumbnail></item><item><title>Genie</title><link>http://www.pyvideo.org/video/1617/genie</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This talk will introduce Genie, a new programming language with a Python-
inspired syntax that compiles into binary executables and libraries. Behind
the scenes, Genie is a dialect of Vala, and a full participant in the GObject
universe. I will cover the language basics, with an eye to comparing them with
Python, and guide you around some potential pitfalls. This is the second in a
series of talks I am giving on the topic of Python/GObject integration.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tal Liron</dc:creator><pubDate>Thu, 10 Jan 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/1617/genie</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_jan_2013/Genie.mp4?Signature=AukpfsoPq2S%2BLcm0AjlR8n0yN5Q%3D&amp;Expires=1357945280&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_jan_2013/Genie.mp4?Signature=AukpfsoPq2S%2BLcm0AjlR8n0yN5Q%3D&amp;Expires=1357945280&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=dFyD8--zs84" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/dFyD8--zs84/hqdefault.jpg"></media:thumbnail></item><item><title>Intro to Marmir: Spreadsheets on steroids</title><link>http://www.pyvideo.org/video/1618/intro-to-marmir-spreadsheets-on-steroids</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Marmir ([https://github.com/brianray/mm](https://github.com/brianray/mm))
takes Python data structures and turns them into spreadsheets (think xlwt on
steroids). This is a high level Intro to the project, current status, goals,
and to solicit any contributions. This talk will look into how Marmir
internals do things like: measure fonts to fit columns, preserve data types
(dates, numbers), allow advanced look and feel customization of spreadsheets.
Later down the road, I would like to have a separate talk on Marmir internals
and how it may be customized to do things like, convert Django model data
directly to spreadsheets, integrate with google spreadsheets.

</description><pubDate>Thu, 10 Jan 2013 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/1618/intro-to-marmir-spreadsheets-on-steroids</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_jan_2013/Intro_to_Marmir_Spreadsheets_on_steroids.mp4?Signature=YkkztMHcg5REfFfNgcLkyinbg5s%3D&amp;Expires=1357942655&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_jan_2013/Intro_to_Marmir_Spreadsheets_on_steroids.mp4?Signature=YkkztMHcg5REfFfNgcLkyinbg5s%3D&amp;Expires=1357942655&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=a7Oon2Bo8tE" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/a7Oon2Bo8tE/hqdefault.jpg"></media:thumbnail></item><item><title>SQLAlchemy: As She is Code, an opinionated Intro </title><link>http://www.pyvideo.org/video/1616/sqlalchemy-as-she-is-code-an-opinionated-intro</link><description>&lt;p&gt;Abstract&lt;/p&gt;
The talk will be about using the SQL Alchemy query expression language

and how it can be combined with the ORM for noble ends.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jordan Bettis</dc:creator><pubDate>Thu, 13 Dec 2012 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/1616/sqlalchemy-as-she-is-code-an-opinionated-intro</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_dec_2012/SQLAlchemy_As_She_is_Code_an_o.mp4?Signature=ei6JoaWQlv1V%2BbtbOD2%2Fuan4z98%3D&amp;Expires=1355618784&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_dec_2012/SQLAlchemy_As_She_is_Code_an_o.mp4?Signature=ei6JoaWQlv1V%2BbtbOD2%2Fuan4z98%3D&amp;Expires=1355618784&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=oy57f4evyO4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i4.ytimg.com/vi/oy57f4evyO4/hqdefault.jpg"></media:thumbnail></item><item><title>MediaGoblin Update</title><link>http://www.pyvideo.org/video/1418/mediagoblin-update</link><description>&lt;p&gt;Abstract&lt;/p&gt;
GNU MediaGoblin is a free software media publishing system written in Python
for images, video, and audio. This talk starts by tricking you into watching
the mediagoblin_campaign_pitch video, and then Chris explains how he used
Python to drive Blender to make the animated effects.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Allan Webber</dc:creator><pubDate>Thu, 11 Oct 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1418/mediagoblin-update</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_oct_2012/MediaGoblin_Update.mp4?Signature=7YwMLKLZ1QQS6M7jhRh1XW5F%2BZ0%3D&amp;Expires=1350083294&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_oct_2012/MediaGoblin_Update.mp4?Signature=7YwMLKLZ1QQS6M7jhRh1XW5F%2BZ0%3D&amp;Expires=1350083294&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=MrEoE0Py5ZY" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i2.ytimg.com/vi/MrEoE0Py5ZY/hqdefault.jpg"></media:thumbnail></item><item><title>Python 3.3.0 Release</title><link>http://www.pyvideo.org/video/1417/python-330-release</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Brian will cover the September 29th release of Python 3 (3.3.0) including some
highly technical details and importing information for the casual users. He
will go over some of the particular Window's stuff while leaving the talk's
focus on an assortment of cool stuff.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Curtin</dc:creator><pubDate>Thu, 11 Oct 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1417/python-330-release</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_oct_2012/Python_330_Release.mp4?Signature=aP9PMA7NbjPBqs64Z1zKiUUEfjo%3D&amp;Expires=1350073895&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_oct_2012/Python_330_Release.mp4?Signature=aP9PMA7NbjPBqs64Z1zKiUUEfjo%3D&amp;Expires=1350073895&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=fbQvWcrOwUw" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i3.ytimg.com/vi/fbQvWcrOwUw/hqdefault.jpg"></media:thumbnail></item><item><title>Event Driven Concurrency</title><link>http://www.pyvideo.org/video/1351/event-driven-concurrency</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Ben recently discovered event driven concurrency. He will be talking about
some of the basics as well as trying to compare it with other concurrency
options. The focus will be on its application in a few recent projects as well
as a comparison of Python's gevent and node.js. Some of the demos will also be
using matplotlib in honor of John Hunter's passing.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ben Toews</dc:creator><pubDate>Thu, 13 Sep 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1351/event-driven-concurrency</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_sep_2012/Event_Driven_Concurrency.mp4?Signature=37DPSEM1HyPGBTtB9770SXS%2BHDU%3D&amp;Expires=1347917213&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_sep_2012/Event_Driven_Concurrency.mp4?Signature=37DPSEM1HyPGBTtB9770SXS%2BHDU%3D&amp;Expires=1347917213&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=2gcrTsQ7yi4" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i3.ytimg.com/vi/2gcrTsQ7yi4/hqdefault.jpg"></media:thumbnail></item><item><title>Matplotlib Examples Uses</title><link>http://www.pyvideo.org/video/1350/matplotlib-examples-uses</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Two examples of using matplotlib: first, in Greg's PhD research in marine
microbiology; second, in plotting baseball PITCHf/x data.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Kettler</dc:creator><pubDate>Thu, 13 Sep 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/1350/matplotlib-examples-uses</guid><enclosure url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_sep_2012/Matplotlib_Examples_Uses.mp4?Signature=gdkVJY5Uqn7R6EmWCEMV8cMtJ5A%3D&amp;Expires=1347922286&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://s3.us.archive.org/nextdayvideo/chipy/chipy_sep_2012/Matplotlib_Examples_Uses.mp4?Signature=gdkVJY5Uqn7R6EmWCEMV8cMtJ5A%3D&amp;Expires=1347922286&amp;AWSAccessKeyId=FEWGReWX3QbNk0h3" mime_type="video/mp4"></media:content><media:content url="https://www.youtube.com/watch?v=lX1tFs6mtvk" mime_type="video/flv"></media:content></media:group><media:thumbnail url="http://i1.ytimg.com/vi/lX1tFs6mtvk/hqdefault.jpg"></media:thumbnail></item><item><title>Big Data De-duping</title><link>http://www.pyvideo.org/video/973/big-data-de-duping</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Derek Eder of Webitects and Forest Gregg, a Ph.D. student of sociology at the
University of Chicago, will describe the Python library they are developing to
deduplicate tabular data, quickly, accurately, and at a large scale. The
library facilitates the matching of related records in different data sets,
using a machine learning approach. They expect to have a demo to show and will
explain how they expect that the library will be used.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Eder,Forest Gregg</dc:creator><pubDate>Thu, 14 Jun 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/973/big-data-de-duping</guid><enclosure url="https://www.youtube.com/watch?v=7Lwlo42j6aA" length="None" type="video/flv"></enclosure><media:thumbnail url="http://i4.ytimg.com/vi/7Lwlo42j6aA/hqdefault.jpg"></media:thumbnail></item><item><title>Python powered search</title><link>http://www.pyvideo.org/video/974/python-powered-search</link><description>&lt;p&gt;Description&lt;/p&gt;
Explore the indexing / stemming / scoring libraries used to built a highly
concise search engine along with redis and tornado.

</description><pubDate>Thu, 14 Jun 2012 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/974/python-powered-search</guid><enclosure url="https://www.youtube.com/watch?v=AxM9Qe6shoU" length="None" type="video/flv"></enclosure><media:thumbnail url="/static/videos/img/no_thumbnail.png"></media:thumbnail></item><item><title>Lidless: A Video Analyzer and IRC Bot</title><link>http://www.pyvideo.org/video/3147/lidless-video-analyzer-and-irc-bot</link><description>&lt;p&gt;Abstract&lt;/p&gt;
A great Eye, lidless, wreathed in webcams.
&lt;p&gt;Description&lt;/p&gt;
At Pumping Station: One (Chicago's Hackerspace) people often send messages to the mailing list or ask on IRC if anyone is at the space or plans to be later. There's an opportunity there to solve problems automatically rather than through human input. Member Eric Stein designed a Python / OpenCV based application (lidless) to monitor four video cameras in the space and offer a REST API, a web front end with historical graphs, and an IRC bot in the IRC channel to relay information about how busy the space is.

This talk is a short demo of the application accompanied by motivations and high level archtechture breakdown. Following the demo/archtechture I'll dive into the parts of the code that people are most interested in hearing about with Q&amp;A.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Stein</dc:creator><pubDate>Thu, 10 Nov 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/3147/lidless-video-analyzer-and-irc-bot</guid><enclosure url="https://www.youtube.com/watch?v=GiUPv2Q01lw" length="None" type="video/flv"></enclosure><media:thumbnail url="/static/videos/img/no_thumbnail.png"></media:thumbnail></item><item><title>Playdoh</title><link>http://www.pyvideo.org/video/563/playdoh</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Playdoh is Mozilla's starter kit for new Django projects. It aims to be
secure-by-default and set up all the same goodies we use to scale for high
traffic, perform background tasks, localize our sites in many languages, and
other cool things.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kumar McMillan</dc:creator><pubDate>Thu, 14 Jul 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/563/playdoh</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/563_playdoh.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/563_playdoh.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/563_playdoh.m4v" fileSize="167343844" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-Playdoh611.png"></media:thumbnail></item><item><title>GNU MediaGoblin for a federated media future</title><link>http://www.pyvideo.org/video/565/gnu-mediagoblin-for-a-federated-media-future</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Christopher Allan Webber talks about GNU MediaGoblin, a federated
(decentralized) media publishing system (images, and later other media like
video) written in python and under the AGPL. Infrastructure discussion
describes what it means that GNU MediaGoblin uses an unframework / is "wsgi
minimalist", about the choice of MongoDB and MongoKit, and how to impress an
audience with ascii art mockups.


&lt;p&gt;Description&lt;/p&gt;


</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Allan Webber</dc:creator><pubDate>Thu, 09 Jun 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/565/gnu-mediagoblin-for-a-federated-media-future</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/565_gnu-mediagoblin-for-a-federated-media-future.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/565_gnu-mediagoblin-for-a-federated-media-future.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/565_gnu-mediagoblin-for-a-federated-media-future.m4v" fileSize="302223624" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-GNUMediaGoblinForAFederatedMediaFuture830.png"></media:thumbnail></item><item><title>Using OpenCV with Python and ROS</title><link>http://www.pyvideo.org/video/564/using-opencv-with-python-and-ros</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Bill Mania and Eric Kinzle A brief presentation of using the OpenCV computer
vision toolset with Python and ROS. Included at the end will be a
demonstration of tracking a colored object using a camera with servo-driven
pan and tilt capability.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bill Mania,Eric Kinzle</dc:creator><pubDate>Thu, 09 Jun 2011 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/564/using-opencv-with-python-and-ros</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/564_using-opencv-with-python-and-ros.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/564_using-opencv-with-python-and-ros.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/564_using-opencv-with-python-and-ros.m4v" fileSize="446805119" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-UsingOpenCVWithPythonAndROS709.png"></media:thumbnail></item><item><title>Python/Django deployment</title><link>http://www.pyvideo.org/video/567/python-django-deployment</link><description>&lt;p&gt;Abstract&lt;/p&gt;
I'll introduce the WSGI ecosystem. We'll then setup a Django app and deploy it
to a VM. I'll cover server setup/config and best practices and cover software
used like Fabric, nginx etc. Sample nginx, WSGI and Apache configs will be
provided. People can follow along and I'll provide download links after so
they can try it at home. This will be the best meeting ever.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rohit Sankaran</dc:creator><pubDate>Thu, 10 Feb 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/567/python-django-deployment</guid><enclosure url="http://blip.tv/file/get/CarlFK-PythonDjangoDeployment270.ogv" length="None" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-PythonDjangoDeployment775.png"></media:thumbnail></item><item><title>Reverse-engineering Ian Bicking's brain: inside pip and virtualenv.</title><link>http://www.pyvideo.org/video/568/reverse-engineering-ian-bicking--39-s-brain--insi</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Pip and virtualenv: many use them; not so many understand just how they work
their magic. If you're a pip/virtualenv user but haven't yet dared crack the
lid (or you have, and found it a bit difficult to follow), come along for a
fast-paced guided tour. Knowing these tools will help you make more effective
use of them, and might also turn you into a contributor.


&lt;p&gt;Description&lt;/p&gt;
  * 1 [http://us.pycon.org/2011/schedule/sessions/198/](http://us.pycon.org/2011/schedule/sessions/198/)
  * 2 [http://pip.openplans.org/](http://pip.openplans.org/)
  * 3 [http://virtualenv.openplans.org/](http://virtualenv.openplans.org/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Meyer</dc:creator><pubDate>Thu, 10 Feb 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/568/reverse-engineering-ian-bicking--39-s-brain--insi</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/568_reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv.m4v" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/568_reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv.m4v" mime_type="video/mp4"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/568_reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv.flv" mime_type="video/x-flv"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-ReverseengineeringIanBickingsBrainInsidePipAndVirtualenv225.png"></media:thumbnail></item><item><title>Django Deployment for the Average Bloke</title><link>http://www.pyvideo.org/video/570/django-deployment-for-the-average-bloke</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Deploying a Django/Pinax site on the following stack: Linux Debian Lenny
Apache mod_wsgi PostgreSQL.


&lt;p&gt;Description&lt;/p&gt;
This is the config you want to use if you don't know what you want to use. You
don't need to make any choices, you don't have to do any research, and you
don't even need to read the docs if you don't want to. And as an added bonus,
I show how to wget a vm image to deploy into with network ports exposed. It is
very much like working with a hosting provider like Slice Host, and it makes a
great framework for testing server installs.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Karsten</dc:creator><pubDate>Thu, 13 Jan 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/570/django-deployment-for-the-average-bloke</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/570_django-deployment-for-the-average-bloke.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/570_django-deployment-for-the-average-bloke.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/570_django-deployment-for-the-average-bloke.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-DjangoDeploymentForTheAverageBloke934.png"></media:thumbnail></item><item><title>ROS - Robot Operating System</title><link>http://www.pyvideo.org/video/571/ros---robot-operating-system</link><description>&lt;p&gt;Abstract&lt;/p&gt;
ROS is the Robot Operating System, originally from Stanford and now supported
by Willow Garage. ROS has a mature Python interface and is being used around
the world by both amateur and professional roboticists. At the end of the
presentation, if time allows and interest exists, some rudimentary ROS
functionality will be demonstrated on a robot in progress.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bill Mania,Brian Ray</dc:creator><pubDate>Thu, 13 Jan 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/571/ros---robot-operating-system</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/571_ros-robot-operating-system.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/571_ros-robot-operating-system.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/571_ros-robot-operating-system.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-ROSRobotOperatingSystem313.png"></media:thumbnail></item><item><title>Vintage 1978 Superboard II hacking with some Python3 and ZeroMQ</title><link>http://www.pyvideo.org/video/569/vintage-1978-superboard-ii-hacking-with-some-pyth</link><description>&lt;p&gt;Abstract&lt;/p&gt;
I'm not sure if we're still looking for talks on Thursday, but if so, I'd like
to volunteer to give a talk about using Python to do some retro-computing
hacking involving my vintage 1978 Superboard II. It's not exactly robotics,
but it involves hardware and a lot of low-level hacking (along with some
Python3 and ZeroMQ thrown in for good measure ;-).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Thu, 13 Jan 2011 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/569/vintage-1978-superboard-ii-hacking-with-some-pyth</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/569_vintage-1978-superboard-ii-hacking-with-some-python3-and-zeromq.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/569_vintage-1978-superboard-ii-hacking-with-some-python3-and-zeromq.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/569_vintage-1978-superboard-ii-hacking-with-some-python3-and-zeromq.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-Vintage1978SuperboardIIHackingWithSomePython3AndZeroMQ478.png"></media:thumbnail></item><item><title>Tox</title><link>http://www.pyvideo.org/video/572/tox</link><description>&lt;p&gt;Abstract&lt;/p&gt;
It's a great new open source tool that helps you support all versions of
python with your existing automated tests. It's not a test runner, it's a
super test runner runner! Or something. There is no easy way to describe it
which is why the front page of the website is sort of confusing, IMO. We use
tox on the Nose project to make sure each code change doesn't break the tests
in Python 2.4, 2.5, 2.6, 2.7, 3.0 or Jython. Not everybody targets so many
environments but if you want to maintain a widely used module then you
probably will want to use tox someday.


&lt;p&gt;Description&lt;/p&gt;
Here's our Hudson matrix setup w/ tox: [http://hudson.testrun.org/job/nose-
unstable/](http://hudson.testrun.org/job/nose-unstable/) (we just set this up
recently which is why most builds were broken in one or two envs) I can also
spend some time going over how we are currently maintaining a test suite that
runs in both 2.x and 3.x simultaneously.

This will be our Best Meeting Ever!

[http://codespeak.net/tox/](http://codespeak.net/tox/)

[http://chipy.org/](http://chipy.org/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kumar McMillan</dc:creator><pubDate>Thu, 11 Nov 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/572/tox</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/572_tox.m4v" length="None" type="video/mp4"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/572_tox.m4v" mime_type="video/mp4"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/572_tox.flv" mime_type="video/x-flv"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-Tox172.png"></media:thumbnail></item><item><title>Programming with Twisted</title><link>http://www.pyvideo.org/video/574/programming-with-twisted</link><description>&lt;p&gt;Abstract&lt;/p&gt;
  * What twisted is and its purpose in life (ie the reactor pattern).
  * Non-blocking network programming.
  * The confusing topic of deferreds and callbacks everywhere.
  * Methods for dealing with blocking APIs.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dan Griffen</dc:creator><pubDate>Thu, 08 Jul 2010 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/574/programming-with-twisted</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/574_programming-with-twisted.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-ProgrammingWithTwisted152.png"></media:thumbnail></item><item><title>PyPy and Unladen Swallow: Making your Python Fast</title><link>http://www.pyvideo.org/video/573/pypy-and-unladen-swallow--making-your-python-fast</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Python has a reputation for being a bit slow, but it doesn't have to be that
way. This talk will cover why Python is slow, and what two of the most
exciting virtual machines are doing about it.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Thu, 08 Jul 2010 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/573/pypy-and-unladen-swallow--making-your-python-fast</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/573_pypy-and-unladen-swallow-making-your-python-fast.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-PyPyAndUnladenSwallowMakingYourPythonFast798.png"></media:thumbnail></item><item><title>Customizing the Django Admin</title><link>http://www.pyvideo.org/video/576/customizing-the-django-admin</link><description>&lt;p&gt;Abstract&lt;/p&gt;
I plan on showing a live example and customizing as we go. This will be a
pretty mid-level talk and should be interesting to those not familiar, those
who know django and considered using the admin, and for djangonuts who want to
do some pretty advanced stuff.


&lt;p&gt;Description&lt;/p&gt;
  * Registering Models in the Admin
  * Customizing the filtering, search, general display
  * Adding Actions
  * Inlines
  * Custom Forms
  * Making Fields Readonly by inheriting
  * Integrating jQuery
  * Custom Widgets like Image thumbnails 
  * Changing look and feel

</description><pubDate>Thu, 10 Jun 2010 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/576/customizing-the-django-admin</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/576_customizing-the-django-admin.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-CustomizingTheDjangoAdmin188-963.jpg"></media:thumbnail></item><item><title>Using Python for Blender Animations</title><link>http://www.pyvideo.org/video/575/using-python-for-blender-animations</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Creating tools with Python and Blender 2.5's bpy API


&lt;p&gt;Description&lt;/p&gt;
A walk through using Blender 2.5's new Python API to automate various
animation tasks, using examples from the film Patent Absurdity:
http://patentabsurdity.com/ http://patentabsurdity.com/fsf_patent_anims.tar.gz
has the sources of the animations demonstrated.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Allan Webber</dc:creator><pubDate>Thu, 10 Jun 2010 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/575/using-python-for-blender-animations</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/575_using-python-for-blender-animations.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-UsingPythonForBlenderAnimations589-560.jpg"></media:thumbnail></item><item><title>Twiggy: A Pythonic Logger</title><link>http://www.pyvideo.org/video/578/twiggy--a-pythonic-logger</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Twiggy is an early-stage project to build a more Pythonic logging module. It
was started at Pycon 2010.

Home: [http://python-twiggy.googlecode.com](http://python-
twiggy.googlecode.com).

See the notes for a quick overview [http://pythontwiggy.googlecode.com/hg/note
s.html](http://pythontwiggy.googlecode.com/hg/notes.html).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Fein</dc:creator><pubDate>Thu, 08 Apr 2010 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/578/twiggy--a-pythonic-logger</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/578_twiggy-a-pythonic-logger.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/578_twiggy-a-pythonic-logger.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/578_twiggy-a-pythonic-logger.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-TwiggyAPythonicLogger801-516.jpg"></media:thumbnail></item><item><title>What's coming up in Python 2.7</title><link>http://www.pyvideo.org/video/577/what--39-s-coming-up-in-python-2-7</link><description>&lt;p&gt;Abstract&lt;/p&gt;
With 2.7 likely being the end of the 2.x line, come see what's in store for
the upcoming release. Changes to unittest, introduction of the argparse
module, and a whole host of 3.1 features are here to ease your eventual
transition into the wonderful world of Python 3.

</description><pubDate>Thu, 08 Apr 2010 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/577/what--39-s-coming-up-in-python-2-7</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/577_what-s-coming-up-in-python-2-7.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/577_what-s-coming-up-in-python-2-7.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/577_what-s-coming-up-in-python-2-7.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/CarlFK-WhatsComingUpIn27408-544.jpg"></media:thumbnail></item><item><title>Changes to the GIL in Python 3</title><link>http://www.pyvideo.org/video/580/changes-to-the-gil-in-python-3</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Follow-up to David's last GIL talk in June 2009. This presentation walks
through changes to the GIL that are being made.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Thu, 14 Jan 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/580/changes-to-the-gil-in-python-3</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/580_changes-to-the-gil-in-python-3.ogv" length="None" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-ChangesToTheGILInPython3492.png"></media:thumbnail></item><item><title>GitPython and Git Internals</title><link>http://www.pyvideo.org/video/579/gitpython-and-git-internals</link><description>&lt;p&gt;Abstract&lt;/p&gt;
Chris covers how git works, the internals, and using the GitPython library.

[GitPython](http://gitorious.org/git-python)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Allan Webber</dc:creator><pubDate>Thu, 14 Jan 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/579/gitpython-and-git-internals</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/579_gitpython-and-git-internals.ogv" length="None" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-GitPythonAndGitInternals503.png"></media:thumbnail></item><item><title>Technical, standards-spec style analysis of Unicode</title><link>http://www.pyvideo.org/video/581/technical--standards-spec-style-analysis-of-unico</link><description>&lt;p&gt;Abstract&lt;/p&gt;
It's a very educational presentation of Unicode, what it is, where it comes
from, how it works, Unicode in Python, ....

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jordan Bettis</dc:creator><pubDate>Thu, 14 Jan 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/581/technical--standards-spec-style-analysis-of-unico</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/581_technical-standards-spec-style-analysis-of-unicode.ogv" length="None" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-TechnicalStandardsspecStyleAnalysisOfUnicode223.png"></media:thumbnail></item><item><title>REST-ful Web apps with Django Piston</title><link>http://www.pyvideo.org/video/582/rest-ful-web-apps-with-django-piston</link><description>&lt;p&gt;Abstract&lt;/p&gt;
A common complaint about Django, the leading Python web application framework,
is that it doesn't make writing REST APIs easy enough. In fact the paradigm
for a typical Django application involves views which map to HTML page
templates. With end users increasingly expecting rich interfaces with the
responsiveness of a desktop application, this paradigm is being superseded.
Fortunately a third-party Django application called Piston fills the gap.
Django/Piston can be combined with the Ext JS JavaScript framework and widget
set to create attractive, responsive Web applications, and this talk will show
you how.

</description><pubDate>Thu, 10 Dec 2009 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/582/rest-ful-web-apps-with-django-piston</guid><enclosure url="http://blip.tv/file/get/CarlFK-RESTfulWebAppsWithDjangoPiston287.ogg" length="None" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-RESTfulWebAppsWithDjangoPiston528.png"></media:thumbnail></item><item><title>Python for Scientific and High Performance Computing (1 of 4)</title><link>http://www.pyvideo.org/video/586/python-for-scientific-and-high-performance-compu2</link><description>&lt;p&gt;Abstract&lt;/p&gt;
This tutorial provides an introduction to Python focused on HPC and scientific
computing. Throughout, we provide concrete examples, hands-on examples, and
links to additional sources of information. The result will be a clear sense
of possibilities and best practices using Python in HPC environments.


&lt;p&gt;Description&lt;/p&gt;
Python, a high-level portable multi-paradigm interpreted programming language
is becoming increasingly popular with the scientific and HPC communities due
to ease of use, large collection of modules, adaptability, and strong support
from vendors and community alike. This tutorial provides an introduction to
Python focused on HPC and scientific computing. Throughout, we provide
concrete examples, hands-on examples, and links to additional sources of
information. The result will be a clear sense of possibilities and best
practices using Python in HPC environments. We will cover several key
concepts: language basics, NumPy and SciPy, parallel programming, performance
issues, integrating C and Fortran, basic visualization, large production
codes, and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write a
simple application making use of parallel programming techniques, visualize
the output, and know how to confidently proceed with future projects with
Python.

</description><pubDate>Thu, 12 Nov 2009 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/586/python-for-scientific-and-high-performance-compu2</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/586_python-for-scientific-and-high-performance-computing-1-of-4.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-PythonForScientificAndHighPerformanceComputing1Of4136.png"></media:thumbnail></item><item><title>Python for Scientific and High Performance Computing (2 of 4)</title><link>http://www.pyvideo.org/video/585/python-for-scientific-and-high-performance-compu1</link><description>&lt;p&gt;Description&lt;/p&gt;
Python for Scientific and High Performance Computing (part 2 of 4)

  
Python, a high-level portable multi-paradigm interpreted programming language
is becoming increasingly popular with the scientific and HPC communities due
to ease of use, large collection of modules, adaptability, and strong support
from vendors and community alike. This tutorial provides an introduction to
Python focused on HPC and scientific computing. Throughout, we provide
concrete examples, hands-on examples, and links to additional sources of
information. The result will be a clear sense of possibilities and best
practices using Python in HPC environments. We will cover several key
concepts: language basics, NumPy and SciPy, parallel programming, performance
issues, integrating C and Fortran, basic visualization, large production
codes, and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write a
simple application making use of parallel programming techniques, visualize
the output, and know how to confidently proceed with future projects with
Python.

  
ChiPy is a group of Chicago Python Programmers, l33t, and n00bs. Meetings are
held monthly at various locations around Chicago. Also, ChiPy is a proud
sponsor of many Open Source and Educational efforts in Chicago.

</description><pubDate>Thu, 12 Nov 2009 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/585/python-for-scientific-and-high-performance-compu1</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/585_python-for-scientific-and-high-performance-computing-2-of-4.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-PythonForScientificAndHighPerformanceComputing2Of4542.png"></media:thumbnail></item><item><title>Python for Scientific and High Performance Computing (3 of 4)</title><link>http://www.pyvideo.org/video/584/python-for-scientific-and-high-performance-compu0</link><description>&lt;p&gt;Description&lt;/p&gt;
Python for Scientific and High Performance Computing (part 3 of 4)

  
Python, a high-level portable multi-paradigm interpreted programming language
is becoming increasingly popular with the scientific and HPC communities due
to ease of use, large collection of modules, adaptability, and strong support
from vendors and community alike. This tutorial provides an introduction to
Python focused on HPC and scientific computing. Throughout, we provide
concrete examples, hands-on examples, and links to additional sources of
information. The result will be a clear sense of possibilities and best
practices using Python in HPC environments. We will cover several key
concepts: language basics, NumPy and SciPy, parallel programming, performance
issues, integrating C and Fortran, basic visualization, large production
codes, and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write a
simple application making use of parallel programming techniques, visualize
the output, and know how to confidently proceed with future projects with
Python.

  
ChiPy is a group of Chicago Python Programmers, l33t, and n00bs. Meetings are
held monthly at various locations around Chicago. Also, ChiPy is a proud
sponsor of many Open Source and Educational efforts in Chicago.

</description><pubDate>Thu, 12 Nov 2009 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/584/python-for-scientific-and-high-performance-compu0</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/584_python-for-scientific-and-high-performance-computing-3-of-4.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-PythonForScientificAndHighPerformanceComputing3Of4188.png"></media:thumbnail></item><item><title>Python for Scientific and High Performance Computing (4 of 4)</title><link>http://www.pyvideo.org/video/583/python-for-scientific-and-high-performance-comput</link><description>&lt;p&gt;Description&lt;/p&gt;
Python for Scientific and High Performance Computing (part 4 of 4)

  
Python, a high-level portable multi-paradigm interpreted programming language
is becoming increasingly popular with the scientific and HPC communities due
to ease of use, large collection of modules, adaptability, and strong support
from vendors and community alike. This tutorial provides an introduction to
Python focused on HPC and scientific computing. Throughout, we provide
concrete examples, hands-on examples, and links to additional sources of
information. The result will be a clear sense of possibilities and best
practices using Python in HPC environments. We will cover several key
concepts: language basics, NumPy and SciPy, parallel programming, performance
issues, integrating C and Fortran, basic visualization, large production
codes, and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write a
simple application making use of parallel programming techniques, visualize
the output, and know how to confidently proceed with future projects with
Python.

  
ChiPy is a group of Chicago Python Programmers, l33t, and n00bs. Meetings are
held monthly at various locations around Chicago. Also, ChiPy is a proud
sponsor of many Open Source and Educational efforts in Chicago.

</description><pubDate>Thu, 12 Nov 2009 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/583/python-for-scientific-and-high-performance-comput</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/583_python-for-scientific-and-high-performance-computing-4-of-4.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-PythonForScientificAndHighPerformanceComputing4Of4887.png"></media:thumbnail></item><item><title>Blender 2.5 loves Python 3</title><link>http://www.pyvideo.org/video/587/blender-2-5-loves-python-3</link><description>&lt;p&gt;Description&lt;/p&gt;
Blender 2.5 loves Python 3

Presented by Chris Webber on October 8th, 2009

Chris talks about the upcoming Blender 2.5 release. "Blender 2.5 is the first
app I know of that *requires* Python 3.X. So that's pretty interesting on its
own. But there's plenty more interesting stuff to discuss. It's going to be
mostly an overview talk. Blender's python integration could possibly span 3
separate talks, especially considering the blender game engine's use of it,
which is a separate but interesting talk."

ChiPy is a group of Chicago Python Programmers, l33t, and n00bs. Meetings are
held monthly at various locations around Chicago. Also, ChiPy is a proud
sponsor of many Open Source and Educational efforts in Chicago. Stay tuned to
the mailing list for more info. [ChiPy website](http://chipy.org/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Allan Webber</dc:creator><pubDate>Thu, 08 Oct 2009 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/587/blender-2-5-loves-python-3</guid><enclosure url="http://blip.tv/file/get/CarlFK-Blender25LovesPython3368.ogv" length="335728586" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-Blender25LovesPython3867.png"></media:thumbnail></item><item><title>Asynchronous vs. Threaded Python</title><link>http://www.pyvideo.org/video/589/asynchronous-vs--threaded-python</link><description>&lt;p&gt;Description&lt;/p&gt;
Asynchronous vs. Threaded Python

  
Presented at ChiPy by David Beazley on June 12th, 2009

  
This is the opening act to Mindblowing GIL. Covers threading vs. asynchronous
programming in Python.

</description><pubDate>Thu, 11 Jun 2009 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/589/asynchronous-vs--threaded-python</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/589_asynchronous-vs-threaded-python.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-asynchronous_vs_threaded_Python680-721.jpg"></media:thumbnail></item><item><title>Mindblowing Python GIL</title><link>http://www.pyvideo.org/video/588/mindblowing-python-gil</link><description>&lt;p&gt;Description&lt;/p&gt;
Mindblowing Python GIL

  
Presented by David Beazley at ChiPy on June 11, 2009

  
David Beazley: mind-blowing presentation about how the Python GIL actually
works and why it's even worse than most people even imagine.

  
Slides:
[http://www.dabeaz.com/python/GIL.pdf](http://www.dabeaz.com/python/GIL.pdf)

  
[VIDEO HAS PROBLEMS: audio is fuzzy]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Thu, 11 Jun 2009 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/588/mindblowing-python-gil</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/588_mindblowing-python-gil.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-mindblowing_Python_GIL693-605.jpg"></media:thumbnail></item><item><title>Web Apps with Jython</title><link>http://www.pyvideo.org/video/590/web-apps-with-jython</link><description>&lt;p&gt;Description&lt;/p&gt;
Building apps with Jython

  
Presented on May 15th, 2009 at ChiPy

  
Talks about go_pylons and snakefight and other things that allow you to build
and run Python applications with Jython. WSGI to servlet adapter in Jython
2.5.

</description><pubDate>Fri, 15 May 2009 00:00:00 -0500</pubDate><guid>http://www.pyvideo.org/video/590/web-apps-with-jython</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/chipy/590_web-apps-with-jython.flv" length="None" type="video/x-flv"></enclosure><media:thumbnail url="http://a.images.blip.tv/CarlFK-go_pylons531-385.jpg"></media:thumbnail></item><item><title>ChiPy: Chicago Python User Group Jan. '08 Meeting</title><link>http://www.pyvideo.org/video/566/chipy--chicago-python-user-group-jan----39-08-mee</link><description>&lt;p&gt;Description&lt;/p&gt;
  * pickle module -- Atul Varma 
  * PyStage, an animation framework -- Christopher Allan Webber 
  * Python Scripting for OpenOffice -- Steve Githens 

</description><pubDate>Tue, 01 Jan 2008 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/566/chipy--chicago-python-user-group-jan----39-08-mee</guid><media:thumbnail url="/static/videos/img/no_thumbnail.png"></media:thumbnail></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>pyvideo.org: Videos of PyCon US 2010</title><link>http://www.pyvideo.org/category/6/pycon-us-2010/rss</link><description></description><atom:link href="http://www.pyvideo.org/category/6/pycon-us-2010/rss" rel="self"></atom:link><language>en-us</language><lastBuildDate>Fri, 19 Feb 2010 00:00:00 -0600</lastBuildDate><ttl>500</ttl><item><title>Actors: What, Why, and How (#161)</title><link>http://www.pyvideo.org/video/352/pycon-2010--actors--what--why--and-how---161</link><description>&lt;p&gt;Description&lt;/p&gt;
Actors: What, Why and How

  
Presented by Donovan Preston

  
Since the dawn of concurrency research, there have been two camps: shared
everything, and shared nothing. Most modern applications use threads for
concurrency, a shared everything architecture.

  
Actors, however, use a shared nothing architecture where lightweight processes
communicate with each other using message passing. Actors can change their
state, create a new Actor, send a message to any Actor it has the Address of,
and wait for a specific kind of message to arrive in it's mailbox.

  
We will discuss the benefits of using the Actor architecture and strategies
for implementing an Actor system in Python.

  
[http://bitbucket.org/fzzzy/python-actors/](http://bitbucket.org/fzzzy/python-
actors/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Donovan Preston</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/352/pycon-2010--actors--what--why--and-how---161</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/352_actors-what-why-and-how-161.ogv" length="160241933" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/352_actors-what-why-and-how-161.ogv" fileSize="160241933" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/352_actors-what-why-and-how-161.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ActorsWhatWhyAndHow161560.png"></media:thumbnail></item><item><title>Advanced String Formatting (#117)</title><link>http://www.pyvideo.org/video/317/pycon-2010--advanced-string-formatting---117</link><description>&lt;p&gt;Description&lt;/p&gt;
Advanced String Formatting

  
Eric Smith (True Blade Systems, Inc.)

  
Advanced string formatting (str.format, described in PEP 3101) was added in
Python 2.6 and 3.0 as a more powerful, flexible, and extensible alternative to
the existing %-based string formatting.

  
This talk will discuss how to use str.format, how your own types can benefit
from it, its strengths and weaknesses, how to migrate to it, and advanced
topics such as implementing your own templating language.

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/317/pycon-2010--advanced-string-formatting---117</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/317_advanced-string-formatting-117.ogv" length="132322346" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/317_advanced-string-formatting-117.ogv" fileSize="132322346" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/317_advanced-string-formatting-117.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010AdvancedStringFormatting117208.png"></media:thumbnail></item><item><title>An Underwater Python: Tortuga the Python Powered Robot (#175)</title><link>http://www.pyvideo.org/video/328/pycon-2010--an-underwater-python--tortuga-the-pyt</link><description>&lt;p&gt;Description&lt;/p&gt;
An Underwater Python: Tortuga the Python Powered Robot

  
Presented by Joseph Lisee (Robotics @ Maryland)

  
Learn about Tortuga, the python powered Autonomous Underwater Vehicle (AUV)
developed by Robotics @ Maryland ([http://ram.umd.edu](http://ram.umd.edu)).
See how python provides a flexible and efficient way to build the software
that commands, simulates and controls Tortuga. Also learn about the trials,
tribulations, and glory experienced developing, competing, losing, and winning
with Tortuga in AUVSI AUV Competition ([http://www.auvsi.org/competitions/wate
r.cfm](http://www.auvsi.org/competitions/water.cfm)).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joseph Lisee</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/328/pycon-2010--an-underwater-python--tortuga-the-pyt</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/328_an-underwater-python-tortuga-the-python-powered-robot-175.ogv" length="212875988" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/328_an-underwater-python-tortuga-the-python-powered-robot-175.ogv" fileSize="212875988" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/328_an-underwater-python-tortuga-the-python-powered-robot-175.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010AnUnderwaterPythonTortugaThePythonPoweredRobot955.png"></media:thumbnail></item><item><title>Building Leafy Chat, DjangoDose, and Hurricane, Lessons Learned on the Real-Time Web with Python (#24)</title><link>http://www.pyvideo.org/video/338/pycon-2010--building-leafy-chat--djangodose--and-</link><description>&lt;p&gt;Description&lt;/p&gt;
Building Leafy Chat, DjangoDose, and Hurricane. Lessons learned on the real-
time web with Python

  
Presented by Alex Gaynor (Eldarion)

  
Websites are getting increasingly dynamic and realtime in order to compete
with desktop applications. This talk is an examination of 3 websites/tools
I've built, all using Python. I'm going to try to explain what we did to build
these, and how you can do the same.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/338/pycon-2010--building-leafy-chat--djangodose--and-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/338_building-leafy-chat-djangodose-and-hurricane-lessons-learned-on-the-real-time-web-with-python-24.ogv" length="207063572" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/338_building-leafy-chat-djangodose-and-hurricane-lessons-learned-on-the-real-time-web-with-python-24.ogv" fileSize="207063572" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/338_building-leafy-chat-djangodose-and-hurricane-lessons-learned-on-the-real-time-web-with-python-24.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010BuildingLeafyChatDjangoDoseAndHurricaneLessonsL504.png"></media:thumbnail></item><item><title>Cooperative Multitasking with Twisted: Getting Things Done Concurrently. (#11)</title><link>http://www.pyvideo.org/video/268/pycon-2010--cooperative-multitasking-with-twisted</link><description>&lt;p&gt;Description&lt;/p&gt;
Cooperative Multitasking with Twisted: Getting Things Done Concurrently

  
Presented by David A Reid

  
Twisted is a framework for building asynchronous networking applications. It
also provides powerful tools for writing non-blocking non-network code, tools
which are vital for building real large scale applications in Twisted. I hope
to give a comprehensive overview of these tools to help the intermediate
Twisted user get things done concurrently.

  
[VIDEO HAS ISSUES: Picture out of focus at the beginning]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David A Reid</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/268/pycon-2010--cooperative-multitasking-with-twisted</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/268_cooperative-multitasking-with-twisted-getting-things-done-concurrently-11.ogv" length="162419672" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/268_cooperative-multitasking-with-twisted-getting-things-done-concurrently-11.ogv" fileSize="162419672" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/268_cooperative-multitasking-with-twisted-getting-things-done-concurrently-11.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010CooperativeMultitaskingWithTwistedGettingThingsD951-91.jpg"></media:thumbnail></item><item><title>Creating RESTful Web services with restish (#17)</title><link>http://www.pyvideo.org/video/301/pycon-2010--creating-restful-web-services-with-re</link><description>&lt;p&gt;Description&lt;/p&gt;
Creating RESTful Web Services with restish

  
Presented by Grig Gheorghiu

  
Roy Fielding described REST in his Ph.D. dissertation in the year 2000. Almost
ten years later, Web developers are still confused as to how to apply the REST
principles in their applications. Examples of poorly designed 'REST' APIs
abound, and I will make use of them in my talk.

  
In this presentation, I will give an overview of REST and its design
principles, and I will show a concrete example of a RESTful Web service
implemented in the restish framework. My examples will include CRUD
operations, as well as transactions. I will also show how to consume this Web
service using both httplib2 and curl. I would be remiss if I didn't describe
ways to test the Web service with WebTest and twill.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Grig Gheorghiu</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/301/pycon-2010--creating-restful-web-services-with-re</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/301_creating-restful-web-services-with-restish-17.ogv" length="506397358" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/301_creating-restful-web-services-with-restish-17.ogv" fileSize="506397358" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/301_creating-restful-web-services-with-restish-17.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010CreatingRESTfulWebServicesWithRestish17893.png"></media:thumbnail></item><item><title>Creating Rich Client Applications Using Dabo</title><link>http://www.pyvideo.org/video/248/creating-rich-client-applications-using-dabo</link><description>&lt;p&gt;Description&lt;/p&gt;
Creating Rich Client Applications Using Dabo

Presented by Ed Leafe and Paul McNett

While web applications seem to get all the attention these days, many
businesses still rely on desktop, or "rich client", applications to run their
business. For those who prefer to do their coding with Python, Dabo is the
only full-featured desktop app framework.

In this tutorial, we'll cover the general structure and approach to
application development used in Dabo, including lots of interactive work where
we will all develop applications that will be able to query a database,
display the results, allow the user to edit the data, and then save it back to
the database. We will cover the various tools available in Dabo to help you
develop your applications, and how they work together.

Intended Audience

Developers with basic to intermediate Python experience.

Class Outline

Introduction: The thinking and design approach behind the framework. (15 min).

  * Explanation of the framework design. Frameworks are great if you're working with them, but not if you're constantly fighting them! We'll outline the various parts of the framework, and how they work together to create applications. 

Building an app in 30 seconds. (15 min)

  * You can use the AppWizard to create a completely functional CRUD application in less than 30 seconds. We'll demonstrate how to use the AppWizard, and how you can build on and further customize the application it creates. 

The primary non-UI classes in Dabo (15 min)

  * There are lots of classes in Dabo, but only a few main ones that are used in every app. This section will cover them: the application class, the business object class, and the DBAPI data adapter class. 

Introduction to the Dabo Tools (30 min)

  * One of the benefits of a framework is that the mundane, repetitive tasks are handled by the framework, leaving you to focus on the creative parts of app development. In this section we'll discuss several of the visual tools available to help you create Dabo applications faster and easier. 

Developing an actual application, part 1 (15 min)

  * Talk is fine, but here's where we begin creating an actual application. Attendees will learn how to create a new Dabo app, along with database connections, menus and a main form. In the second half of the tutorial we'll use this app as the basis for more complex development. 

REFRESHMENT BREAK

Overview of UI Classes (30 min)

  * This is where we talk about the "rich" in "rich client". Dabo has a full set of UI widgets, based on the wxPython toolkit. We've taken those widget classes and added a consistent interface, so that the developer uses the same properties and methods to accomplish the same thing in all the classes, making developing smoother and more intuitive. We'll cover all of the most-commonly used controls, and how to work with them. 

Developing an actual application, part 2 (30 min)

  * The basic app created in the first half was an impressive result for such a short amount of time, but here's where we'll start to make it more interesting. We'll create several related business objects, bind them to the UI elements, and have it all work seamlessly with a database. After that, we'll show how to create and run reports against that same data. We'll then wrap up by explaining how to deploy your finished application. 

Rich Client Web Applications with Dabo (10 min)

  * HTML web apps are trying to get a richer client experience through the increased use and sophistication of Javascript-based tools. That's great if you like spending your time in Javascript, but not so great if you are a Python dev. We take the opposite approach: taking our rich-client apps and deploying them over the web so that users can run them without first installing the app. 

Future plans for Dabo (5 min)

  * Dabo is being actively developed, and we have plans for future enhancements that we'll cover here. 

Wrap-up and Final Questions (15 min)

Requirements

Students do not need to have a computer, but they will not get as much out of
the session if they cannot actively participate in creating the example
applications. They should have the following prerequisites installed, using
the latest available stable releases except where specific version numbers are
indicated:

  * Python 2.5.4 
  * wxPython 2.8.10.1 unicode 
  * MySQLdb 
  * reportlab 
  * Python Imaging Library 
  * Dabo 0.9.2 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ed Leafe,Paul McNett</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/248/creating-rich-client-applications-using-dabo</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/248_creating-rich-client-applications-using-dabo.ogv" length="955215464" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/248_creating-rich-client-applications-using-dabo.ogv" fileSize="955215464" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/248_creating-rich-client-applications-using-dabo.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010CreatingRichClientApplicationsUsingDabo644-559.jpg"></media:thumbnail></item><item><title>Cross platform application development and distribution (#116)</title><link>http://www.pyvideo.org/video/269/pycon-2010--cross-platform-application-developmen</link><description>&lt;p&gt;Description&lt;/p&gt;
Cross platform application development and distribution

  
Presented by Stani Michiels and Nadia Alramli

  
You think Python gives you native cross platform applications for free? Think
twice. Are you interested in distributing your application to other platforms
but not sure how?

  
We will give tips and examples on how to enhance the native feel of your
application: notifications, registration of file types and more. The talk will
also help you to avoid common pitfalls and provides solutions for designing
cross platform user interfaces. (Although we use wxPython as an example, the
principles are valid for other toolkits as well.) We'll show you where to
start if you want to distribute your application to different platforms,
briefly discussing tools like py2exe, py2app and Debian/Ubuntu packaging
ecosystem. This talk is based on our experience from developing Phatch (Photo
Batch Processor) and SPE (Python Editor).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nadia Alramli,Stani Michiels</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/269/pycon-2010--cross-platform-application-developmen</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/269_cross-platform-application-development-and-distribution-116.ogv" length="146848147" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/269_cross-platform-application-development-and-distribution-116.ogv" fileSize="146848147" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/269_cross-platform-application-development-and-distribution-116.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010CrossPlatformApplicationDevelopmentAndDistributio341.png"></media:thumbnail></item><item><title>Customizing your editor for maximum productivity (#171)</title><link>http://www.pyvideo.org/video/245/pycon-2010--customizing-your-editor-for-maximum-p</link><description>&lt;p&gt;Description&lt;/p&gt;
Customizing your editor for maximum productivity

Presented by Justin Lilly

This will be an overview of the sorts of things that editors can offer to make
your programming life easier. It will also include specifics of how to get
these features working in a basic editor. (Vim or Emacs, yet undecided)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Lilly</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/245/pycon-2010--customizing-your-editor-for-maximum-p</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/245_customizing-your-editor-for-maximum-productivity-171.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010CustomizingYourEditorForMaximumProductivity171712-991.jpg"></media:thumbnail></item><item><title>Dealing with unsightly data in the real world. (#156)</title><link>http://www.pyvideo.org/video/242/pycon-2010--dealing-with-unsightly-data-in-the-re</link><description>&lt;p&gt;Description&lt;/p&gt;
Dealing with unsightly data in the real world

Presented by Alexander Dutton

Drawing on experiences writing [http://m.ox.ac.uk/](http://m.ox.ac.uk/), we'll
explore the art of getting data out of unhelpful systems. We'll start with
working out how to interact with a system, move on to techniques for parsing
the data it gives you, and round off by implementing a shinier interface over
the top.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Dutton</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/242/pycon-2010--dealing-with-unsightly-data-in-the-re</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/242_dealing-with-unsightly-data-in-the-real-world-156.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010DealingWithUnsightlyDataInTheRealWorld156210-8.jpg"></media:thumbnail></item><item><title>Debating 'til Dawn: Topics to keep you up all night (#183)</title><link>http://www.pyvideo.org/video/314/pycon-2010--debating---39-til-dawn--topics-to-kee</link><description>&lt;p&gt;Description&lt;/p&gt;
Debating 'til Dawn: Topics to keep you up all night

  
Mike C. Fletcher (VRPlumber Consulting Inc.)

  
PyCon is about staying up all night hacking. When you're tired, you don't
sleep, you debate ideas with your sprint-mates! This presentation will attempt
to condense the best of the last few years of PyGTA into a 30-minute jumping
off point full of wild assertions, unreasonable assumptions, and just plain
wrong-headed ideas to kick-start those heated discussions that just keep going
long into the night. What are your programming mantras? What million-dollar
ideas do you have to improve Python? Should there be programmer liability? Is
there art in programming and should there be? Are you a cowboy coder or an
straight-laced engineer? Is PyCon really about staying up all night discussing
ideas? We'll have a feedback channel to share your thoughts, we'll keep it
moving, and we'll see if we can't make this the most sleepless PyCon yet.

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/314/pycon-2010--debating---39-til-dawn--topics-to-kee</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/314_debating-til-dawn-topics-to-keep-you-up-all-night-183.ogv" length="96732258" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/314_debating-til-dawn-topics-to-keep-you-up-all-night-183.ogv" fileSize="96732258" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/314_debating-til-dawn-topics-to-keep-you-up-all-night-183.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010DebatingTilDawnTopicsToKeepYouUpAllNight183772.png"></media:thumbnail></item><item><title>Deconstruction of an Object (#62)</title><link>http://www.pyvideo.org/video/327/pycon-2010--deconstruction-of-an-object---62</link><description>&lt;p&gt;Description&lt;/p&gt;
Deconstruction of an Object

  
Presented by Jeff Rush (Tau Productions Inc.)

  
An incremental deconstruction of a class definition identifying the key
elements such as layered namespaces, common attributes, lifecycle and access
controls. We'll also look at calling into, out of and through an object,
making classes extensible and various object behaviors like containment,
sequence, iteration and arithmetic.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Rush</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/327/pycon-2010--deconstruction-of-an-object---62</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/327_deconstruction-of-an-object-62.ogv" length="293909973" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/327_deconstruction-of-an-object-62.ogv" fileSize="293909973" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/327_deconstruction-of-an-object-62.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010DeconstructionOfAnObject62593.png"></media:thumbnail></item><item><title>Decorators From Basics to Class Decorators to Decorator Libraries (#138)</title><link>http://www.pyvideo.org/video/350/pycon-2010--decorators-from-basics-to-class-decor</link><description>&lt;p&gt;Description&lt;/p&gt;
Decorators from Basics to Class Decorators to Decorator Libraries

  
Presented by Charles Merriam

  
Decorators simplify design and improve readability and reliability. This
tutorial starts from the beginning with basic decorators, showing how simple
tasks like restricting administration functions are clearer and more readable
with decorators, and exactly how the decorators work. A simple library of
decorators for tracing, logging, and caching results is presented. This leads
into writing your own decorators and parameterized decorators either from
scratch or by using libraries like Simionato's Decorator Decorator and
"@call_before(fn)". Finally, using Python 3.x class decorators in place of
metaclasses for most common dictionary modifications is covered.

  
[VIDEO HAS ISSUES: Missing about 1 minute at start, because of technical
problems.]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Charles Merriam</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/350/pycon-2010--decorators-from-basics-to-class-decor</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/350_decorators-from-basics-to-class-decorators-to-decorator-libraries-138.ogv" length="152048091" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/350_decorators-from-basics-to-class-decorators-to-decorator-libraries-138.ogv" fileSize="152048091" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/350_decorators-from-basics-to-class-decorators-to-decorator-libraries-138.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010DecoratorsFromBasicsToClassDecoratorsToDecorato979.png"></media:thumbnail></item><item><title>Demystifying Non-Blocking and Asynchronous I/O (#164)</title><link>http://www.pyvideo.org/video/333/pycon-2010--demystifying-non-blocking-and-asynchr</link><description>&lt;p&gt;Description&lt;/p&gt;
Demystifying non-blocking and asynchronous I/O

  
Presented by Peter A Portante

  
We will first define what blocking, non-blocking, synchronous and asynchronous
I/O are under the POSIX interfaces. We'll cover how and when these four types
of I/O should be used, and their individual effects on a Python based
application. The notion of concurrency will be discussed by comparing a simple
threaded blocking I/O application to a simple single threaded non-blocking I/O
application by walking the attendees through the python code for those
applications.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter A Portante</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/333/pycon-2010--demystifying-non-blocking-and-asynchr</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/333_demystifying-non-blocking-and-asynchronous-i-o-164.ogv" length="153455334" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/333_demystifying-non-blocking-and-asynchronous-i-o-164.ogv" fileSize="153455334" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/333_demystifying-non-blocking-and-asynchronous-i-o-164.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010DemystifyingNonBlockingAndAsynchronousIO164681.png"></media:thumbnail></item><item><title>Designing to Scale: The Story of ShootQ (#5)</title><link>http://www.pyvideo.org/video/304/pycon-2010--designing-to-scale--the-story-of-shoo</link><description>&lt;p&gt;Description&lt;/p&gt;
Designing to Scale: The story of ShootQ

  
Jonathan LaCour (ShootQ)

  
ShootQ is a web-based studio management solution for professional photography
studios, designed to automate and simplify the task of running a small
business. In this talk, Jonathan LaCour, the CTO of ShootQ, hopes to share his
experience designing a web application that can scale up to meet the demands
of a rapidly growing customer base. The talk will cover a variety of topics
including TurboGears 2.0, WSGI, horizontal and vertical scaling, database
replication, load balancing, deployment, and more.

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/304/pycon-2010--designing-to-scale--the-story-of-shoo</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/304_designing-to-scale-the-story-of-shootq-5.ogv" length="244896099" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/304_designing-to-scale-the-story-of-shootq-5.ogv" fileSize="244896099" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/304_designing-to-scale-the-story-of-shootq-5.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010DesigningToScaleTheStoryOfShootQ5229.png"></media:thumbnail></item><item><title>Distributed Programming with Pyro (#7)</title><link>http://www.pyvideo.org/video/342/pycon-2010--distributed-programming-with-pyro---7</link><description>&lt;p&gt;Description&lt;/p&gt;
Distributed Programming with Pyro

  
Presented by Alfredo Deza

  
Create distributed code that communicates trivially over the network with
objects that answer as if they were local.

  
Send, receive and manage data with this powerful library. Presentation will
include real life example for restarting a load balanced web instance running
two Apache web servers and a MySQL database.

  
Although Python allows you to perform simple network operations, Pyro creates
a nice layer between core networking essentials and your code, allowing you to
concentrate more in developing your application.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alfredo Deza</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/342/pycon-2010--distributed-programming-with-pyro---7</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/342_distributed-programming-with-pyro-7.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/342_distributed-programming-with-pyro-7.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/342_distributed-programming-with-pyro-7.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010DistributedProgrammingWithPyro7718.png"></media:thumbnail></item><item><title>Diversity as a Dependency (#49)</title><link>http://www.pyvideo.org/video/308/pycon-2010--diversity-as-a-dependency---49</link><description>&lt;p&gt;Description&lt;/p&gt;
Diversity as a Dependency

  
Presented by Anna M Ravenscroft (PSF)

  
The PSF recently adopted a diversity statement. While some argue that we
should do this just because it's "the right thing to do", others question why
we, as a technical community, should even worry about diversity. This talk
addresses the diversity question, not in moralistic or ethical terms, but in
pragmatic ones. Studies on creativity and productivity demonstrate the
potential benefits of diversity for the Python community. Making Python the
best language it can be is not merely helped by increasing diversity, but may
be dependent on diversity.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna M Ravenscroft</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/308/pycon-2010--diversity-as-a-dependency---49</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/308_diversity-as-a-dependency-49.ogv" length="581917204" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/308_diversity-as-a-dependency-49.ogv" fileSize="581917204" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/308_diversity-as-a-dependency-49.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010DiversityAsADependency49113.png"></media:thumbnail></item><item><title>Django Deployment Workshop</title><link>http://www.pyvideo.org/video/236/pycon-2010--django-deployment-workshop</link><description>&lt;p&gt;Description&lt;/p&gt;
Django Deployment Workshop

Presented by Jacob Kaplan-Moss

So you've written a Django site... now what? Writing the application is just
the beginning; now you've got to put it into production! In this hands-on
workshop we'll walk through the creation of a full Django deployment
environment running on a cluster of (virtual) machines.

This class will introduce students to a wide variety of technologies,
including Amazon's EC2 and S3, Fabric, Varnish, nginx, mod_wsgi, memcached,
PostgreSQL, pgpool, pg_standby, and more.

By the end of the class, each student will have created an environment
featuring:

  * Multiple levels of caching and load balancing.
  * Multiple web application servers.
  * Shared media servers.
  * Redundant replicated database servers.
  * Separate caching servers.

We'll create this whole stack on Amazon EC2 virtual machines, so students will
be able to take home a complete copy of all the deployment configuration for
future review at their leisure.

Note: the example application used in this class with be a Django site, and
the class assumes at least a moderate comfort level with Django. However, the
tools and techniques apply just as well to other Python web frameworks, so
users of other tools will likely be able to follow along fairly easily.

# Intended Audience

Intermediate to advanced Django users with sites nearing or in production.
Python developers using other web frameworks will likely be able to follow
along -- see the note in the summary, above.

# Class Outline

  * Introduction: the deployment question
  * Application server: mod_wsgi
  * Database server: PostgreSQL
  * Automated deployment with Fabric
  * Multiple web servers; load balancing with nginx
  * Adding memcached
  * Database connection middleware: pgpool
  * Database redundancy: warm standby
  * Upstream caching: Varnish
  * Final load testing: how'd we do?

# Requirements

Students will need a computer and Amazon EC2 and S3 accounts, and will be
asked to familiarize themselves with the process of starting and stopping EC2
virtual machines before the class.

[http://us.pycon.org/2010/tutorials/kaplanmoss_django/](http://us.pycon.org/20
10/tutorials/kaplanmoss_django)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Kaplan-Moss</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/236/pycon-2010--django-deployment-workshop</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/236_django-deployment-workshop.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-DjangoDeploymentWorkshop734-407.jpg"></media:thumbnail></item><item><title>Django in Depth</title><link>http://www.pyvideo.org/video/291/pycon-2010--django-in-depth</link><description>&lt;p&gt;Description&lt;/p&gt;
Django In Depth

Presented by James Bennett

Most books, tutorials and other documentation for Django take a high-level
approach to its components and APIs, and so barely scratch the surface of the
framework. In this tutorial, however, we'll take a detailed look under the
hood, covering everything from the guts of the ORM to the innards of the
template system to how the admin interface really works.

Whether you're the newest of newbies or the most seasoned of application
developers, you'll come away with a deeper knowledge of Django, and a plethora
of new tips and tricks you can use in your own applications.

Intended Audience

Beginning to intermediate users of the Django web framework.

Class Outline

  * Introduction: going beyond Django's documentation 
  * Under the hood of the ORM 
  * Forms and validation 
  * Inside the template system 
  * How Django processes requests 
  * Understanding the view layer 
  * The admin interface, inside and out 
  * Q&amp;A;

[VIDEO HAS ISSUES: Cam frezz from time to time]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Bennett</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/291/pycon-2010--django-in-depth</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/291_django-in-depth.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/291_django-in-depth.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/291_django-in-depth.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010DjangoInDepth285-671.jpg"></media:thumbnail></item><item><title>Dude, Where's My Database? (#133)</title><link>http://www.pyvideo.org/video/300/dude-wheres-my-database-133</link><description>&lt;p&gt;Description&lt;/p&gt;
Dude, Where's My Database?

  
Presented by Eric Florenzano (Django)

  
There are so many great open source databases out on the market right now--
we're really in the golden age of databases. Fortunately, Python can talk to
virtually all of them. With so many databases at our disposal, how do we
choose which one to use for our particular use case?

  
This talk will go over the many different classes of databases, introduce some
of the particular implementations for each class of database, and describe the
strengths and weaknesses of each. By weighing the pros and cons of each type
of database, the speaker hopes to dispel the many rumors and misconceptions
that people have about what's out there today.

  
[VIDEO HAS ISSUES: Audio cuts out at about 20 seconds in, then gets out of
sync until around 3:10.]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Florenzano</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/300/dude-wheres-my-database-133</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/300_dude-where-s-my-database-133.ogv" length="188382147" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/300_dude-where-s-my-database-133.ogv" fileSize="188382147" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/300_dude-where-s-my-database-133.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010DudeWheresMyDatabase133159.png"></media:thumbnail></item><item><title>Easy command-line applications with cmd and cmd2 (#153)</title><link>http://www.pyvideo.org/video/306/pycon-2010--easy-command-line-applications-with-c</link><description>&lt;p&gt;Description&lt;/p&gt;
Easy command-line applications with cmd and cmd2

  
Presented by Catherine Devlin (IntelliTech Systems)

  
The Python Standard Library's cmd module makes it absurdly simple to write
command-line interpreters - non-graphical programs that communicate with users
interactively through a simple text interface. The third-party cmd2 module
adds high-powered "batteries" to applications written for cmd.

  
This presentation teaches attendees how to easily make their own powerful
command-line interpreters with cmd and cmd2. It also describes the tricks cmd2
uses for some of its more interesting functionality so that they can implement
them in their own programs (even unrelated ones). It ends with a brief
demonstration of sqlpython, a cmd2-based application that improves on existing
ad-hoc SQL applications.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Catherine Devlin</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/306/pycon-2010--easy-command-line-applications-with-c</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/306_easy-command-line-applications-with-cmd-and-cmd2-153.ogv" length="162264357" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/306_easy-command-line-applications-with-cmd-and-cmd2-153.ogv" fileSize="162264357" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/306_easy-command-line-applications-with-cmd-and-cmd2-153.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010EasyCommandlineApplicationsWithCmdAndCmd2153294.png"></media:thumbnail></item><item><title>Ecommerce in Python: Introduction to Satchmo and GetPaid (#146)</title><link>http://www.pyvideo.org/video/336/pycon-2010--ecommerce-in-python--introduction-to-</link><description>&lt;p&gt;Description&lt;/p&gt;
Ecommerce in Python: Introduction to Satchmo and GetPaid

  
Presented by Christopher Johnson (ifPeople); Chris Moffitt (Satchmo)

  
The world of open source ecommerce is dominated by PHP-based solutions.
However, in the past few years, there has been significant progress in
building robust python-based alternatives. This discussion will cover 2
different python approaches. Satchmo is based on the Django framework and
GetPaid is a framework for credit card processing in Plone. These solutions
share a similar philosophy and approach but can be used in very different
ways. This discussion will increase awareness of these applications, feature
successful projects, explain how they can be used in your projects, and help
you connect with the open source community.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Moffitt,Christopher Johnson</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/336/pycon-2010--ecommerce-in-python--introduction-to-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/336_ecommerce-in-python-introduction-to-satchmo-and-getpaid-146.ogv" length="438690455" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/336_ecommerce-in-python-introduction-to-satchmo-and-getpaid-146.ogv" fileSize="438690455" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/336_ecommerce-in-python-introduction-to-satchmo-and-getpaid-146.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010EcommerceInPythonIntroductionToSatchmoAndGetPai890.png"></media:thumbnail></item><item><title>Eventlet: Asynchronous I/O with a synchronous interface (#141)</title><link>http://www.pyvideo.org/video/244/pycon-2010--eventlet--asynchronous-i-o-with-a-syn</link><description>&lt;p&gt;Description&lt;/p&gt;
Eventlet: Asynchronous I/O with a synchronous interface

Presented by Donovan Preston

Network servers which scale to thousands of simultaneous connections have
always been possible in Python thanks to libraries such as asyncore and
twisted. More recently, FriendFeed's new open source project Tornado has
stirred debate in this area. These libraries allow a Python process to scale
to many simultaneous connections using non-blocking I/O (also known as
asynchronous I/O). However these projects require that the programmer learn a
custom API to abstract away the complexities of using a callback-style API.

Eventlet uses greenlet, which provides coroutines as described in "The Art of
Computer Programming", to implement efficient cooperative concurrency while
retaining synchronous semantics. Eventlet also provides an implementation of
the standard library's socket module. Code written to use Python's standard
socket library can be transparently converted to use nonblocking I/O and green
threads with eventlet. This leads to much greater code reuse and programmer
efficiency.

[http://www.eventlet.net/](http://www.eventlet.net/)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Donovan Preston</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/244/pycon-2010--eventlet--asynchronous-i-o-with-a-syn</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/244_eventlet-asynchronous-i-o-with-a-synchronous-interface-141.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010EventletAsynchronousIOWithASynchronousInterface667-479.jpg"></media:thumbnail></item><item><title>Evolving Your Framework Under Fire (#150)</title><link>http://www.pyvideo.org/video/303/evolving-your-framework-under-fire-150</link><description>&lt;p&gt;Description&lt;/p&gt;
Evolving your framework under fire

  
Presented by Tres Seaver (Agendaless Consulting, Inc.)

  
Writing frameworks is fun, which is why we have so many of them in the Python
web development world. Making your shiny new framework stand up under the load
of a demanding application can be painful, but can lead to substantial
improvements.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tres Seaver</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/303/evolving-your-framework-under-fire-150</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/303_evolving-your-framework-under-fire-150.ogv" length="139828651" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/303_evolving-your-framework-under-fire-150.ogv" fileSize="139828651" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/303_evolving-your-framework-under-fire-150.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010EvolvingYourFrameworkUnderFire150602.png"></media:thumbnail></item><item><title>Extending Java Applications with Jython (#65)</title><link>http://www.pyvideo.org/video/329/pycon-2010--extending-java-applications-with-jyth</link><description>&lt;p&gt;Description&lt;/p&gt;
Extending Java Applications with Jython

  
Presented by Frank J Wierzbicki (Jython)

  
Jython is an implementation of Python for the JVM. This talk covers the
options available for integrating Jython and Java code, especially Java
calling into Jython, since this is the trickier case. This talk will also
cover some Java specific deployment options, such as deploying your Jython
application as a jar file. Jar files allow you to package Java/Jython
applications into a single archive. In many environments a user can click on a
jar file to launch the contained application.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Frank J Wierzbicki</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/329/pycon-2010--extending-java-applications-with-jyth</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/329_extending-java-applications-with-jython-65.ogv" length="223855685" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/329_extending-java-applications-with-jython-65.ogv" fileSize="223855685" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/329_extending-java-applications-with-jython-65.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ExtendingJavaApplicationsWithJython65790.png"></media:thumbnail></item><item><title>Faster Python Programs Through Optimization</title><link>http://www.pyvideo.org/video/293/pycon-2010--faster-python-programs-through-optimi</link><description>&lt;p&gt;Description&lt;/p&gt;
Faster Python Programs Through Optimization

Mike MÃ¼ller

Although Python programs may be slow for certain types of tasks, there are
many different ways to improve performance. This tutorial will introduce
optimization strategies and demonstrate techniques to implement them. Another
of the objectives of this course is to give participants the ability to decide
what might be the optimal solution for a certain performance problem.
Participants are strongly recommended to bring laptops because all techniques
are introduced with examples and exercises.

Intended Audience

Python programmers with intermediate knowledge.

Class Outline

  * How Fast is Fast Enough? 
  * Optimization Guidelines 
    * Premature optimization 
    * Optimization rules 
    * Seven steps for incremental optimization 
  * Optimization strategy 
    * Measuring in stones 
    * Profiling CPU usage 
    * Profiling memory usage 
  * Algorithms and Anti-patterns 
    * String Concatenation 
    * List and Generator Comprehensions 
    * The Right Data Structure 
    * Caching 
  * The Example 
  * Testing Speed 
  * Pure Python 
  * Meet Psyco, the JIT 
  * Numpy for Numeric Arrays 
  * Using multiple CPUs with pyprocessing/multiprocessing 
  * Combination of optimization strategies 
  * Results of Different Example Implementations 

The following third-party packages are needed:

  * psyco (version 1.5.2 or higher) 
  * numpy (version 1.2 or higher) 
  * pyprocessing (2.5 or lower only) 
  * Guppy_PE framework 

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/293/pycon-2010--faster-python-programs-through-optimi</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/293_faster-python-programs-through-optimization.ogv" length="1158385595" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/293_faster-python-programs-through-optimization.ogv" fileSize="1158385595" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/293_faster-python-programs-through-optimization.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010FasterPythonProgramsThroughOptimization658.png"></media:thumbnail></item><item><title>Hacking the Social Web with Python</title><link>http://www.pyvideo.org/video/286/pycon-2010--hacking-the-social-web-with-python</link><description>&lt;p&gt;Description&lt;/p&gt;
Open Stack: Hacking the Social Web

Presented by David Recordon/Mike Malone

In this tutorial we'll explain what the Open Stack is and how you can use
tools like OAuth, OpenID, and Portable Contacts to integrate your app with the
rest of the web. We'll cover each component in depth, and walk through example
Python implementations for a variety of scenarios.

Intended Audience

  * Beginning to intermediate Python programmers interested in Web Development 
  * Python programmers who provide or consumer web service APIs 

Class Outline

  * Intro: what is the "Open Stack" 
  * Working with HTTP in Python 
  * Working with responses: JSON, XML, Atom, RSS, HTML 
  * Decentralized identity with OpenID 
    * Implementing a Provider in Python 
    * Implementing a Relying Party in Python 
  * Delegated authorization with OAuth 
    * Implementing a Provider in Python 
    * Implementing a Consumer in Python 
  * Exchanging contacts with Portable Contacts 
  * Aggregating activity with Activity Streams 
  * Discovering how to communicate: LRDD + XRD 
  * Making markup structured: microformats 
  * The future of the Open Stack 
  * Learn more &amp; get involved: resources and communities 
  * Q&amp;A;

Requirements

Some experience doing web development or working with web service APIs

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Recordon,Mike Malone</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/286/pycon-2010--hacking-the-social-web-with-python</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/286_hacking-the-social-web-with-python.ogv" length="923087859" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/286_hacking-the-social-web-with-python.ogv" fileSize="923087859" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/286_hacking-the-social-web-with-python.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010HackingTheSocialWebWithPython694-349.jpg"></media:thumbnail></item><item><title>Hg and Git : Can't we all just get along? (#154)</title><link>http://www.pyvideo.org/video/239/pycon-2010--hg-and-git---can--39-t-we-all-just-ge</link><description>&lt;p&gt;Description&lt;/p&gt;
Hg and Git: Can't we all just get along?

Presented by Scott Chacon

There is a fair amount of unnecessary animosity between developers about
version control systems, especially between Mercurial and Git users. In
reality, these two systems are very similar and can actually cooperate pretty
well. In this talk we will show just how similar Git and Mercurial are, look
at some of their technical differences, and see how they can work together by
looking at hg-git, the bidirectional Git/Mercurial bridge, implemented in
Python.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Chacon</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/239/pycon-2010--hg-and-git---can--39-t-we-all-just-ge</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/239_hg-and-git-can-t-we-all-just-get-along-154.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010HgAndGitCantWeAllJustGetAlong154454-979.jpg"></media:thumbnail></item><item><title>How and why Python is being used to by the Military to model real-world battlefield scenarios (#13)</title><link>http://www.pyvideo.org/video/318/pycon-2010--how-and-why-python-is-being-used-to-b</link><description>&lt;p&gt;Description&lt;/p&gt;
How and why Python is being used by the Military to model real-world
battlefield scenarios

  
Mr. Eric Silverman (ALATEC Inc. / US Army)

  
Leveraging the power of Python, military analyst and software developers out
at White Sands Missile Range in New Mexico have converted a closed-form model,
which was developed for scripted Cold War scenarios, into a more sophisticated
and adaptive system. COMBATXXI is a premium wargaming model, which now is
poised to answer questions that have a direct effect on military operations
currently in theater, in large part because of Python.

  
[VIDEO HAS ISSUES: High pitched noise on audio]

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/318/pycon-2010--how-and-why-python-is-being-used-to-b</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/318_how-and-why-python-is-being-used-to-by-the-military-to-model-real-world-battlefield-scenarios-13.ogv" length="118955955" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/318_how-and-why-python-is-being-used-to-by-the-military-to-model-real-world-battlefield-scenarios-13.ogv" fileSize="118955955" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/318_how-and-why-python-is-being-used-to-by-the-military-to-model-real-world-battlefield-scenarios-13.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010HowAndWhyPythonIsBeingUsedToByTheMilitaryTo898.png"></media:thumbnail></item><item><title>How Are Large Applications Embedding Python? (#6)</title><link>http://www.pyvideo.org/video/279/pycon-2010--how-are-large-applications-embedding-</link><description>&lt;p&gt;Description&lt;/p&gt;
How Are Large Applications Embedding Python?

Presented by Peter Shinners

An examination of the ways Python is being embedded and deployed in the large
applications used for computer graphics; like Renderman, Maya, Houdini, and
Nuke.

This session is for those interested in the popular techniques of embedding
the Python interpreter. The survey will determine the best practices for
embedding Python at the core of a large application.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Shinners</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/279/pycon-2010--how-are-large-applications-embedding-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/279_how-are-large-applications-embedding-python-6.ogv" length="150904861" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/279_how-are-large-applications-embedding-python-6.ogv" fileSize="150904861" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/279_how-are-large-applications-embedding-python-6.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010HowAreLargeApplicationsEmbeddingPython6975-926.jpg"></media:thumbnail></item><item><title>How does Enthought distribute packages? (#108)</title><link>http://www.pyvideo.org/video/278/pycon-2010--how-does-enthought-distribute-package</link><description>&lt;p&gt;Description&lt;/p&gt;
How does Enthought distribute packages?

  
Presented by Dr. Ilan Schnell

  
This presentation gives an overview of how packages are build and distributed
for different operating systems in the Enthought Python Distribution.
Enstaller (http://pypi.python.org/pypi/Enstaller/4.0.0) is a tool I wrote for
installing egg-based packages, which are not necessarily Python packages, such
as SWIG or HDF5. I will discuss the architecture of Enstaller, and in
particular the egg-based distribution format.

  
[VIDEO HAS ISSUES: Frezz frame in the start of the video]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Ilan Schnell</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/278/pycon-2010--how-does-enthought-distribute-package</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/278_how-does-enthought-distribute-packages-108.ogv" length="165694547" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/278_how-does-enthought-distribute-packages-108.ogv" fileSize="165694547" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/278_how-does-enthought-distribute-packages-108.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010HowDoesEnthoughtDistributePackages108674-826.jpg"></media:thumbnail></item><item><title>How Python is guiding infrastructure construction in Africa (#84)</title><link>http://www.pyvideo.org/video/337/how-python-is-guiding-infrastructure-construction</link><description>&lt;p&gt;Description&lt;/p&gt;
How Python is guiding infrastructure construction in Africa

  
Presented by Roy Hyunjin Han (InvisibleRoads)

  
A whirlwind tour of the roles of different Python modules in the architecture
of a geospatial infrastructure planning system.

  
We used Python to transform an elaborate, multistep process for finding and
connecting households in villages into a single, streamlined planning
experience. I'll explain how Python's freely available libraries empowered a
small team of developers under a minimal budget and timeframe. Now just
imagine if we had to do the same thing with Java.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roy Hyunjin Han</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/337/how-python-is-guiding-infrastructure-construction</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/337_how-python-is-guiding-infrastructure-construction-in-africa-84.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/337_how-python-is-guiding-infrastructure-construction-in-africa-84.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/337_how-python-is-guiding-infrastructure-construction-in-africa-84.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010HowPythonIsGuidingInfrastructureConstructionInA743.png"></media:thumbnail></item><item><title>How Python, TurboGears, and MongoDB are Transforming SourceForge.net (#47)</title><link>http://www.pyvideo.org/video/271/pycon-2010--how-python--turbogears--and-mongodb-a</link><description>&lt;p&gt;Description&lt;/p&gt;
How Python, TurboGears, and MongoDB are transforming SourceForge.net

  
Presented by Rick Copeland

  
In mid-2009, SourceForge embarked on a quest to modernize our websites,
starting with the download (consumer) flow on SourceForge.net. A small team
was tasked the rewrite, converting a site originally implemented in PHP with
Python. Using a customized TurboGears as a core component, the rewrite was
completed and the new site deployed in under 2 months. This talk tells the
story of that rewrite and explains our new technology stack, which includes
TurboGears, MongoDB, and Jinja templates.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rick Copeland</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/271/pycon-2010--how-python--turbogears--and-mongodb-a</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/271_how-python-turbogears-and-mongodb-are-transforming-sourceforge-net-47.ogv" length="126931888" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/271_how-python-turbogears-and-mongodb-are-transforming-sourceforge-net-47.ogv" fileSize="126931888" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/271_how-python-turbogears-and-mongodb-are-transforming-sourceforge-net-47.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010HowPythonTurboGearsAndMongoDBAreTransformingSou564-509.jpg"></media:thumbnail></item><item><title>How to write cross-interpreter Python programs (#101)</title><link>http://www.pyvideo.org/video/311/pycon-2010--how-to-write-cross-interpreter-python</link><description>&lt;p&gt;Description&lt;/p&gt;
How to write cross-interpreter Python programs

  
Presented by Maciej Fijalkowski (merlinux GmbH, pypy)

  
This talk will cover basics about writing cross-interpreter python programs.
What to do and most of all what not to do. This will help you if you want at
some point in time to run program on for example Java platform or faster
python interpreter, but also if you want to keep it running between CPython
releases.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/311/pycon-2010--how-to-write-cross-interpreter-python</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/311_how-to-write-cross-interpreter-python-programs-101.ogv" length="89924085" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/311_how-to-write-cross-interpreter-python-programs-101.ogv" fileSize="89924085" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/311_how-to-write-cross-interpreter-python-programs-101.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010HowToWriteCrossinterpreterPythonPrograms101432.png"></media:thumbnail></item><item><title>Implementing Domain Specific Languages In Python</title><link>http://www.pyvideo.org/video/251/pycon-2010--implementing-domain-specific-language</link><description>&lt;p&gt;Description&lt;/p&gt;
Implementing Domain Specific Languages In Python

Presented by Sean Jensen-Grey

Intended Audience

Intermediate

Class Outline

  * What are DSLs? Internal/External 
  * Why DSLs? 
  * How can they be expressed in Python? 
  * Mini Language Design 
  * Implementing External DSLs 
  * Web / AI / Enterprise 
  * Testing 
  * Documenting 

Requirements

Students should have their own computer with Python 2.6 installed

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Jensen-Grey</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/251/pycon-2010--implementing-domain-specific-language</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/251_implementing-domain-specific-languages-in-python.ogv" length="1472851836" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/251_implementing-domain-specific-languages-in-python.ogv" fileSize="1472851836" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/251_implementing-domain-specific-languages-in-python.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ImplementingDomainSpecificLanguagesInPython841-952.jpg"></media:thumbnail></item><item><title>Import this, that, and the other thing: custom importers (#9)</title><link>http://www.pyvideo.org/video/341/pycon-2010--import-this--that--and-the-other-thin</link><description>&lt;p&gt;Description&lt;/p&gt;
Import this, that, and the other thing. Custom importers

  
Presented by Brett Cannon

  
Since Python 2.3, the ability has existed to customize the import process so
that one can support code stored in alternative formats, e.g. zipimport and
its support of importing code from a zip file. The aim of this talk is to make
sure you understand how the custom import mechanism works and how to write
your own custom importers using importlib from Python 3.1.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/341/pycon-2010--import-this--that--and-the-other-thin</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/341_import-this-that-and-the-other-thing-custom-importers-9.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/341_import-this-that-and-the-other-thing-custom-importers-9.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/341_import-this-that-and-the-other-thing-custom-importers-9.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ImportThisThatAndTheOtherThingCustomImporters824.png"></media:thumbnail></item><item><title>Interfaces, Adapters and Factories (#181)</title><link>http://www.pyvideo.org/video/347/pycon-2010--interfaces--adapters-and-factories---</link><description>&lt;p&gt;Description&lt;/p&gt;
Interfaces, Adapters, and Factories

  
Presented by Jeff Rush

  
A step-by-step introduction to the idea of object interfaces and adapters
using incremental code examples, based on the zope.interface module. The case
for adaption to ease code brittleness will be made and how we can reason about
interfaces. I'll show how to automatically check code for conformance to your
interfaces and then cover where objects come from, the several kinds of object
factories in Python and how one kind can be based on interfaces.

  
[VIDEO HAS ISSUES: Beginning out of focus]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Rush</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/347/pycon-2010--interfaces--adapters-and-factories---</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/347_interfaces-adapters-and-factories-181.ogv" length="123411601" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/347_interfaces-adapters-and-factories-181.ogv" fileSize="123411601" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/347_interfaces-adapters-and-factories-181.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010InterfacesAdaptersAndFactories181339.png"></media:thumbnail></item><item><title>Internationalizing your Django project (#74)</title><link>http://www.pyvideo.org/video/331/pycon-2010--internationalizing-your-django-projec</link><description>&lt;p&gt;Description&lt;/p&gt;
Internationalizing your Django project

  
Presented by Matt Croydon (Mediaphormedia)

  
Internationalizing your Django application isn't as hard as it sounds. This
session introduces the topic of internationalization and walks through what it
takes to use Django's internationalization tools, including how to mark
models, views, and templates for translation and how to enable
internationalization in your application. We will also step through localizing
your application in a new language.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Croydon</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/331/pycon-2010--internationalizing-your-django-projec</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/331_internationalizing-your-django-project-74.ogv" length="186905210" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/331_internationalizing-your-django-project-74.ogv" fileSize="186905210" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/331_internationalizing-your-django-project-74.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010InternationalizingYourDjangoProject74399.png"></media:thumbnail></item><item><title>Introduction to Django</title><link>http://www.pyvideo.org/video/255/pycon-2010--introduction-to-django</link><description>&lt;p&gt;Description&lt;/p&gt;
Introduction to Django

Presented by Chander Ganesan

The Django framework is a fast, flexible, easy to learn, and easy to use
framework for designing and deploying web sites and services using Python. In
this session, we'll cover the fundamentals of development with Django,
generate a Django data model, and put together a simple web site using the
framework.

Intended Audience

Beginner to Intermediate Python programmers

Class Outline

  * Django Overview and Basic Introduction (~ 5 min) 
  * Downloading &amp; Installing Dango (~ 10 min) 
  * Creating a new project (~ 5 min) 
  * Choosing a database (~ 5 min) 
  * Creating a new application (~ 5 min) 
  * Installing &amp; Using Django contrib applications (~ 7 min) 
  * Overview of Django flow (i.e., URLconf expression, view function, HTTPResponse object, etc.) (~7 min) 
  * Generating Simple Dango Views (~ 5 min) 
  * Configuring a URLConf for basic views (~ 5 min) 
  * Creating Django Templates (template syntax, common filters and tags, loops, etc) (~ 10 min) 
  * Creating &amp; using Template Context objects (~ 5 min) 
  * Introduction to Django Models (~ 10 min) 
  * Defining basic Django models (~ 15 min) 
  * Understanding basic model fields &amp; options (~ 15 min) 
  * Generating &amp; Reviewing Model SQL (~ 5 min) 
  * Adding data to a model (~ 7 min) 
  * Simple data retrieval using models (~ 7 min) 
  * Working with QUerySets (filters, slicing, ordering, common methods) (~ 10 min) 
  * Overview of Q objects (~ 5 min) 
  * Using the Admin interface (~ 10 min) 
  * Using Generic views (~ 10 min) 
  * Access control with sessions &amp; users (~ 10 min) 

Requirements

  * Attendees wishing to try the examples should have Python 2.6 pre-installed ([http://www.python.org](http://www.python.org)) 
  * Attendees should have Django pre-downloaded or pre-installed. ([http://www.djangoproject.com](http://www.djangoproject.com)) 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chander Ganesan</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/255/pycon-2010--introduction-to-django</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/255_introduction-to-django.ogv" length="965199376" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/255_introduction-to-django.ogv" fileSize="965199376" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/255_introduction-to-django.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010IntroductionToDjango732.png"></media:thumbnail></item><item><title>Introduction to Internet Programming</title><link>http://www.pyvideo.org/video/249/pycon-2010--introduction-to-internet-programming</link><description>&lt;p&gt;Description&lt;/p&gt;
Introduction to Internet Programming (Wesley J. Chun)

Python is an interpreted, cross-platform, object-oriented programming language
that is popular for a wide range of applications, one of which is Internet
programming. This tutorial introduces current Python programmers to 3-4
distinct areas of Internet programming, each in self-contained lectures with a
demonstration of code following each lecture topic. Intended Audience

Developers familiar with Python who are interested in exploring client/server
network programming with sockets, Internet client (FTP, NNTP, e-mail),
development and web programming.

Class Outline

Python is an interpreted, cross-platform, object-oriented programming language
that is popular for a wide range of applications, one of which is Internet
programming. This tutorial introduces current Python programmers to distinct
areas of Internet programming, each in self-contained lectures with a
demonstration of code following these lecture topics (each ranging from
20-60min in length):

  * Network Programming using Sockets 
  * Internet Client Programming 
  * Web/CGI Programming and Concepts 
  * Intro to Django (time-permitting) 

We start at the lowest layer, where one creates communication channels
directly between clients and servers using sockets then move up one level to
discuss well-known Internet protocols such as FTP. Then we move up even higher
to address the concept of web programming, including a description and purpose
of all "CGI" interfaces, and finally, if there's time, to give a high-level
quick introduction to one of the most popular Python web frameworks today,
Django. We'll try build and implement a simple blog in 15-20 minutes! This is
especially for those of you who couldn't sign up for the intro to Django
tutorial at this PyCon which will likely be full.

About the Instructor

WESLEY J. CHUN, MSCS, is the author of Prentice Hall's bestseller, "Core
Python Programming", its video training course, "Python Fundamentals"
(LiveLessons DVD), and co-author of "Python Web Development with Django". In
addition to being a software architect and Developer Advocate for Google, he
runs CyberWeb, a consulting business specializing in Python software
engineering and technical training. He has over 25 years of programming,
teaching, and writing experience, including more than a decade of Python.
While at Yahoo!, he helped create Yahoo! Mail and Yahoo! People Search using
Python. He holds degrees in Computer Science, Mathematics, and Music from the
University of California.

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/249/pycon-2010--introduction-to-internet-programming</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/249_introduction-to-internet-programming.ogv" length="1431136501" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/249_introduction-to-internet-programming.ogv" fileSize="1431136501" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/249_introduction-to-internet-programming.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010IntroductionToInternetProgramming900-958.jpg"></media:thumbnail></item><item><title>Introduction to SQLAlchemy</title><link>http://www.pyvideo.org/video/252/pycon-2010--introduction-to-sqlalchemy</link><description>&lt;p&gt;Description&lt;/p&gt;
Introduction to SQLAlchemy

Presented by Johnathan Ellis

SQLAlchemy is the premier SQL toolkit for Python. SQLAlchemy exposes the full
power of SQL while remaining easy to use for the basics, and is flexible
enough to work with existing database schemas as well as fresh designs.
SQLAlchemy is used in production by leading Python web frameworks Pylons and
Turbogears as well as many other web and non-web developers.

This tutorial teaches SQLAlchemy's object-relational mapping to automate
painlessly loading and persisting objects from and to your database, even when
complex relationships exist.

Intended Audience

Python experience: intermediate. You should already have some hands-on
experience with Python and be comfortable reading modern Python code.

SQL experience: beginning. You should know how to SELECT, INSERT, and DELETE,
and how to read queries involving JOINs, but we will only be reading the SQL
generated by SA, not writing our own.

ORM experience: prior experience with an object-relational mapper is not
necessary.

Class Outline

Introduction:

  * Philosophy 
  * SA features 

Fundamentals:

  * Introduction to ORM 
  * Data Mapper pattern vs Active Record 
  * Tables 
  * Mapping basics 

Queries:

  * Conditions, operators 
  * Joins 
  * lazy / eager loading 
  * Relation-based queries 

Sessions &amp; identity map:

  * detatching, attaching objects 
  * Lifecycle relations 

More Mapping:

  * one to one, many to many 
  * backreferences 

Extensions, etc.:

  * DDL 
  * Migrate 
  * FormAlchemy 
  * SqlSoup 
  * Elixir 

Requirements

Laptop with Python 2.5 or 2.6 and SQLAlchemy 0.6 installed. Code samples may
also work with Python 2.4 but will not be tested on that platform. SQLAlchemy
also supports Jython and cPython 3.x, but this tutorial will be using
"classic" cPython.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Johnathan Ellis</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/252/pycon-2010--introduction-to-sqlalchemy</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/252_introduction-to-sqlalchemy.ogv" length="884586519" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/252_introduction-to-sqlalchemy.ogv" fileSize="884586519" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/252_introduction-to-sqlalchemy.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010IntroductionToSQLAlchemy295-517.jpg"></media:thumbnail></item><item><title>Introduction to Traits</title><link>http://www.pyvideo.org/video/235/pycon-2010--introduction-to-traits</link><description>&lt;p&gt;Description&lt;/p&gt;
Introduction to Traits

Presented by Corran Webster

The Traits project allows you to simply add validation, initialization,
delegation, notification and a graphical user interface to Python object
attributes. In this tutorial we will explore the Traits toolset and learn how
to dramatically reduce the amount of boilerplate code you write, do rapid GUI
application development, and understand the ideas which underly other parts of
the Enthought Tool Suite (such as MayaVi and Chaco plotting toolkits).

Traits and the Enthought Tool Suite are open source projects licensed under a
BSD-style license.

Intended Audience

Intermediate to advanced Python programmers

Class Outline

  * Introduction to ETS and Traits 
  * Basic Traits + Trait types + Property Traits + Trait Validation 
  * Traits UI + Basic Traits UI + Tour of the Trait editors + Advanced Trait editors 
  * Notification in Traits + Static notification + Dynamic notification 
  * Advanced Traits UI + Customizing Views, Groups and Items + Traits UI Handlers + Buttons, Menus and Toolbars + Drag and Drop 
  * Q&amp;A;

Requirements

Laptop recommended (any major OS is fine), with the following software
installed:

  * Python 2.5 or 2.6 (www.python.org) 
  * Either wxPython (http://www.wxpython.org/) or PyQt (http://www.riverbankcomputing.co.uk/software/pyqt/intro) 
  * Numpy and Scipy (http://www.scipy.org) 
  * Enthought Tool Suite 3.2 or higher (http://code.enthought.com/projects) 

All required software can be obtained by installing the free trial version of
the Enthought Python Distribution v5 or later
(http://www.enthought.com/products/epd.php).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Corran Webster</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/235/pycon-2010--introduction-to-traits</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/235_introduction-to-traits.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-IntroductionToTraits425-362.jpg"></media:thumbnail></item><item><title>Introduction to Twisted</title><link>http://www.pyvideo.org/video/284/pycon-2010--introduction-to-twisted</link><description>&lt;p&gt;Description&lt;/p&gt;
Introduction to Twisted

Presented by Chander Ganesan

Interested in faster networking with Python? Twisted is an event-driven
networking engine written in Python that allows developers to quickly and
easily develop and deploy network services.

In this tutorial, attendees will learn what twisted is, why to use it, how it
works, and how to install, develop, and deploy simple clients and servers
using Twisted.

Attendees should bring a laptop if possible, to try out code examples in
class.

Intended Audience

Intermediate Python Programmers with an understanding of Pythons object
oriented syntax (classes, inheritance, etc.)

Class Outline

  * Introduction to Twisted (15 min) - Basic Concepts 
    * Event-Driven model, cooperative multi-tasking 
  * Installing Twisted &amp; Verifying Installation (10 min) 
  * Starting the Event loop (10 min) 
  * Timed Events (10 min) 
  * Understanding Twisted Factories &amp; their use (15 min) 
  * Understanding Protocol Objects &amp; their use (15 min) 
  * Creating a simple Twisted Client (25 min) 
    * Using twisted.internet.reactor.connectTCP() 
    * Creating a Client Factory 
    * Creating a Protocol 
  * Creating a simple Twisted Server (Server Factory) (25 min) 
    * Using twisted.internet.reactor.listenTCP() 
    * Creating a Server Factory 
  * Using Twisted SMTP to Send Mail (15 min) 
  * Twisted Web Basics (25 min) 
  * Introduction to the twist Daemonizer &amp; tac files (15 min) 

Requirements

  * An understanding of Object Oriented Python (OOP concepts, inheritance, classes, etc.) 
  * Attendees wishing to try the examples should have Python 2.4 or newer and Twisted pre-installed. 
  * Attendees wishing to try the examples should have Python 2.4 or newer and Twisted pre-downloaded (we'll go over installation) 
  * Twisted may be downloaded at [http://www.twistedmatrix.com/](http://www.twistedmatrix.com)
  * Windows users will require the Win32 extensions for Python as well [http://starship.python.net/crew/mhammond/win32/Downloads.html](http://starship.python.net/crew/mhammond/win32/Downloads.html)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chander Ganesan</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/284/pycon-2010--introduction-to-twisted</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/284_introduction-to-twisted.ogv" length="1005028048" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/284_introduction-to-twisted.ogv" fileSize="1005028048" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/284_introduction-to-twisted.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010IntroductionToTwisted616-750.jpg"></media:thumbnail></item><item><title>Introduction to unittest (a.k.a. PyUnit) (#96)</title><link>http://www.pyvideo.org/video/237/pycon-2010--introduction-to-unittest--a-k-a--pyun</link><description>&lt;p&gt;Description&lt;/p&gt;
Introduction to Unittest (a.k.a. PyUnit)

Presented by Chander K Ganesan

The PyUnit (unittest) unit testing framework provides an easy-to-use set of
tools and techniques to add robust unit testing to your Python code. By
integrating unit testing in their code, developers allow for a robust set of
tools to quickly and easily identify "broken" code.

In this session we'll explore the unittest module and demonstrate how to
leverage PyUnit for unit testing.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chander Ganesan</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/237/pycon-2010--introduction-to-unittest--a-k-a--pyun</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/237_introduction-to-unittest-a-k-a-pyunit-96.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010IntroductionToUnittestAkaPyUnit96996-668.jpg"></media:thumbnail></item><item><title>IronPython Tooling (#67)</title><link>http://www.pyvideo.org/video/319/pycon-2010--ironpython-tooling---67</link><description>&lt;p&gt;Description&lt;/p&gt;
IronPython Tooling

  
Presented by Dino E Viehland (Microsoft)

  
One of the most popular requests for the IronPython team is tooling support.
During this talk Iâ€™ll show you some of the existing tools available to help
create IronPython applications. Iâ€™ll also look at the latest IronPython
features which can help you debug, profile and improve your applications.
Iâ€™ll also compare and contrast these with the solutions available for
CPython that you may already be familiar with.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dino E Viehland</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/319/pycon-2010--ironpython-tooling---67</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/319_ironpython-tooling-67.ogv" length="86436947" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/319_ironpython-tooling-67.ogv" fileSize="86436947" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/319_ironpython-tooling-67.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010IronPythonTooling67763.png"></media:thumbnail></item><item><title>Keynote: Building the Python Community</title><link>http://www.pyvideo.org/video/290/pycon-2010--keynote--building-the-python-communit</link><description>&lt;p&gt;Description&lt;/p&gt;
Keynote: Building the Python Community

  
Presented by Steve Holden

  
Steve addresses the Python community, thanks helpers for PyCon 2010, and talks
about the PSF and where it's at.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Holden</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/290/pycon-2010--keynote--building-the-python-communit</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/290_keynote-building-the-python-community.ogv" length="70625813" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/290_keynote-building-the-python-community.ogv" fileSize="70625813" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/290_keynote-building-the-python-community.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010KeynoteBuildingThePythonCommunity114.png"></media:thumbnail></item><item><title>Keynote: Cadence, Quality and Design</title><link>http://www.pyvideo.org/video/273/pycon-2010--keynote--cadence--quality-and-design</link><description>&lt;p&gt;Description&lt;/p&gt;
Keynote: Cadence, Quality and Design

  
Presented by Mark Shuttleworth

  
Talks about things we can do as a community to accelerate the development of
software, increase collaboration, and build better applications. Approaches
this by talking about cadence, quality and design.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Shuttleworth</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/273/pycon-2010--keynote--cadence--quality-and-design</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/273_keynote-cadence-quality-and-design.ogv" length="148434573" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/273_keynote-cadence-quality-and-design.ogv" fileSize="148434573" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/273_keynote-cadence-quality-and-design.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010KeynoteCadenceQualityAndDesign660-721.jpg"></media:thumbnail></item><item><title>Keynote: Relentlessly Pursuing Opportunities With Python, or why the AIs will Spare Us All!</title><link>http://www.pyvideo.org/video/263/pycon-2010--keynote--relentlessly-pursuing-opport</link><description>&lt;p&gt;Description&lt;/p&gt;
Keynote: Relentlessly pursuing opportunities with Python, or why the AIs will
Spare us all!

  
Presented by Antonio Rodriguez

  
Talks about how in every startup, success is defined by how many people you
can get to hack.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Rodriguez</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/263/pycon-2010--keynote--relentlessly-pursuing-opport</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/263_keynote-relentlessly-pursuing-opportunities-with-python-or-why-the-ais-will-spare-us-all.ogv" length="162565085" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010KeynoteRelentlesslyPursuingOpportunitiesWithPytho562-469.jpg"></media:thumbnail></item><item><title>Keynote: State of CPython</title><link>http://www.pyvideo.org/video/267/keynote-state-of-cpython</link><description>&lt;p&gt;Description&lt;/p&gt;
Uses the Twitter feed for PyCon and a floor mic for a Q&amp;A; session covering
the state of CPython and what's in the future.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum,Steve Holden</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/267/keynote-state-of-cpython</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/267_keynote-state-of-cpython.ogv" length="222198009" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/267_keynote-state-of-cpython.ogv" fileSize="222198009" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/267_keynote-state-of-cpython.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010KeynoteStateOfCPython844-859.jpg"></media:thumbnail></item><item><title>Keynote: State of PyPy</title><link>http://www.pyvideo.org/video/266/pycon-2010--keynote--state-of-pypy</link><description>&lt;p&gt;Description&lt;/p&gt;
Keynote: State of PyPy

  
Presented by Maciej Fijalkowski

  
Talks about the current state of PyPy.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/266/pycon-2010--keynote--state-of-pypy</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/266_keynote-state-of-pypy.ogv" length="32758929" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/266_keynote-state-of-pypy.ogv" fileSize="32758929" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/266_keynote-state-of-pypy.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010KeynoteStateOfPyPy184-324.jpg"></media:thumbnail></item><item><title>Keynote: State of Unladen Swallow</title><link>http://www.pyvideo.org/video/262/pycon-2010--keynote--state-of-unladen-swallow</link><description>&lt;p&gt;Description&lt;/p&gt;
Keynote: State of Unladen Swallow

  
Presented by Collin Winter

  
Talks about the current state of Unladen Swallow.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Collin Winter</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/262/pycon-2010--keynote--state-of-unladen-swallow</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/262_keynote-state-of-unladen-swallow.ogv" length="32311708" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/262_keynote-state-of-unladen-swallow.ogv" fileSize="32311708" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/262_keynote-state-of-unladen-swallow.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010KeynoteStateOfUnladenSwallow347-122.jpg"></media:thumbnail></item><item><title>Learning Hosting Best-Practices From WebFaction (#57)</title><link>http://www.pyvideo.org/video/315/pycon-2010--learning-hosting-best-practices-from-</link><description>&lt;p&gt;Description&lt;/p&gt;
Learning Hosting Best-Practices From WebFaction

  
Brandon Craig Rhodes (Rhodes Mill Studios, Inc.)

  
The rise of WebFaction has been dramatic in the world of Python-friendly
hosting services. What are the secrets to getting the most out of their
features? From the point of view of a customer with no other affiliation with
WebFaction â€” as a customer advising other customers â€” this talk offers
lessons learned in using WebFaction to host everything from lone static
content to multiple Python web applications and services co-existing together.
WebFaction uses some unique techniques to support both user-local *and*
application-local Python packages. Should you use their special installation
techniques, or install and use virtualenv on your own initiative? Learn the
trade-offs, and learn how *not* to get yourself in trouble while running
``easy_install`` on WebFaction, my favorite hosting service.

  
[VIDEO HAS ISSUES: Audio slightly clipping]

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/315/pycon-2010--learning-hosting-best-practices-from-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/315_learning-hosting-best-practices-from-webfaction-57.ogv" length="299133138" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/315_learning-hosting-best-practices-from-webfaction-57.ogv" fileSize="299133138" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/315_learning-hosting-best-practices-from-webfaction-57.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010LearningHostingBestPracticesFromWebFaction57693.png"></media:thumbnail></item><item><title>Managing the world's oldest Django project (#80)</title><link>http://www.pyvideo.org/video/345/pycon-2010--managing-the-world--39-s-oldest-djang</link><description>&lt;p&gt;Description&lt;/p&gt;
Managing the world's oldest Django project

  
Presented by James Bennett

  
Or, "how we cut 40,000 lines of code and learned to love unit testing."

  
This talk will cover some of the development history behind Ellington, the CMS
which spawned the open-source Django web framework, and some of the issues
involved in developing and maintaining a codebase of this age and size.
Highlights include branch management, the advantages of open-sourcing non-
critical functionality, the pain of porting and the joy that can only be found
in a passing test suite.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Bennett</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/345/pycon-2010--managing-the-world--39-s-oldest-djang</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/345_managing-the-world-s-oldest-django-project-80.ogv" length="303493475" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/345_managing-the-world-s-oldest-django-project-80.ogv" fileSize="303493475" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/345_managing-the-world-s-oldest-django-project-80.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ManagingTheWorldsOldestDjangoProject80830.png"></media:thumbnail></item><item><title>Mastering Python 3 I/O (part 1)</title><link>http://www.pyvideo.org/video/289/pycon-2010--mastering-python-3-i-o</link><description>&lt;p&gt;Description&lt;/p&gt;
Mastering Python 3 I/O

  
Presented by David Beazley

  
As most Python programmers know, Python 3 breaks backwards compatibility with
Python 2 in a number of significant ways. Although guides to Python 3 tend to
focus on superficial incompatibilities such as the new print function, changes
to exception handling, or new language features, the most substantial changes
concern the strict separation of Unicode and bytes as well as the new I/O
stack. Not only do these changes have far-reaching effects throughout the
standard library, but changes to I/O are likely to be the most major source of
problems for anyone porting an existing Python application to Python 3. In
this tutorial, we're going to take a top-to-bottom tour of the entire Python 3
I/O system. We'll focus on how to properly handle both text and binary data,
changes to standard library modules, examine advanced features such as the
buffer API, perform some performance experiments, and end with practical
advice for programmers working on porting applications from Python 2 to 3.
Intended Audience

  
Intermediate to advanced Python programmers who are either developing new
applications or contemplating a migration to Python 3. Attendees should
already be familiar with the basics of Python programming including standard
datatypes and commonly used library modules. A background in systems
programming topics such as file handling, subprocesses, and socket programming
is also recommended. Class Outline

  * Introducing Python 3 (with a focus on I/O) 
  * Text Processing 
  * Binary Data Handling 
  * Dealing with System Interfaces and External Programs 
  * The New io library 
  * Network programming 
  * The revised buffer API and direct I/O 
  * Porting from Python 2 to 3. 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/289/pycon-2010--mastering-python-3-i-o</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/289_mastering-python-3-i-o.ogv" length="411662419" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/289_mastering-python-3-i-o.ogv" fileSize="411662419" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/289_mastering-python-3-i-o.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010MasteringPython3IO499.png"></media:thumbnail></item><item><title>Mastering Team Play: Four powerful examples of composing Python tools (#184)</title><link>http://www.pyvideo.org/video/307/pycon-2010--mastering-team-play--four-powerful-ex</link><description>&lt;p&gt;Description&lt;/p&gt;
Mastering Team Play: Four powerful examples of composing Python tools

  
Presented by Raymond Hettinger

  
Starts with a quick review of the performance characteristics of major
individual tools in Python: bisect, heapq, lists, deques, sets, frozensets,
class structures, sorts, and weakreferences. Show how these tools can be
powerfully combined to create elegant solutions to four hard problems.

  1. Random sampling: when one data structure isn't enough. Discuss how the nature of the problem dictates when to use one of two alternate data structures. 
  2. Ordered dictionaries: with the right compostion of dictionaries, linked lists, and weak references, a dictionary can remember its insertion order without any impact on its big-Oh running times. 
  3. NFA to DFA conversion. The classic, but difficult, algorithm for lexical analysis becomes simple when composing Python's dicts and frozensets. 
  4. Running median: the obvious approaches are horribly slow. The problem centers around how to efficiently maintain sorted data while advancing a large sliding window one value at a time. A list of deques provides a dramatic and scalable improvement in running time. 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/307/pycon-2010--mastering-team-play--four-powerful-ex</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/307_mastering-team-play-four-powerful-examples-of-composing-python-tools-184.ogv" length="492820610" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010MasteringTeamPlayFourPowerfulExamplesOfComposin150.png"></media:thumbnail></item><item><title>Modern version control: Mercurial internals (#113)</title><link>http://www.pyvideo.org/video/238/pycon-2010--modern-version-control--mercurial-int</link><description>&lt;p&gt;Description&lt;/p&gt;
Modern version control: Mercurial internals

Presented by Dirkjan Ochtman

In this talk, I'd like to talk a bit about Mercurial. This will not be a
beginner-level talk on DVCS or hg; it aims to be a higher-level discussion of
the concepts employed in Mercurial. After having discussed these, I'd also
like to compare Mercurial and git based on UI, performance and underlying
concepts.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dirkjan Ochtman</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/238/pycon-2010--modern-version-control--mercurial-int</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/238_modern-version-control-mercurial-internals-113.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ModernVersionControlMercurialInternals113726-31.jpg"></media:thumbnail></item><item><title>New *and* Improved: Coming changes to unittest, the standard library test framework (#52)</title><link>http://www.pyvideo.org/video/296/pycon-2010--new--and--improved--coming-changes-to</link><description>&lt;p&gt;Description&lt;/p&gt;
New *and* Improved: Coming changes to unittest, the standard library test
framework

  
Presented by Michael J Foord

  
In Python 2.7 and 3.2 a whole bunch of improvements to unittest will arrive.
unittest is the Python standard library testing framework and for several
years it has languished whilst other Python testing frameworks have innovated.
Some of the best innovations have made their way into unittest which has had
quite a renovation.

  
This talk will go through the major changes, like the new assert methods, test
discovery and the load_tests protocol, and also explain how they can be used
with earlier versions of Python.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/296/pycon-2010--new--and--improved--coming-changes-to</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/296_new-and-improved-coming-changes-to-unittest-the-standard-library-test-framework-52.ogv" length="152143505" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/296_new-and-improved-coming-changes-to-unittest-the-standard-library-test-framework-52.ogv" fileSize="152143505" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/296_new-and-improved-coming-changes-to-unittest-the-standard-library-test-framework-52.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010NewAndImprovedComingChangesToUnittestTheStanda472-63.jpg"></media:thumbnail></item><item><title>Optimal Resource Allocation using Python (#36)</title><link>http://www.pyvideo.org/video/299/pycon-2010--optimal-resource-allocation-using-pyt</link><description>&lt;p&gt;Description&lt;/p&gt;
Optimal Resource Allocation using Python

  
Presented by Ryan J O'Neil

  
A brief introduction to modeling and solving resource allocation and
scheduling problems using Python and SCIP.

  
At times a programmer is faced with difficult, possibly NP-Hard, optimization
problems such as scheduling or assignment. Sophisticated techniques exist for
modeling and solving these sorts of problems which are well implemented in
optimization solvers. This talk introduces some of these techniques using the
ZIB Optimization Suite and its new Python interface.

  
[VIDEO HAS ISSUES: Audio buzzing]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan J O'Neil</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/299/pycon-2010--optimal-resource-allocation-using-pyt</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/299_optimal-resource-allocation-using-python-36.ogv" length="127002678" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/299_optimal-resource-allocation-using-python-36.ogv" fileSize="127002678" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/299_optimal-resource-allocation-using-python-36.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010OptimalResourceAllocationUsingPython36659-324.jpg"></media:thumbnail></item><item><title>Optimizations And Micro-Optimizations In CPython (#38)</title><link>http://www.pyvideo.org/video/322/pycon-2010--optimizations-and-micro-optimizations</link><description>&lt;p&gt;Description&lt;/p&gt;
Optimizations and Micro-Optimizations in CPython

  
Presented by Mr. Larry Hastings

  
CPython mostly gets faster from one version to the next. And when CPython gets
faster, your programs get faster. This talk is a survey of optimizations made
to CPython, recent and historical, large and small. Audience doesn't need to
be familiar with CPython internals, but should be familiar with Python and
conversant in C.

  
[VIDEO HAS ISSUES: Audio interference]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Larry Hastings</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/322/pycon-2010--optimizations-and-micro-optimizations</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/322_optimizations-and-micro-optimizations-in-cpython-38.ogv" length="125038120" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/322_optimizations-and-micro-optimizations-in-cpython-38.ogv" fileSize="125038120" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/322_optimizations-and-micro-optimizations-in-cpython-38.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010OptimizationsAndMicroOptimizationsInCPython38668.png"></media:thumbnail></item><item><title>Panel: Form Generator Generators (#28)</title><link>http://www.pyvideo.org/video/298/pycon-2010--panel--form-generator-generators---28</link><description>&lt;p&gt;Description&lt;/p&gt;
Panel: Form Generator Generators

  
Christopher Perkins; Brandon Craig Rhodes (Rhodes Mill Studios, Inc.); Chris P
McDonough (Agendaless Consulting); Jacob Kaplan-Moss (jacob@jacobian.org);
Jonathan Ellis

  
It seems that almost every python web framework in existence has solved the
problem of automatically generating forms. Some have straight forward
techniques, some are unique or even an unusual approach to the problem. The
question is: "what can we learn from each other?". This panel will examine the
different ways developers generate forms by offering examples, and summarizing
the functionality, differences, and similarities between these valuable web
development tools.

  
[VIDEO HAS ISSUES: Feedback galore when moving between mics, cover your ears]

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/298/pycon-2010--panel--form-generator-generators---28</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/298_panel-form-generator-generators-28.ogv" length="213163287" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/298_panel-form-generator-generators-28.ogv" fileSize="213163287" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/298_panel-form-generator-generators-28.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PanelFormGeneratorGenerators20300.png"></media:thumbnail></item><item><title>Pay only for what you eat: A tour of the Repoze.BFG repository and philosophy (#174)</title><link>http://www.pyvideo.org/video/295/pycon-2010--pay-only-for-what-you-eat--a-tour-of-</link><description>&lt;p&gt;Description&lt;/p&gt;
Pay only for what you eat: A tour of the Repoze.BFG repository and philosophy

  
Presented by Carlos de la Guardia

  
BFG is a Python web application framework based on WSGI. It is a "pay only for
what you eat" framework. Meaning that you can get started easily and learn new
concepts as you go, and only if you need them. It's simple, well tested, well
documented, and fast. It also tries to make development fun.

  
This talk will introduce the framework and its philosophy, including
similarities and differences with other frameworks. I will then show some of
the software available in its repository and discuss the inclusive, loose
connection approach that the BFG community prefers for creating a flexible web
development platform.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carlos de la Guardia</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/295/pycon-2010--pay-only-for-what-you-eat--a-tour-of-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/295_pay-only-for-what-you-eat-a-tour-of-the-repoze-bfg-repository-and-philosophy-174.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/295_pay-only-for-what-you-eat-a-tour-of-the-repoze-bfg-repository-and-philosophy-174.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/295_pay-only-for-what-you-eat-a-tour-of-the-repoze-bfg-repository-and-philosophy-174.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PayOnlyForWhatYouEatATourOfTheRepozeBFGRepo556.png"></media:thumbnail></item><item><title>Persistent Graphs in Python with Neo4j (#140)</title><link>http://www.pyvideo.org/video/264/pycon-2010--persistent-graphs-in-python-with-neo4</link><description>&lt;p&gt;Description&lt;/p&gt;
Persistent Graphs in Python with Neo4j

  
Presented by Tobbias Ivarsson

  
Databases that employ a data model other than the relational model are
increasingly a hot topic. Neo4j is an open source database where the data
model is a graph. Data in Neo4j is stored as Nodes and Relationships in
between nodes. A lot of the data we model in applications every day is
actually graph oriented, having a database that persists such data natively is
a huge benefit. In this presentation we will see how to use Neo4j in Python,
and demonstrate this with a web application in Django.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tobbias Ivarsson</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/264/pycon-2010--persistent-graphs-in-python-with-neo4</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/264_persistent-graphs-in-python-with-neo4j-140.ogv" length="170064119" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/264_persistent-graphs-in-python-with-neo4j-140.ogv" fileSize="170064119" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/264_persistent-graphs-in-python-with-neo4j-140.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PersistentGraphsInPythonWithNeo4j140164-779.jpg"></media:thumbnail></item><item><title>Plenary: Friday Evening Lightning Talks</title><link>http://www.pyvideo.org/video/354/pycon-2010--plenary--friday-evening-lightning-tal</link><description>&lt;p&gt;Description&lt;/p&gt;
Plenary: Friday Evening Lightning Talks

  
(00:00) Jacob Kaplan-Moss - lightning talk about lightning talks

  
(03:50) Van Lindberg - What an Open Source Lawyer Actually Does

  
(09:40) Greg Wilson - The Next Big Programming Book and How You Can Make it
Happen ([http://www.third-bit.com/](http://www.third-bit.com/))

  
(14:25) Moshe Zadka - Don't Write Big Applications (more info
[here](http://moshez.wordpress.com/2010/02/17/dont-write-big-applications-a
-lightning-talk/))

  
(19:35) Ned Batchelder - What's new in coverage.py
([http://nedbatchelder.com/](http://nedbatchelder.com/),
[coverage.py](http://nedbatchelder.com/code/coverage/))

  
(25:10) Mike Maccana - Python Docx ([http://github.com/mikemaccana/python-
docx/](http://github.com/mikemaccana/python-docx/))

  
(29:25) Trent Mick - ActiveState Code v3/Python Cookbook v3
([http://code.activestate.com/](http://code.activestate.com/))

  
(34:40) Daniel Holth - Writing a SQLAlchemy Dialect

  
(37:30) Dave Malcolm - Better Ways of Debugging the CPython Runtime

  
(43:00) David Huggins-Daines - Recognizing Speech With Python
([http://cmusphinx.sourceforge.net/](http://cmusphinx.sourceforge.net/))

  
(48:00) Lucio Torre - Ubuntu One and Windows

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/354/pycon-2010--plenary--friday-evening-lightning-tal</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/354_plenary-friday-evening-lightning-talks.ogv" length="483744206" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/354_plenary-friday-evening-lightning-talks.ogv" fileSize="483744206" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/354_plenary-friday-evening-lightning-talks.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PlenaryFridayEveningLightningTalks330-562.jpg"></media:thumbnail></item><item><title>Plenary: Intro to sprints</title><link>http://www.pyvideo.org/video/292/pycon-2010--plenary--intro-to-sprints</link><description>&lt;p&gt;Description&lt;/p&gt;
Plenary: Intro to Sprinting and Intro to Sprints

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/292/pycon-2010--plenary--intro-to-sprints</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/292_plenary-intro-to-sprints.ogv" length="119998242" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/292_plenary-intro-to-sprints.ogv" fileSize="119998242" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/292_plenary-intro-to-sprints.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PlenaryIntroToSprints957-795.jpg"></media:thumbnail></item><item><title>Plenary: Saturday Evening Lightning Talks</title><link>http://www.pyvideo.org/video/309/pycon-2010--plenary--saturday-evening-lightning-t</link><description>&lt;p&gt;Description&lt;/p&gt;
Saturday Evening Lightning Talks

(00:00) Jacob Kaplan-Moss - Introduction

(00:30) Guido van Rossum - PSF community service awards

(02:42) Ka-Ping Yee - Using scrape.py to test your web apps

(07:35) Ayman Hourieh - Python debugging techniques

(12:28) Robin Mills - Geo-tagging and Phatch

(17:30) Allen Short - Big brother's design rules

(21:25) David Goodger - PyCon swag

(25:00) David Ewing - Python in tiny embedded systems for the Smart Grid and
beyond

(30:15) Dmitry Jemerov - Introducing PyCharm

(33:50) Dirkjan Ochtman - PEP 385: hg conversion

(37:30) Jesse Noller - Python: Hell Yeah.

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/309/pycon-2010--plenary--saturday-evening-lightning-t</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/309_plenary-saturday-evening-lightning-talks.ogv" length="217373194" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/309_plenary-saturday-evening-lightning-talks.ogv" fileSize="217373194" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/309_plenary-saturday-evening-lightning-talks.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PlenarySautrdayEveningLightningTalks793.png"></media:thumbnail></item><item><title>PLY and PyParsing (#93)</title><link>http://www.pyvideo.org/video/265/pycon-2010--ply-and-pyparsing---93</link><description>&lt;p&gt;Description&lt;/p&gt;
PLY and PyParsing

  
Presented by Andrew Dalke

  
Got a text parsing problem? In most cases using string manipulation and
regular expressions will solve it for you. But when the input is complex, try
reaching for a parsing system to help out.

  
The two most popular in Python are PLY and PyParsing. PLY follows the lex/yacc
tradition with a domain specific language to describe the tokens and grammar.
It was built with both error diagnostics and performance in mind. PyParsing is
a recursive descent parser which expresses the format as a Python data
structure. It make no distinction between lexer and grammar and has a uniform
callback system which makes certain types of data extraction very easy.

  
In my talk I'll show the basics of how to use both systems for several
different format parsing tasks, of different complexity. This will let you see
how to use the parsers and understand more of the tradeoffs between
complexity, readability, error handling, and performance.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Dalke</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/265/pycon-2010--ply-and-pyparsing---93</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/265_ply-and-pyparsing-93.ogv" length="163502409" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/265_ply-and-pyparsing-93.ogv" fileSize="163502409" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/265_ply-and-pyparsing-93.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PLYAndPyParsing93735-488.jpg"></media:thumbnail></item><item><title>Powerful Pythonic Patterns (#186)</title><link>http://www.pyvideo.org/video/275/pycon-2010--powerful-pythonic-patterns---186</link><description>&lt;p&gt;Description&lt;/p&gt;
Powerful Pythonic Patterns video

Presented by Alex Martelli

An extremely misguided meme is going around: that Python doesn't have, or
need, any Design Patterns. Maybe the meme springs from not realizing what the
Gang Of Four state so plainly in their historical "Design Patterns" book:
which design patterns are useful DOES depend on the programming language one
targets -- design is NOT independent of implementation, as the epic-fail
"Waterfall" Methodology Pattern would suggest. If you examine a "classic DP"
that's basically a workaround for some other language's lack of garbage
collection, or for a clumsy static-typing system, it may indeed be worthless
for Python. But many other DPs are still perfectly useful and applicable, and
indeed Python's strengths as a language afford riffing on them to develop
highly Pythonic, powerful, productive variants.

In this talk, I analyze some of my favorite pattern families -- e.g., Template
Method and its variants, Dependency Injection and its ilk, Callback and
friends -- in a highly Pythonic context. Non-pattern Idioms, and Patterns that
aren't really Design Patterns but rather Architecture or Methodology ones,
also make cameo appearances.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/275/pycon-2010--powerful-pythonic-patterns---186</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/275_powerful-pythonic-patterns-186.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/275_powerful-pythonic-patterns-186.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/275_powerful-pythonic-patterns-186.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PowerfulPythonicPatterns186111-668.jpg"></media:thumbnail></item><item><title>Powering the real-time web with Python: PubSubHubbub on App Engine (#173)</title><link>http://www.pyvideo.org/video/272/pycon-2010--powering-the-real-time-web-with-pytho</link><description>&lt;p&gt;Description&lt;/p&gt;
Powering the real-time web with Python: PubSubHubbub on App Engine

  
Presented by Brett Slatkin

  
PubSubHubbub is an open protocol that turns Atom and RSS feeds into real-time
streams. I built the reference Hub run by Google using Python and App Engine.
In this talk you will learn how I made the real-time system work: An intro to
the protocol, asynchronous processing on App Engine, fault-tolerance, and
scalability.

  
For details on PubSubHubbub and the Hub's source code, see [http://code.google
.com/p/pubsubhubbub/](http://code.google.com/p/pubsubhubbub/).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Slatkin</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/272/pycon-2010--powering-the-real-time-web-with-pytho</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/272_powering-the-real-time-web-with-python-pubsubhubbub-on-app-engine-173.ogv" length="149807635" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/272_powering-the-real-time-web-with-python-pubsubhubbub-on-app-engine-173.ogv" fileSize="149807635" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/272_powering-the-real-time-web-with-python-pubsubhubbub-on-app-engine-173.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PoweringTheRealtimeWebWithPythonPubSubHubbubOn236-232.jpg"></media:thumbnail></item><item><title>Pycon 2010: 508 and You: Taking the Pain out of Accessibility (#119)</title><link>http://www.pyvideo.org/video/312/pycon-2010--508-and-you--taking-the-pain-out-of-a</link><description>&lt;p&gt;Description&lt;/p&gt;
508 and You: Taking the Pain out of Accessibility

  
Presented by Katie A Cunningham (NASA/Indyne)

  
Thinking about scoring a government contract, but haven't heard of 508
compliance yet? Interested in making your site accessible to people with
disabilities? Never thought about compliance, but want to know why it's a good
idea?

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katie Cunningham</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/312/pycon-2010--508-and-you--taking-the-pain-out-of-a</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/312_pycon-2010-508-and-you-taking-the-pain-out-of-accessibility-119.ogv" length="187217226" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010508AndYouTakingThePainOutOfAccessibility119246.png"></media:thumbnail></item><item><title>PyCon 2010:Advanced SQL Alchemy</title><link>http://www.pyvideo.org/video/246/pycon-2010-advanced-sql-alchemy</link><description>&lt;p&gt;Description&lt;/p&gt;
Advanced SQLAlchemy

Presented by Michael Bayer

SQLAlchemy is the premier SQL toolkit for Python. SQLAlchemy exposes the full
power of SQL while remaining easy to use for the basics, and is flexible
enough to work with existing database schemas as well as fresh designs.
SQLAlchemy is used in production by leading Python web frameworks Pylons and
TurboGears as well as many other web and non-web developers.

This tutorial discusses current data mapping techniques, advanced Query
techniques, Session/transaction usage, and maximizing schema usage with
SQLAlchemy's event model.

Intended Audience

Python experience: intermediate. You should already have some hands-on
experience with Python and be comfortable reading modern Python code.

SQL experience: intermediate. We will use subselects and outer joins as part
of the SQL layer.

ORM experience: prior experience with SQLAlchemy is recommended.

Class Outline

Declarative Mapping

  * Initial configuration 
  * Basic mapping 
  * Building a many-to-many relation 
  * Using late-evaluated configuration arguments 

Advanced queries

  * Selecting objects, selecting columns 
  * Thinking generatively 
  * Joining like a Pro 
  * Power Eager Loading 
  * Selecting from Anything 

Session Techniques

  * Transaction lifecycle 
  * Scoping objects in and out of caches using merge() 

Inheritance Mapping

  * Single Table Inheritance 
  * Joined Table Inheritance 
  * High Level/Low Level Joined Queries 

Extending SQL

  * Creating new SQL constructs 
  * Creating new DDL constructs 

Extending the ORM

  * Using SessionExtension to populate denormalized views 
  * Subclassing Query to Suit Your Needs 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Bayer</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/246/pycon-2010-advanced-sql-alchemy</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/246_pycon-2010-advanced-sql-alchemy.ogv" length="926558095" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010AdvancedSQLAlchemy724-474.jpg"></media:thumbnail></item><item><title>Pycon 2010: Analysis: The other kind of testing (#185)</title><link>http://www.pyvideo.org/video/294/pycon-2010--analysis--the-other-kind-of-testing--</link><description>&lt;p&gt;Description&lt;/p&gt;
Analysis: The other kind of testing

  
Presented by Bob Ippolito

  
Software testing helps verify that your code meets a specification, but not
how to improve the specification. How can you stay competitive when most of
the big names today are using analysis to guide product evolution? Level the
playing field and make better products by learning how to design experiments,
collect data, make measurements, and optimize your specifications.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob Ippolito</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/294/pycon-2010--analysis--the-other-kind-of-testing--</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/294_pycon-2010-analysis-the-other-kind-of-testing-185.ogv" length="152495613" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/294_pycon-2010-analysis-the-other-kind-of-testing-185.ogv" fileSize="152495613" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/294_pycon-2010-analysis-the-other-kind-of-testing-185.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010AnalysisTheOtherKindOfTesting185103.png"></media:thumbnail></item><item><title>Pynie: Python 3 on Parrot (#148)</title><link>http://www.pyvideo.org/video/297/pycon-2010--pynie--python-3-on-parrot---148</link><description>&lt;p&gt;Description&lt;/p&gt;
Pyine: Python 3 on Parrot

  
Presented by Allison Randal

  
Pynie is an implementation of Python 3 on Parrot. The goal of Pynie is to
duplicate the pure-Python behavior of CPython 3.x, and perhaps eventually a C
API compatibility layer. Parrot provides a set of compiler tools and core
functionality common to many dynamic languages, so the core code of Pynie is
lightweight. Pynie allows Python 3 libraries to be shared between multiple
languages. This talk is an overview of the features Pynie currently supports
and the work left to be done, together with an introduction to the internals
of Pynie.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Randal</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/297/pycon-2010--pynie--python-3-on-parrot---148</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/297_pynie-python-3-on-parrot-148.ogv" length="92686713" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/297_pynie-python-3-on-parrot-148.ogv" fileSize="92686713" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/297_pynie-python-3-on-parrot-148.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PyniePython3OnParrot148332.png"></media:thumbnail></item><item><title>py.test - Rapid Testing with Minimal Effort</title><link>http://www.pyvideo.org/video/259/pycon-2010--py-test---rapid-testing-with-minimal-</link><description>&lt;p&gt;Description&lt;/p&gt;
py.test I - rapid testing with minimal effort

Presented by Holger Krekel

Want to learn writing tests in Python? This tutorial introduces basic
practises using the popular py.test ([http://pytest.org](http://pytest.org))
tool. We start with an overview on testing and tools in Python and then
discuss and exercise basic idioms in a step-by-step manner. We cover the basic
writing, organisation and running of tests and debugging options. In the
second part we discuss setup and teardown of test state, usage and
configuration of test functions arguments and introduce coverage testing. We
will close with time to answer questions and discuss topics from the
participants.

Intended Audience

beginner programmers

Perequisites/knowledge: basic knowledge of python programming

Requirements: Laptop with Python 2.4 or greater installed. Pairing welcome.
outline

  * why automated testing? 
  * Developer oriented automated tests 
  * The test tool question 
  * py.test basics 
  * py.test fundamental features 
  * cross-project test tool 
  * A Typical Python test layout 
  * Another typical test layout 
  * Choosing a test layout 
  * automatic test discovery 
  * mind the __init__.py files 
  * no boilerplate python test code 
  * assert introspection 
  * asserting expected exceptions 
  * print() debugging / output capturing 
  * Getting Started, basic usage [0] 
  * Failure / Traceback Demo [0] 
  * Skipping tests 
  * Dynamically skipping tests 
  * Marking test functions 
  * Marking a test for conditional skip 
  * Marking a test as expected to fail 
  * Conditional expected to fail 
  * Marking / Skipping exercise [0] 
  * Applying Marks to classes or modules 
  * break 
  * warm up: boilerplate test code 
  * "myscan" Exercises of this tutorial 
  * sketching our "myscan" project 
  * Starting Exercise [1] 
  * The example Solution [1] 
  * The "test setup" and fixture Problem 
  * test functions and funcargs 
  * How do funcargs work? 
  * funcarg factory notes 
  * builtin funcargs 
  * usage example: per-test temporary directory 
  * next step: adding more tests [2] 
  * observation on new tmpdir-using tests 
  * The mysetup pattern 
  * How the mysetup pattern works 
  * next step: introducing "mysetup" pattern [3] 
  * The new test function using "mysetup" 
  * a simple hook: adding a command line opt 
  * the py.test config object 
  * exercise: implement a new command line option [4] 
  * myscan example completed 
  * py.test hooks and plugins 
  * Installing "global" plugins 
  * exercise: use the "figleaf" plugin 
  * local plugins: conftest.py 
  * a simple config: ignoring directories 
  * a simple default option: verbose 
  * quick discussion of advanced usages 
  * Summary / questions and answers 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/259/pycon-2010--py-test---rapid-testing-with-minimal-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/259_py-test-rapid-testing-with-minimal-effort.ogv" length="981861155" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/259_py-test-rapid-testing-with-minimal-effort.ogv" fileSize="981861155" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/259_py-test-rapid-testing-with-minimal-effort.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010pytestRapidTestingWithMinimalEffort216-303.jpg"></media:thumbnail></item><item><title>Python 101</title><link>http://www.pyvideo.org/video/287/pycon-2010--python-101</link><description>&lt;p&gt;Description&lt;/p&gt;
Python 101

Presented by Stuart Williams

This half-day tutorial presents the basics of Python to beginning and
intermediate programmers. It pairs well with ''Python 102'' which follows a
similar outline but goes much deeper.

Rather than starting with "Hello, world!", we use the interactive Python
interpreter shell to get hands-on familiarity with much of core Python before
covering blocks and scripts.

The tutorial is divided into short sections, each with presentation and hands-
on exercises, to quickly cover lots of ground.

Advanced topics are introduced throughout and covered in "extra credit"
exercises such that more advanced participants can learn at their own pace.

Intended Audience

Programmers with experience in other languages who want a fast hands-on
introduction to Python. Content will target both Python 3.1 and 2.6.

Requirements

Bring a laptop computer with Python 2.6 or 3.1 installed. Try to get as much
of an overview of Python before the tutorial as you have time to in order to
get more out of the tutorial. Two angles on this are the Python Quick
Reference and the Python website's tutorial.

Class Outline

  * Numbers and operators 
  * Strings - immutability, operators, methods, functions, and formatting 
  * Introspection/Discovery 
  * Tuples and Lists 
  * List Comprehensions 
  * Objects and Names 
  * Dictionaries 
  * Loops and Blocks 
  * Iterables 
  * Generator Expressions 
  * Functions 
  * Generators 
  * Namespaces 
  * Simple Classes 
  * Exceptions 

The handouts at [http://swilliams.ca/python-tutorials](http://swilliams.ca
/python-tutorials). If you're interested in the software I wrote to deliver
the talk drop me a line. My address is in the handouts.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stuart Williams</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/287/pycon-2010--python-101</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/287_python-101.ogv" length="732203665" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/287_python-101.ogv" fileSize="732203665" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/287_python-101.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010Python101314.png"></media:thumbnail></item><item><title>Python 102</title><link>http://www.pyvideo.org/video/257/pycon-2010--python-102</link><description>&lt;p&gt;Description&lt;/p&gt;
Python 102

Presented by Stuart Williams

This half-day tutorial presents intermediate and some advanced features of
Python to beginning and intermediate programmers. It pairs well with Python
101 which follows a similar outline but at a more introductory level.

Rather than starting with "Hello, world!", we use the interactive Python
interpreter shell to get hands-on familiarity with much of core Python before
covering blocks and scripts.

The tutorial is divided into short sections, each with presentation and hands-
on exercises, to quickly cover lots of ground.

Advanced topics are introduced throughout and covered in "extra credit"
exercises such that more advanced participants can learn at their own pace.

Intended Audience

Programmers with experience in other languages who want a fast hands-on
introduction to intermediate and some advanced features of Python. Content
will target both Python 3.1 and 2.6.

Class Outline

  * Numbers and Strings - operators, functions and methods 
  * Introspection 
  * Sequences - overview, concepts, and methods 
  * Objects 
  * Dictionaries 
  * Files 
  * Classes 
  * Namespaces 
  * Dynamic Classes 
  * Iterators and Generators 
  * Functions 
  * Exceptions 
  * Standard Library 

Requirements

Bring a laptop computer with Python 2.6 or 3.1 installed. Try to get as much
of an overview of Python before the tutorial as you have time to in order to
get more out of the tutorial. Two angles on this are the Python Quick
Reference and the Python website's tutorial.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stuart Williams</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/257/pycon-2010--python-102</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/257_python-102.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/257_python-102.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/257_python-102.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010Python102442.png"></media:thumbnail></item><item><title>Python 201: How to Solve It Using Python</title><link>http://www.pyvideo.org/video/253/pycon-2010--python-201--how-to-solve-it-using-pyt</link><description>&lt;p&gt;Description&lt;/p&gt;
Python 201: How to Solve it using Python

Presented by Senthil Kumaran

One good way to develop applications is to divide the problem into smaller
manageable chunks and the build those. Once we identify and define those
smaller piece of tasks, our problem becomes incredibly easy.

But we are still faced with the question of what is the best way to do that
smaller task in Python? This tutorial will answer those questions.

In this tutorial, we will identify the commonly occurring tasks that would fit
into to bigger problems and learn how do we solve it using Python.

The aim of the tutorial is help you develop the correct intuition when
developing applications using Python.

Intended Audience

Beginning to intermediate Python Programmers. Familiarity with Python's syntax
and usage is assumed.

This tutorial will use Python 3.1 examples (with changes from Python 2.6
explained, when it is required).

The source code and the handout will contain the snippets written in both
Python 2.6 and Python 3.1.

Class Outline

  * Outline of the Tutorial and a Brief Overview of Standard Library. 
  * Lets start with Strings. 
  * Files - We deal with them often. 
  * Date time related tasks. 
  * Dealing with Database stuff. 
  * Process Handling. 
  * Processing XMLs. 
  * Web Programming 
  * Programming tasks. 
  * Unit Testing 
  * How to Convert Python 2 to Python 3. 

Requirements

Attendees are welcome to bring their laptops with Python installed ( version
3.1 and version 2.6 both installed).

Some snippets will be using Twisted Matrix Framework, those who would like to
try those recipes, would like to have Twisted Package installed for their
Python Distribution.

[VIDEO HAS ISSUES: Some missing sections of video due to technical issues
(approx 3 mins in)]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Senthil Kumaran</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/253/pycon-2010--python-201--how-to-solve-it-using-pyt</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/253_python-201-how-to-solve-it-using-python.ogv" length="1023524470" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/253_python-201-how-to-solve-it-using-python.ogv" fileSize="1023524470" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/253_python-201-how-to-solve-it-using-python.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010Python201HowToSolveItUsingPython440-675.jpg"></media:thumbnail></item><item><title>Python 3: The Next Generation (#48)</title><link>http://www.pyvideo.org/video/280/pycon-2010--python-3--the-next-generation---48</link><description>&lt;p&gt;Description&lt;/p&gt;
Python 3: The Next Generation

  
Presented by Wesley J. Chun

  
This talk is about the evolution of Python. We will discuss Python 2 and
Python 3: what the compatibility issues are, what the main differences are,
and also talk about migration, Python 2.6, and other transition tools.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley J. Chun</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/280/pycon-2010--python-3--the-next-generation---48</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/280_python-3-the-next-generation-48.ogv" length="150617866" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/280_python-3-the-next-generation-48.ogv" fileSize="150617866" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/280_python-3-the-next-generation-48.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010Python3TheNextGeneration48189-803.jpg"></media:thumbnail></item><item><title>Python for Large Astronomical Data Reduction and Analysis Systems (#107)</title><link>http://www.pyvideo.org/video/282/pycon-2010--python-for-large-astronomical-data-re</link><description>&lt;p&gt;Description&lt;/p&gt;
Python for Large Astronomical Data Reduction and Analysis Systems

Presented by Francesco Pierfederici (Harvard-Smithsonian Center for
Astrophysics)

We describe how Python is used in a large astronomy project to automatically
process data from several telescopes in both the hemispheres. We introduce the
general problem and discuss challenges and lessons learned.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Pierfederici</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/282/pycon-2010--python-for-large-astronomical-data-re</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/282_python-for-large-astronomical-data-reduction-and-analysis-systems-107.ogv" length="140468272" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/282_python-for-large-astronomical-data-reduction-and-analysis-systems-107.ogv" fileSize="140468272" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/282_python-for-large-astronomical-data-reduction-and-analysis-systems-107.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PythonForLargeAstronomicalDataReductionAndAnaly443-396.jpg"></media:thumbnail></item><item><title>Python in quantitative finance (#158)</title><link>http://www.pyvideo.org/video/305/python-in-quantitative-finance-158</link><description>&lt;p&gt;Description&lt;/p&gt;
Python in quantitative finance

  
Presented by Wes McKinney (AQR Capital Management, LLC)

  
This talk will show how Python and libraries such as NumPy were instrumental
at AQR for building a robust research platform for prototyping and
implementing quantitative trading models. We will discuss many different
tools, including pandas, a new open source library designed for analyzing
common financial and economic data sets.

  
A variety of examples will be presented to explore Python's current status as
a replacement for other statistical computing environments (as compared with
R, MATLAB, or other commercial and open-source statistical products).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wes McKinney</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/305/python-in-quantitative-finance-158</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/305_python-in-quantitative-finance-158.ogv" length="223064549" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/305_python-in-quantitative-finance-158.ogv" fileSize="223064549" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/305_python-in-quantitative-finance-158.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PythonInQuantitativeFinance158145.png"></media:thumbnail></item><item><title>Python in the Browser (#71)</title><link>http://www.pyvideo.org/video/340/pycon-2010--python-in-the-browser---71</link><description>&lt;p&gt;Description&lt;/p&gt;
Python in the Browser

  
Presented by Jimmy Schementi

  
You write your server code in Python because you want to. You write your
browser code in JavaScript because you have to. But with IronPython and
Silverlight, you can write your browser code in Python and leave JavaScript
behind. This talk provides an overview of Silverlight for Python developers,
including out of browser applications as well as the new â€œjust textâ€ model
where Python code is embedded directly in HTML pages. Even if you develop on
Linux or Mac, you can still take advantage of Silverlight in the browser

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jimmy Schementi</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/340/pycon-2010--python-in-the-browser---71</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/340_python-in-the-browser-71.ogv" length="177817021" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/340_python-in-the-browser-71.ogv" fileSize="177817021" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/340_python-in-the-browser-71.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PythonInTheBrowser71716.png"></media:thumbnail></item><item><title>Python Metaprogramming (#64)</title><link>http://www.pyvideo.org/video/302/pycon-2010--python-metaprogramming---64</link><description>&lt;p&gt;Description&lt;/p&gt;
Python Metaprogramming

  
Presented by Nicolas Lara

  
Python makes a great metaprogramming languages. Metaprogramming is great for
solving problems faster, in a more generic way and providing rich APIs. This
talk explores the different options provided in python to do metaprogramming
and the right way to use them.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicolas Lara</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/302/pycon-2010--python-metaprogramming---64</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/302_python-metaprogramming-64.ogv" length="179252019" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/302_python-metaprogramming-64.ogv" fileSize="179252019" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/302_python-metaprogramming-64.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PythonMetaprogramming64641.png"></media:thumbnail></item><item><title>Python's Dusty Corners (#182)</title><link>http://www.pyvideo.org/video/351/pycon-2010--python--39-s-dusty-corners---182</link><description>&lt;p&gt;Description&lt;/p&gt;
Python's Dusty Corners

  
Presented by Jack Diederich

  
The talk will be a brief overview of all the features in python that you don't
need to know about right up until the moment you do. The list includes how
comparisons work, descriptors, iterators, context managers, namespaces, else
clauses on for/while loops (suggested by Hettinger). The narrative of the talk
is that these are features that you don't need and/or shouldn't use in your
day-to-day code but that you need to keep in the back of your mind because
other people's code and the stdlib do use them. As Alex Martelli pointed out
in his wonderful talk "Abstractions as Leverage" you can't successfully
function at one level of abstraction if you don't know what is going on at the
next level down. This talk is a whirlwind tour of the next level down.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Diederich</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/351/pycon-2010--python--39-s-dusty-corners---182</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/351_python-s-dusty-corners-182.ogv" length="137194246" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/351_python-s-dusty-corners-182.ogv" fileSize="137194246" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/351_python-s-dusty-corners-182.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010PythonsDustyCorners182155.png"></media:thumbnail></item><item><title>Rapid multi-purpose testing (#81)</title><link>http://www.pyvideo.org/video/243/pycon-2010--rapid-multi-purpose-testing---81</link><description>&lt;p&gt;Description&lt;/p&gt;
Rapid multi-purpose testing

Presented by Holger Krekel

Want to rapidly test code, javascript or documents on different Python
Interpreters and versions? This talk gives an overview on new py.test features
of the last year. I'll discuss the minimal-boilerplate testing and new plugin
model and give an overview on which testing needs are covered so far, for
example:

  * run tests written for nose or unittest 
  * ad-hoc distribute tests to local or remote Python environments 
  * test compatibility with Python3 
  * run javascript unit-tests in real browsers 
  * coverage testing 
  * django-specific testing 

I'll conclude with upcoming features regarding testing-in-the-cloud and plans
on more test tool convergence. (URL: [http://pytest.org](http://pytest.org/))

[VIDEO HAS ISSUES: first 47 seconds or so are really quiet]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/243/pycon-2010--rapid-multi-purpose-testing---81</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/243_rapid-multi-purpose-testing-81.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010rapidMultipurposeTesting81761-297.jpg"></media:thumbnail></item><item><title>Relational Database Applications</title><link>http://www.pyvideo.org/video/250/pycon-2010--relational-database-applications</link><description>&lt;p&gt;Description&lt;/p&gt;
Turbogears Database Applications (Relational Database Applications)

Presented by Chris Perkins

TurboGears2 provides a rich toolset to provide developers with a platform for
developing web applications with existing databases. This â€œun-tutorialâ€
has a simple goal. The participants may bring in their own databases, and we
will explore how TurboGears can use this database to create a working web
application. If the student does not want to use her own database, one will be
provided. This tutorial will focus on the TurboGears Admin system, along with
relational databases.

This tutorial is intended to be an un-tutorial. The idea is simple. Bring a
public database, (or 4) and share with the class as we explore the new admin-
level RESTful features that TurboGears2 employs.

At the end of the class, the goal is for everyone to have a working TG2
application, with a working admin, at least one customized form or table,
based on a database they, or another student brought to class.

Requirements

Laptop with Python 2.5 or 2.6 installed. Database system of your choice
(Postgres, Sqlite, MySQL) Python drivers for your desired database system
installed. (psychopg2, pg8000, pysqlite, mysql-python)

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Perkins</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/250/pycon-2010--relational-database-applications</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/250_relational-database-applications.ogv" length="655710188" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/250_relational-database-applications.ogv" fileSize="655710188" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/250_relational-database-applications.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010RelationalDatabaseApplications742.png"></media:thumbnail></item><item><title>Remixing Music Pythonically (#157)</title><link>http://www.pyvideo.org/video/240/pycon-2010--remixing-music-pythonically---157</link><description>&lt;p&gt;Description&lt;/p&gt;
Remixing Music Pythonically

Presented by Adam T. Lindsay

The Echo Nest Remix API ([http://code.google.com/p/echo-nest-
remix/](http://code.google.com/p/echo-nest-remix/)) was made open source by
The Echo Nest, a "music intelligence" company based in the Boston area in the
autumn of 2008. This talk will offer details on the concise expressivity
offered when editing multimedia driven by content-based features, and some
insights on what Pythonic magic did and didn't work in the development of the
modules. Audio and video examples of the fun-yet-odd outputs that are possible
will be shown.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam T. Lindsay</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/240/pycon-2010--remixing-music-pythonically---157</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/240_remixing-music-pythonically-157.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010RemixingMusicPythonically157433-961.jpg"></media:thumbnail></item><item><title>Revisioned Databases for MultiUser Editing (#86)</title><link>http://www.pyvideo.org/video/344/pycon-2010--revisioned-databases-for-multiuser-ed</link><description>&lt;p&gt;Description&lt;/p&gt;
Revisioned Databases for MultiUser Editing

  
Presented by John Rittenhouse (CCP Games)

  
At CCP Games (www.ccpgames.com), we work on large MMO projects with tens of
content editors editing the same data. To make this possible, we created a
Revisioned Database framework that allows for us to create new multiuser
editing systems without data synchronization between users having to be a
major concern. In this talk, solutions we've tried are discussed, the basic
layout of our revision database shown, the Python layer which handles it
transparently for the programmer detailed, and how the Python layer is used in
practice. All of this is focused on discussing what worked well and what
pitfalls we ran into during development.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Rittenhouse</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/344/pycon-2010--revisioned-databases-for-multiuser-ed</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/344_revisioned-databases-for-multiuser-editing-86.ogv" length="401294147" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/344_revisioned-databases-for-multiuser-editing-86.ogv" fileSize="401294147" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/344_revisioned-databases-for-multiuser-editing-86.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010RevisionedDatabasesForMultiUserEditing86189.png"></media:thumbnail></item><item><title>Scaling Python webapps from zero to 50 million users - A top-down approach. (#134)</title><link>http://www.pyvideo.org/video/258/pycon-2010--scaling-python-webapps-from-zero-to-5</link><description>&lt;p&gt;Description&lt;/p&gt;
Scaling Python webapps from zero to 50 million users - A top-down approach

Presented by Jinal Jhaveri

LOLapps is one of the top providers of social games and user generated
applications with 50+ million monthly uniques on Facebook, MySpace and Bebo.
This session will focus on the top-down approach we took to scale our webapps
for millions of users. Here are the 6 topics we will cover:

  * Why is performance a big issue for Social Media 
  * How we profiled our apps and found bottlenecks using custom developed and existing middleware 
  * The web application best practices we applied and results obtained 
  * How we traced database connection leaks 
  * Our caching strategies and the changes we made to speed up the memcache client 
  * Results of our experiment using Paster and Tornado as our web servers. 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jinal Jhaveri</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/258/pycon-2010--scaling-python-webapps-from-zero-to-5</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/258_scaling-python-webapps-from-zero-to-50-million-users-a-top-down-approach-134.ogv" length="131211611" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/258_scaling-python-webapps-from-zero-to-50-million-users-a-top-down-approach-134.ogv" fileSize="131211611" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/258_scaling-python-webapps-from-zero-to-50-million-users-a-top-down-approach-134.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ScalingPythonWebappsFromZeroTo50MillionUsers288-77.jpg"></media:thumbnail></item><item><title>Scaling your Python application on EC2 (#191)</title><link>http://www.pyvideo.org/video/349/pycon-2010--scaling-your-python-application-on-ec</link><description>&lt;p&gt;Description&lt;/p&gt;
Scaling Your Python Application on EC2

  
Presented by Jeremy Edberg

  
Come hear about the trials and tribulations of moving reddit's Python
application from physical hardware to EC2's cloud infrastructure, and how they
have scaled since moving. Will include general discussion of their learnings
about scaling as well cloud specific issues.

  
[VIDEO HAS ISSUES: Missing audio first few seconds]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Edberg</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/349/pycon-2010--scaling-your-python-application-on-ec</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/349_scaling-your-python-application-on-ec2-191.ogv" length="145496279" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/349_scaling-your-python-application-on-ec2-191.ogv" fileSize="145496279" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/349_scaling-your-python-application-on-ec2-191.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ScalingYourPythonApplicationOnEC2191887.png"></media:thumbnail></item><item><title>Scrape the Web: Strategies for programming websites that don't expect it</title><link>http://www.pyvideo.org/video/256/pycon-2010--scrape-the-web--strategies-for-progra</link><description>&lt;p&gt;Abstract&lt;/p&gt;
We'll discuss the basics of web scraping, and then dive into the details of
different methods and where they are most applicable. You'll leave with an
understanding of when to apply different tools, and learn about automating a
full web browser, a "heavy hammer" that I picked up at a project for the
Electronic Frontier Foundation.


&lt;p&gt;Description&lt;/p&gt;
Scrape the Web: Strategies for programming websites that don't expect it

  
Presented by Asheesh Laroia

  
Do you find yourself faced with websites that have data you need to extract?
Would your life be simpler if you could programmatically input data into web
applications, even those tuned to resist interaction by bots?

  
Year by year, the web is becoming a stronger force. Learn how to get the best
of it.

  
We'll discuss the basics of web scraping, and then dive into the details of
different methods and where they are most applicable. You'll leave with an
understanding of when to apply different tools, and learn about automating a
full web browser, a "heavy hammer" that I picked up at a project for the
Electronic Frontier Foundation.

  
Atendees should bring a laptop, if possible, to try the examples we discuss
and optionally take notes. Code samples will be made available after class
with no restrictions. Intended Audience

  
Intermediate (or better) Python programmers, probably without extensive web
testing experience

  
Class Outline

  * My motto: "The website is the API." 
  * Choosing a parser: BeautifulSoup, lxml, HTMLParse, and html5lib. 
  * Extracting information, even in the face of bad HTML: Regular expressions, BeautifulSoup, SAX, and XPath. 
  * Automatic template reverse-engineering tools. 
  * Submitting to forms. 
  * Playing with XML-RPC 
  * DO NOT BECOME AN EVIL COMMENT SPAMMER. 
  * Countermeasures, and circumventing them: 
    * IP address limits 
    * Hidden form fields 
    * User-agent detection 
    * JavaScript 
    * CAPTCHAs 
  * Plenty of full source code to working examples: 
    * Submitting to forms for text-to-speech. 
    * Downloading music from web stores. 
    * Automating Firefox with Selenium RC to navigate a pure-JavaScript service. 
  * Q&amp;A; and workshopping 
  * Use your power for good, not evil. 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Asheesh Laroia</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/256/pycon-2010--scrape-the-web--strategies-for-progra</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/256_scrape-the-web-strategies-for-programming-websites-that-don-t-expect-it.ogv" length="851529869" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/256_scrape-the-web-strategies-for-programming-websites-that-don-t-expect-it.ogv" fileSize="851529869" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/256_scrape-the-web-strategies-for-programming-websites-that-don-t-expect-it.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ScrapeTheWebStrategiesForProgrammingWebsitesTha613-141.jpg"></media:thumbnail></item><item><title>Seattle: A Python-based Platform for Easy Development and Deployment of Networked Systems and Applications (#162)</title><link>http://www.pyvideo.org/video/348/pycon-2010--seattle--a-python-based-platform-for-</link><description>&lt;p&gt;Description&lt;/p&gt;
A Python-based Platform for Easy Development and Deployment of Networked
Systems and Applications

  
Presented by Ivan Beschastnikh, Justin Samuel, and Justin Cappos

  
Seattle is an open-source platform for developing and deploying networked
applications. Core feature of Seattle is that it allows safe execution of
untrusted code on end-user systems. In our talk we look at how we used Python
to build a safe, restricted code execution environment for Seattle that not
only provides execution safety but also enforces strict resource consumption
limits. In addition, Seattle includes a high-level API to hide inconsistent
OS-specific behaviors from developers. What results is a platform that
welcomes the participation of end-user machines for general-purpose
distributed programming and creates new possibilities for developers.

  
[http://seattle.cs.washington.edu/](http://seattle.cs.washington.edu/)

  
[VIDEO HAS ISSUES: Beginning of talk missing, due to technical problems.]

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ivan Beschastnikh,Justin Cappos,Justin Samuel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/348/pycon-2010--seattle--a-python-based-platform-for-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/348_seattle-a-python-based-platform-for-easy-development-and-deployment-of-networked-systems-and-applications-162.ogv" length="177494848" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/348_seattle-a-python-based-platform-for-easy-development-and-deployment-of-networked-systems-and-applications-162.ogv" fileSize="177494848" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/348_seattle-a-python-based-platform-for-easy-development-and-deployment-of-networked-systems-and-applications-162.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010SeattleAPythonbasedPlatformForEasyDevelopmentAn600-243.jpg"></media:thumbnail></item><item><title>Simple WSGI composition: story of one refactoring (#51)</title><link>http://www.pyvideo.org/video/339/pycon-2010--simple-wsgi-composition--story-of-one</link><description>&lt;p&gt;Description&lt;/p&gt;
Simple WSGI composition: story of one refactoring

  
Presented by Max Ischenko

  
Story of a refactoring I did to split one big, monolithic Pylons app into a
bunch of smaller ones, using power of WSGI and nginx. The devil is in the
details: how to handle common auth, site-wide look and feel, common utilities,
database management. Pros and cons of the approach, possible alternatives.

  
The talk assumes listeners know what WSGI is and preferably have used some
WSGI-centered framework like Pylons, Werkzeug, Paste or other.

  
The application this talk describes powers developers.org.ua.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Ischenko</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/339/pycon-2010--simple-wsgi-composition--story-of-one</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/339_simple-wsgi-composition-story-of-one-refactoring-51.ogv" length="145463857" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/339_simple-wsgi-composition-story-of-one-refactoring-51.ogv" fileSize="145463857" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/339_simple-wsgi-composition-story-of-one-refactoring-51.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010SimpleWSGICompositionStoryOfOneRefactoring51585.png"></media:thumbnail></item><item><title>Small acts make great revolutions: crafting Python and Open Source communities in Rio de Janeiro (#78)</title><link>http://www.pyvideo.org/video/324/small-acts-make-great-revolutions-crafting-pytho</link><description>&lt;p&gt;Description&lt;/p&gt;
Small acts make great revolutions: crafting Python and Open Source communities
in Rio de Janeiro

  
Presented by Guilherme Chapiewski; Henrique Bastos

  
Even though we are Python lovers, we at PythOnRio (Python's Rio de Janeiro
users group) strongly believe in differences. Programming languages and
technologies are not religions. Why do we have to compete against each other
when we can take advantage of diversity by sharing our knowledge and learning
to use the best tools for each job? By promoting this thinking we are
gathering people from many different open source communities.

  
That's our main recipe for the success of initiatives like Coding Dojo Rio,
PythOnCampus, Dev in Rio, #horaextra and many other social meetings where we
have gathered some of the smartest people in Rio's software development
community.

  
With this philosophy, Rio de Janeiro communities are growing and starting to
jell - they are becoming so strongly knit that the whole is greater than the
sum of the parts.

  
In this talk, we would like to share not only our "methods" and "formulas",
but the values and experiences that are leading us to build a strong and
active community while having lots of fun.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guilherme Chapiewski,Henrique Bastos</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/324/small-acts-make-great-revolutions-crafting-pytho</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/324_small-acts-make-great-revolutions-crafting-python-and-open-source-communities-in-rio-de-janeiro-78.ogv" length="143686099" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/324_small-acts-make-great-revolutions-crafting-python-and-open-source-communities-in-rio-de-janeiro-78.ogv" fileSize="143686099" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/324_small-acts-make-great-revolutions-crafting-python-and-open-source-communities-in-rio-de-janeiro-78.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010SmallActsMakeGreatRevolutionsCraftingPythonAnd957.png"></media:thumbnail></item><item><title>Sprox: data driven web development (#137)</title><link>http://www.pyvideo.org/video/330/pycon-2010--sprox--data-driven-web-development---</link><description>&lt;p&gt;Description&lt;/p&gt;
Sprox: data driven web development

  
Presented by Jorge L Vargas

  
Sprox is a web frontend tool built to handle the creation and manipulation of
data.

  
Sprox is smart about your data. You should never write repetitive code again.
Sane defaults and easy overwrites is what makes Sprox guess what you need for
your fields.

  
This talk will give an overview of Sprox, what it does and how to use it. Then
we'll explore the available backends (SQLAlchemy, MongoDB) and dive into the
tgext.admin package, which is the "Admin Tool" for the TurboGears2 framework.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jorge L Vargas</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/330/pycon-2010--sprox--data-driven-web-development---</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/330_sprox-data-driven-web-development-137.ogv" length="196259593" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/330_sprox-data-driven-web-development-137.ogv" fileSize="196259593" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/330_sprox-data-driven-web-development-137.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010SproxDataDrivenWebDevelopment137727.png"></media:thumbnail></item><item><title>Sunday Afternoon Lightning Talks</title><link>http://www.pyvideo.org/video/260/pycon-2010--sunday-afternoon-lightning-talks</link><description>&lt;p&gt;Description&lt;/p&gt;
Plenary: Afternoon Lightning Talks

(02:20) Steve Holden - Lightning talk about lightning talks

(02:55) Michael Foord - Little Bit of Python podcast, upcoming unittest stuff,
mock

(08:00) Harald Armin Massa - The real harm of functional programming

(11:41) Karl ? - FreeBSD certiciation

(13:50) Peter Fein - Please Pirate

(19;15) Chris McDonough - writing books with Sphinx
([repoze.bfg](http://bfg.repoze.org/book));
[createspace](https://www.createspace.com/)

(22:05) Chris Petrilli - celery, distributed task queue

(26:30) Godefroid Chapelle - vim and pdb

(29:20) ? - fork() vs. threads

(33:40) - doing pyweek game with a large number of contributors

(38:05) Jason Huggins - Orbison

(43:20) Noufal Brahim - State of Python community in India

(47:40) Mike Müller - EuroSciPy 2010

(49:50) David gives away stuff, sprint intros, ...

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/260/pycon-2010--sunday-afternoon-lightning-talks</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/260_sunday-afternoon-lightning-talks.ogv" length="292349113" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/260_sunday-afternoon-lightning-talks.ogv" fileSize="292349113" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/260_sunday-afternoon-lightning-talks.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010SundayAfternoonLightningTalks917-863.jpg"></media:thumbnail></item><item><title>Sunday Morning Lightning Talks</title><link>http://www.pyvideo.org/video/261/pycon-2010--sunday-morning-lightning-talks</link><description>&lt;p&gt;Description&lt;/p&gt;
Sunday morning lightning talks

(00:20) Tim Cooper - Lightning sound bytes

(01:05) Gregg Lind, Dan Callahan - Python spring cleanup, contributing to
FLOSS projects

(05:30) Natalia Bidart, MatÃ­as Bordese, Facundo Batista - PyAr

(10:40) D Huggins - You got your Cython in my NumPy

(16:05) Ken Elkabany - PiCloud

(21:20) Tim Fernando - Mobile web in Django

(26:40) ? - Running a standard webapp on stackless; monkeypatching

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/261/pycon-2010--sunday-morning-lightning-talks</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/261_sunday-morning-lightning-talks.ogv" length="162933889" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/261_sunday-morning-lightning-talks.ogv" fileSize="162933889" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/261_sunday-morning-lightning-talks.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010SundayMorningLightningTalks444-479.jpg"></media:thumbnail></item><item><title>Supercharging Web Communications: Integrating Python-based Apps with Salesforce.com CRM (#152)</title><link>http://www.pyvideo.org/video/346/pycon-2010--supercharging-web-communications--int</link><description>&lt;p&gt;Description&lt;/p&gt;
Supercharging Web Communications: Integrating Python-based Apps with
Salesforce.com CRM

  
Presented by Christopher Johnson

  
Salesforce.com is a leading provider of Customer Relationship Management (CRM)
for enterprises (over 55,000 customers) and nonprofits (over 6,000 customers).
While it handles sales, marketing and support processes, it can be extended to
automate any business process, making it a core part of business operations.
Python developers working with companies using salesforce.com need to be able
to integrate applications with Salesforce. Luckily, Salesforce.com has an
elegant and powerful SOAP API. This presentation will introduce an example of
using the Python wrapper for the Salesforce.com API (Beatbox) in an
interactive website. While the library itself is powerful and can be used in
custom Python applications, the Python community can also leverage the
advanced integration between the Plone Content Management System (CMS) and
salesforce.com. We will demonstrate how a Plone website can post forms,
ecommerce transactions, and event RSVPs to salesforce. Additionally, we will
show how developers can make Salesforce.com data interactive in a Plone
website.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Johnson</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/346/pycon-2010--supercharging-web-communications--int</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/346_supercharging-web-communications-integrating-python-based-apps-with-salesforce-com-crm-152.ogv" length="234819947" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/346_supercharging-web-communications-integrating-python-based-apps-with-salesforce-com-crm-152.ogv" fileSize="234819947" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/346_supercharging-web-communications-integrating-python-based-apps-with-salesforce-com-crm-152.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010SuperchargingWebCommunicationsIntegratingPythonbas271.png"></media:thumbnail></item><item><title>Teaching compilers with python (#87)</title><link>http://www.pyvideo.org/video/241/pycon-2010--teaching-compilers-with-python---87</link><description>&lt;p&gt;Description&lt;/p&gt;
Teaching compilers with python

Presented by Dr. Matthieu Amiguet

Why choose Python to teach compilers?

In the University of Applied Sciences ARC, compilers are taught in a
relatively short amount of time. Focus is put on the main conceptual ideas,
letting aside many technical details. Still, the students are expected to
write a full compiler within a few weeks' time.

After trying the traditional C/Lex/Yacc based approach, and a more education-
oriented Java/Jaccie solution, we settled on Python and PLY, plus a few
enhancements (syntax tree graphical representation, decorator to achieve
better code separation).

As a result, the students get a better understanding of the compiler concepts
and produce more interesting and creative projects.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Matthieu Amiguet</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/241/pycon-2010--teaching-compilers-with-python---87</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/241_teaching-compilers-with-python-87.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TeachingCompilersWithPython87495-873.jpg"></media:thumbnail></item><item><title>Tests and Testability (#188)</title><link>http://www.pyvideo.org/video/310/pycon-2010--tests-and-testability---188</link><description>&lt;p&gt;Description&lt;/p&gt;
Tests and Testability

  
Presented by Ned Batchelder

  
Testing software is difficult. Large complex systems don't lend themselves
naturally to automated testing. This isn't just because they are large, it's
because developers often don't consider how testable their code is.
Testability is as important as all the other -ilities in your code
(portability, maintainability, efficiency, etc).

  
Testability is a characteristic of your code that makes it easier to test.
Increased testability can give you better tests, but it also gives you just
plain better code. Improving testability generally means considering the
interfaces to your internal modules and improving them to provide better
modularity. This improvement often has benefits in your product code.

  
I'll discuss specific examples to demonstrate how code can be made more
testable. Mocks, dependency injection, and crisp API design are just a few of
the techniques that can improve your code's testability and make you a happier
person.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/310/pycon-2010--tests-and-testability---188</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/310_tests-and-testability-188.ogv" length="163421188" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/310_tests-and-testability-188.ogv" fileSize="163421188" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/310_tests-and-testability-188.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TestsAndTestability188726.png"></media:thumbnail></item><item><title>The Meaty Parts of Python: Closures, Decorators, List Comprehension, and Functional Constructs</title><link>http://www.pyvideo.org/video/247/pycon-2010--the-meaty-parts-of-python--closures--</link><description>&lt;p&gt;Description&lt;/p&gt;
The Meaty Parts of Python: Closures, Decorators, List Comprehension, and
Functional Constructs

Presented by Matt Harrison

Are you new to Python and want to learn how to step it up to the next level?
Have you wondered about functional programming, closures, decorators,
generators or list comprehensions and when you should use them? This hands-on
tutorial will cover these intermediate subjects in detail, by explaining the
theory behind them then walking through examples. It will also cover how to
test such programs. The session will conclude with some basic problems to work
through.

Outline:

  * Testing (45 min) 
    * unittest 
    * doctest 
    * brief code coverage intro 
    * other testing tools 
  * Functional Programming (15 min) 
    * lambda 
    * map 
    * reduce 
    * filter 
    * Substitutes for above constructs 
  * Functions (20 min) 
    * callables 
    * arguments (args, kw) 
    * mutable parameters 
  * Scoping (10 min) 
  * Closures (5 min) 
  * Decorators (20 min) 
    * Simple decorators 
    * parameterized decorators 
    * mangling 
    * templates for decorators 
    * classmethod staticmethod 
  * Properties (5 min) 
  * List comprehensions (10 min) 
  * Iterator pattern (5 min) 
  * Generators (15 min ) 
  * Hands-on application (50 min) 

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Harrison</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/247/pycon-2010--the-meaty-parts-of-python--closures--</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/247_the-meaty-parts-of-python-closures-decorators-list-comprehension-and-functional-constructs.ogv" length="590622847" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/247_the-meaty-parts-of-python-closures-decorators-list-comprehension-and-functional-constructs.ogv" fileSize="590622847" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/247_the-meaty-parts-of-python-closures-decorators-list-comprehension-and-functional-constructs.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TheMeatyPartsOfPythonClosuresDecoratorsListCom541-52.jpg"></media:thumbnail></item><item><title>The Mighty Dictionary (#55)</title><link>http://www.pyvideo.org/video/276/the-mighty-dictionary-55</link><description>&lt;p&gt;Description&lt;/p&gt;
The Mighty Dictionary

  
Presented by Brandon Craig Rhodes

  
Both newcomers and experienced developers alike love Python's built-in data
types â€” especially dictionaries! But how do dictionaries work? What do they
do better than other container types, and where, on the other hand, are their
weaknesses? Using simple, vivid diagrams that show the secrets of how the
dictionary is implemented, and a series of progressively interesting examples
of its behavior, we will train the Python developer's mind to picture what the
dictionary is doing in just enough detail to make good decisions, as your data
sets get larger, about when to use dictionaries and when other data structures
might be more appropriate.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/276/the-mighty-dictionary-55</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/276_the-mighty-dictionary-55.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/276_the-mighty-dictionary-55.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/276_the-mighty-dictionary-55.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TheMightyDictionary55184-989.jpg"></media:thumbnail></item><item><title>The Python and the Elephant: Large Scale Natural Language Processing with NLTK and Dumbo (#120)</title><link>http://www.pyvideo.org/video/335/pycon-2010--the-python-and-the-elephant--large-sc</link><description>&lt;p&gt;Description&lt;/p&gt;
The Python and the Elephant: Large Scale Natural Language Processing with NLTK
and Dumbo

  
Presented by Nitin Madnani (University of Maryland, College Park); Dr. Jimmy J
Lin (University of Maryland)

  
A practical look at NLTK and Dumbo, python-powered and open-source toolkits
and APIs for processing natural language on a large scale.

  
For people like us who make a living trying to make a computer "understand"
human language, Python is a very powerful language, given its rapid
prototyping abilities, native unicode support and a stellar standard library.
This relationship has been strengthened further by an open-source, python-
based Natural Language ToolKit ([www.nltk.org](http://www.nltk.org/)) which is
being widely used in the community for both teaching and research purposes and
gaining traction in the general Python community as well
([www.nltk.org/book](http://www.nltk.org/book)). Recently, the Python
community has seen the release of Dumbo ([http://wiki.github.com/klbostee/dumb
o](http://wiki.github.com/klbostee/dumbo)), an open-source, python-based
cloud-computing API (based on Hadoop) via the hands of Klaas Bosteels.

  
In this talk, we show how the amalgamation of Python, NLTK and Dumbo can allow
for very large-scale natural language processing efficiently and elegantly.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Jimmy J Lin,Nitin Madnani</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/335/pycon-2010--the-python-and-the-elephant--large-sc</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/335_the-python-and-the-elephant-large-scale-natural-language-processing-with-nltk-and-dumbo-120.ogv" length="None" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/335_the-python-and-the-elephant-large-scale-natural-language-processing-with-nltk-and-dumbo-120.ogv" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/335_the-python-and-the-elephant-large-scale-natural-language-processing-with-nltk-and-dumbo-120.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ThePythonAndTheElephantLargeScaleNaturalLangua697.png"></media:thumbnail></item><item><title>The Ring of Python (#189)</title><link>http://www.pyvideo.org/video/321/the-ring-of-python-189</link><description>&lt;p&gt;Description&lt;/p&gt;
The Ring of Python

  
Presented by holger krekel (merlinux gmbh)

  
CPython 2.5/2.6/3.1, Jython, IronPython, PyPy, StacklessPython,
UnladenSwallow, Cython ... what do we make of all these cool interpreter
projects and versions? Where does competition help and where does it hamper?

  
In this interactive talk I'll highlight the main strengths of each of the
Python interpreters. Furthermore, I'll discuss ways to leverage Python
interpreters in a co-operative way, discuss challenges, projects and issues
ahead and also briefly highlight 'execnet', one my own projects for bridging
(Any) Python to (Any) Python. This is also the first time i am going to try
out a new and funvisual presentation technique after several years of having
done mostly text-based ones

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/321/the-ring-of-python-189</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/321_the-ring-of-python-189.ogv" length="327612140" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/321_the-ring-of-python-189.ogv" fileSize="327612140" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/321_the-ring-of-python-189.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TheRingOfPython189914.png"></media:thumbnail></item><item><title>The speed of PyPy (#83)</title><link>http://www.pyvideo.org/video/334/pycon-2010--the-speed-of-pypy---83</link><description>&lt;p&gt;Description&lt;/p&gt;
The Speed of PyPy

  
Presented by Maciej Fijalkowski (merlinux GmbH, pypy)

  
The first part of the talk will cover PyPy's speed achievements resulting from
the last year's work on the Just-In-Time Compiler. I'll present and discuss a
number of benchmarks and compare against other Python-speed projects. I'll
also cover the basics of how the JIT works and what sort of programs it can
greatly speedup (and which ones it can't).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/334/pycon-2010--the-speed-of-pypy---83</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/334_the-speed-of-pypy-83.ogv" length="138494172" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/334_the-speed-of-pypy-83.ogv" fileSize="138494172" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/334_the-speed-of-pypy-83.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TheSpeedOfPyPy83496.png"></media:thumbnail></item><item><title>The state of Packaging (#63)</title><link>http://www.pyvideo.org/video/283/pycon-2010--the-state-of-packaging---63</link><description>&lt;p&gt;Description&lt;/p&gt;
The state of Packaging

  
Presented by Tarek Ziadé

  
The Python Package Index (PyPI) became over the last years an essential tool
to share your Python programs. As long as you use Distutils standards, you can
register and upload your work at PyPI in a few seconds.

  
Projects like Setuptools and Pip added great features on the top of this : the
ability to fetch PyPI to install a project and its dependencies. So you can
"easy_install A-Program" and everything is done automatically for you.

  
But all these features have shown the flaws and limitations of the current
Distutils design, and the urgency to make it evolve with respect to the
existing OS-specific packaging systems.

  
This talk will detail the biggest issues that need to be solved, and the work
that is being done. It will end up with a presentation of the Distutils
roadmap, and an overview of the Distribute project, the Setuptools replacer.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tarek Ziadé</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/283/pycon-2010--the-state-of-packaging---63</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/283_the-state-of-packaging-63.ogv" length="213007664" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/283_the-state-of-packaging-63.ogv" fileSize="213007664" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/283_the-state-of-packaging-63.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TheStateOfPackaging63241-136.jpg"></media:thumbnail></item><item><title>The Zen of CherryPy (#111)</title><link>http://www.pyvideo.org/video/281/pycon-2010--the-zen-of-cherrypy---111</link><description>&lt;p&gt;Description&lt;/p&gt;
The Zen of CherryPy

  
Presented by Robert E Brewer

  
CherryPy will be 8 years old in June 2010! This presentation will look at the
"Zen of CherryPy": a set of 10 design guidelines which CherryPy has developed
over those years, explaining why they're useful, why some are uniquely Python,
and how to apply them in your own projects.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert E Brewer</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/281/pycon-2010--the-zen-of-cherrypy---111</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/281_the-zen-of-cherrypy-111.ogv" length="168261538" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/281_the-zen-of-cherrypy-111.ogv" fileSize="168261538" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/281_the-zen-of-cherrypy-111.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TheZenOfCherryPy111227-275.jpg"></media:thumbnail></item><item><title>Think Globally, Hack Locally - Teaching Python in Your Community (#122)</title><link>http://www.pyvideo.org/video/323/pycon-2010--think-globally--hack-locally---teachi</link><description>&lt;p&gt;Description&lt;/p&gt;
Think Globally, Hack Locally - Teaching Python in Your Community

  
Presented by Leigh Honeywell (HackLab.TO)

  
For over a year, HackLabTO ([http://hacklab.to](http://hacklab.to/)), a
hackerspace in Toronto, has been the home of an informal Python class / hack
night every Thursday evening. Our participants represent a diverse cross-
section of the lab's community, and include everyone from complete beginners
who hadn't written code since BASIC in high school, to seasoned veterans. Come
hear about our successes and failures, and learn how to start such an event in
your local community.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leigh Honeywell</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/323/pycon-2010--think-globally--hack-locally---teachi</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/323_think-globally-hack-locally-teaching-python-in-your-community-122.ogv" length="165040205" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/323_think-globally-hack-locally-teaching-python-in-your-community-122.ogv" fileSize="165040205" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/323_think-globally-hack-locally-teaching-python-in-your-community-122.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ThinkGloballyHackLocallyTeachingPythonInYourC847.png"></media:thumbnail></item><item><title>Threading is not a model (#187)</title><link>http://www.pyvideo.org/video/270/pycon-2010--threading-is-not-a-model---187</link><description>&lt;p&gt;Description&lt;/p&gt;
Threading is not a model

  
Presented by Joe Gregorio

  
We have many concurrency/multiprocessing capabilities at our finger tips, such
as threads, processes, locks, mutexes, select, epoll, transactional memory,
etc. But none of them are a model for multiprocessing, they are only tools on
which you would build an implementation of such a model. So what are the
models we can choose from? How would they be implemented in Python? And why
may the GIL actually be a good thing?

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Gregorio</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/270/pycon-2010--threading-is-not-a-model---187</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/270_threading-is-not-a-model-187.ogv" length="190916744" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/270_threading-is-not-a-model-187.ogv" fileSize="190916744" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/270_threading-is-not-a-model-187.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ThreadingIsNotAModel187938-427.jpg"></media:thumbnail></item><item><title>To relate or not to relate, that is the question (#99)</title><link>http://www.pyvideo.org/video/285/pycon-2010--to-relate-or-not-to-relate--that-is-t</link><description>&lt;p&gt;Description&lt;/p&gt;
To relate or not to relate, that is the question

  
Presented by Mark Ramm

  
There is a lot of buzz about Couch, Casandra, MongoDB, and other non
relational databases, and at the same time there are decades of hard work
that's gone into optimizing databases built around the relational model. This
talk will focus on comparing relational DB's to their new friends in practice,
and on providing practical tools for deciding what's right for your project.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Ramm</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/285/pycon-2010--to-relate-or-not-to-relate--that-is-t</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/285_to-relate-or-not-to-relate-that-is-the-question-99.ogv" length="167116682" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/285_to-relate-or-not-to-relate-that-is-the-question-99.ogv" fileSize="167116682" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/285_to-relate-or-not-to-relate-that-is-the-question-99.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010ToRelateOrNotToRelateThatIsTheQuestion99229.png"></media:thumbnail></item><item><title>TurboGears Geospatial Framework (#19)</title><link>http://www.pyvideo.org/video/343/pycon-2010--turbogears-geospatial-framework---19</link><description>&lt;p&gt;Description&lt;/p&gt;
TurboGears Geospatial Framework

  
Presented by Sanjiv Singh

  
It is now possible to develop feature rich GIS web applications using
TurboGears by harnessing the power of spatial databases using GeoAlchemy and
integrating python GIS frameworks &amp; utilities with TurboGears using tgext.geo

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sanjiv Singh</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/343/pycon-2010--turbogears-geospatial-framework---19</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/343_turbogears-geospatial-framework-19.ogv" length="126148363" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/343_turbogears-geospatial-framework-19.ogv" fileSize="126148363" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/343_turbogears-geospatial-framework-19.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TurboGearsGeospatialFramework19455.png"></media:thumbnail></item><item><title>Turtles All The Way Down: Demystifying Deferreds, Decorators, and Declarations (#169)</title><link>http://www.pyvideo.org/video/325/pycon-2010--turtles-all-the-way-down--demystifyin</link><description>&lt;p&gt;Description&lt;/p&gt;
Turtles all the way down: Demystifying deferreds, decorators and declarations

  
Presented by Glyph Lefkowitz

  
Python's flexible object model allows library and framework authors to add
very flexible declarations. Metaclasses, decorators, callable objects, and
operator overloading practically allow libraries to re-define the language in
order to provide a more concise, natural style for that library.
Unfortunately, the library user's first experience of such conveniences is
often confusing, because it's not clear what's going on.

  
In this talk, I will try to convince you that all of this wonderful magic
isn't all that weird. This is not a typical how-to session on how to use a
particular feature, either of Python or of Twisted, but will rather draw
examples from Python, Twisted, and Zope to illustrate techniques you can use
to read and understand "magical" Python code.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Glyph Lefkowitz</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/325/pycon-2010--turtles-all-the-way-down--demystifyin</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/325_turtles-all-the-way-down-demystifying-deferreds-decorators-and-declarations-169.ogv" length="190591580" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/325_turtles-all-the-way-down-demystifying-deferreds-decorators-and-declarations-169.ogv" fileSize="190591580" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/325_turtles-all-the-way-down-demystifying-deferreds-decorators-and-declarations-169.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010TurtlesAllTheWayDownDemystifyingDeferredsDecora171.png"></media:thumbnail></item><item><title>Understanding the Python GIL (#82)</title><link>http://www.pyvideo.org/video/353/pycon-2010--understanding-the-python-gil---82</link><description>&lt;p&gt;Description&lt;/p&gt;
Understanding the Python GIL

  
Presented by David Beazley

  
The Python Global Interpreter Lock (GIL) is a frequent source of debate and
concern for programmers working with threads and concurrency. Although most
Python programmers generally know that the GIL restricts Python's ability to
utilize multiple CPUs, few know the inner details of how it actually works and
how it impacts applications. This talk will dive into the inner workings of
the GIL like you've never seen before. Topics include details about the
execution of the Python interpreter, thread implementation, the GILs
surprising behavior on multicore CPUs, and more.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/353/pycon-2010--understanding-the-python-gil---82</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/353_understanding-the-python-gil-82.ogv" length="303360649" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/353_understanding-the-python-gil-82.ogv" fileSize="303360649" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/353_understanding-the-python-gil-82.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010UnderstandingThePythonGIL82660.png"></media:thumbnail></item><item><title>Unladen Swallow: fewer coconuts, faster Python (#73)</title><link>http://www.pyvideo.org/video/316/pycon-2010--unladen-swallow--fewer-coconuts--fast</link><description>&lt;p&gt;Description&lt;/p&gt;
Unladen Swallow: fewer coconuts, faster Python

  
Collin Winter (Google / Unladen Swallow)

  
Unladen Swallow is a Google-sponsored optimization branch of CPython. This
talk will cover Google's motivation for Unladen Swallow, the approach being
taken, results so far, challenges faced, cancers cured and plans for merger
with CPython.

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/316/pycon-2010--unladen-swallow--fewer-coconuts--fast</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/316_unladen-swallow-fewer-coconuts-faster-python-73.ogv" length="248772776" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/316_unladen-swallow-fewer-coconuts-faster-python-73.ogv" fileSize="248772776" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/316_unladen-swallow-fewer-coconuts-faster-python-73.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010UnladenSwallowFewerCoconutsFasterPython73140.png"></media:thumbnail></item><item><title>Using Python to Create Robotic Simulations for Planetary Exploration (#159)</title><link>http://www.pyvideo.org/video/274/pycon-2010--using-python-to-create-robotic-simula</link><description>&lt;p&gt;Description&lt;/p&gt;
Using Python to Create Robotic Simulations for Planetary Exploration (#159)

Presented by Dr. Jonathan M Cameron (Jet Propulsion Laboratory (NASA))

The primary activity of the Dartslab (http://dartslab.jpl.nasa.gov) at Jet
Propulsion Laboratory (JPL) is to create simulations of robotic vehicles for
planetary exploration. We have created simulations of a wide variety of
robotic vehicles such as spacecraft, rovers, and airships. We have been using
Python in a variety of ways to build our simulations. In this talk we will
outline how we use Python to set up a runtime environment for our simulations
and to tie together computationally intense C++ code modules at runtime. We
will also discuss how we have been using Python to help prototype and design
C++ code.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Jonathan M Cameron</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/274/pycon-2010--using-python-to-create-robotic-simula</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/274_using-python-to-create-robotic-simulations-for-planetary-exploration-159.ogv" length="158409536" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/274_using-python-to-create-robotic-simulations-for-planetary-exploration-159.ogv" fileSize="158409536" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/274_using-python-to-create-robotic-simulations-for-planetary-exploration-159.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010UsingPythonToCreateRoboticSimulationsForPlaneta894-385.jpg"></media:thumbnail></item><item><title>VisTrails: A Python-Based Scientific Workflow and Provenance System (#172)</title><link>http://www.pyvideo.org/video/277/vistrails-a-python-based-scientific-workflow-and</link><description>&lt;p&gt;Description&lt;/p&gt;
VisTrails: A Python-Based Scientific Workflow and Provenance System

Presented by David Koop (University of Utah and VisTrails, Inc.)

In this talk, we will give an overview of VisTrails
([http://www.vistrails.org](http://www.vistrails.org/)), a python-based open-
source scientific workflow that transparently captures provenance (i.e.,
lineage) of both data products and the processes used to derive these
products. We will show how VisTrails can be used to streamline data
exploration and visualization. Using real examples, we will demonstrate key
features of the system, including the ability to visually create information
processing pipelines that combine multiple tools and Iibraries such as VTK,
pylab, and matplotlib. We will also show how VisTrails leverages provenance
information not only to support result reproducibility, but also to simplify
the creation and refinement of pipelines.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Koop</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/277/vistrails-a-python-based-scientific-workflow-and</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/277_vistrails-a-python-based-scientific-workflow-and-provenance-system-172.ogv" length="159842063" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/277_vistrails-a-python-based-scientific-workflow-and-provenance-system-172.ogv" fileSize="159842063" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/277_vistrails-a-python-based-scientific-workflow-and-provenance-system-172.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010VisTrailsAPythonBasedScientificWorkflowAndProven325-746.jpg"></media:thumbnail></item><item><title>What every developer should know about database scalability (#21)</title><link>http://www.pyvideo.org/video/313/pycon-2010--what-every-developer-should-know-abou</link><description>&lt;p&gt;Description&lt;/p&gt;
What every developer should know about database scalability

  
Presented by Jonathan Ellis

  
Caching, replication, partitioning, and distributed databases: how these can
(and can't!) help you scale your data.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Ellis</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/313/pycon-2010--what-every-developer-should-know-abou</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/313_what-every-developer-should-know-about-database-scalability-21.ogv" length="374371005" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/313_what-every-developer-should-know-about-database-scalability-21.ogv" fileSize="374371005" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/313_what-every-developer-should-know-about-database-scalability-21.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010WhatEveryDeveloperShouldKnowAboutDatabaseScalab945.png"></media:thumbnail></item><item><title>What We've Learned From Building Basie (#85)</title><link>http://www.pyvideo.org/video/320/pycon-2010--what-we--39-ve-learned-from-building-</link><description>&lt;p&gt;Description&lt;/p&gt;
What We've Learned from Building Basie

  
Presented by Dr. Greg Wilson (University of Toronto)

  
Since September 2008, teams of undergraduates from half a dozen different
universities have been building a Django-based replacement for Trac called
Basie. This talk will present what they've accomplished and discuss what we've
learned about getting junior developers who are juggling half a dozen projects
at once to build production-quality code.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Greg Wilson</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/320/pycon-2010--what-we--39-ve-learned-from-building-</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/320_what-we-ve-learned-from-building-basie-85.ogv" length="203537616" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/320_what-we-ve-learned-from-building-basie-85.ogv" fileSize="203537616" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/320_what-we-ve-learned-from-building-basie-85.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010WhatWeveLearnedFromBuildingBasie85770-118.jpg"></media:thumbnail></item><item><title>Why not run all your tests all the time? A study of continuous integration systems (#160)</title><link>http://www.pyvideo.org/video/326/pycon-2010--why-not-run-all-your-tests-all-the-ti</link><description>&lt;p&gt;Description&lt;/p&gt;
Why not run all your tests at all the time? A study of continuous integration
systems

  
Presented by Dr. C. Titus Brown (Michigan State University)

  
There are an increasing number of continuous integration (CI) systems
available for use by Pythonistas, but no clear guide to how to choose a CI
system for your project. I will examine the architecture choices made by
buildbot, bitten, Hudson, continuum, CruiseControl, DART, and pony-build, and
discuss the configuration and customization of several of these systems for
Pythonic needs, as well as give short demos (for buildbot, bitten, Hudson, and
pony-build).

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">C. Titus Brown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/326/pycon-2010--why-not-run-all-your-tests-all-the-ti</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/326_why-not-run-all-your-tests-all-the-time-a-study-of-continuous-integration-systems-160.m4v" length="None" type="video/mp4"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010WhyNotRunAllYourTestsAllTheTimeAStudyOfCon964.png"></media:thumbnail></item><item><title>Writing Books using Python and Open Source Software (#40)</title><link>http://www.pyvideo.org/video/332/writing-books-using-python-and-open-source-softwa</link><description>&lt;p&gt;Description&lt;/p&gt;
Writing Books using Python and Open Source Software

  
Presented by Mr. wesley j. chun

  
These days, there are countless number of software applications and web
services that have been developed using free and open source software (FOSS).
Such tools have become so flexible, powerful, and universal, that it should
also be possible for authors to write manuscripts using open source tools like
Python in the same way that applications are developed. In this talk, we
present some case studies of this phenomenon.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley J. Chun</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/332/writing-books-using-python-and-open-source-softwa</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/332_writing-books-using-python-and-open-source-software-40.ogv" length="188692385" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/332_writing-books-using-python-and-open-source-software-40.ogv" fileSize="188692385" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/332_writing-books-using-python-and-open-source-software-40.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010WritingBooksUsingPythonAndOpenSourceSoftware40530.png"></media:thumbnail></item><item><title>wxPython II: Introduction to GUI Programming and MVC</title><link>http://www.pyvideo.org/video/288/pycon-2010--wxpython-ii--introduction-to-gui-prog</link><description>&lt;p&gt;Description&lt;/p&gt;
wxPython II: Introduction to GUI Programming and MVC

Presented by David Goodger

wxPython is an open-source graphical user interface (GUI) toolkit that runs on
multiple platforms, including Linux, Windows, and Mac OS X. By the end of this
tutorial, attendees will understand the concepts behind the Model-View-
Controller (MVC) design pattern and will have built a complex wxPython
application.

Intended Audience

Python programmers (of any level; familiarity with Python is assumed) with
some wxPython experience. Attending the "wxPython I" tutorial is recommended.

Requirements

Attendees are welcome to bring a laptop loaded with Python 2.4+ and wxPython
2.6+ to follow along, but this is not required.

</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Goodger</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/288/pycon-2010--wxpython-ii--introduction-to-gui-prog</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/288_wxpython-ii-introduction-to-gui-programming-and-mvc.ogv" length="889329578" type="video/ogg"></enclosure><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010wxPythonIIIntroductionToGUIProgrammingAndMVC717.png"></media:thumbnail></item><item><title>wxPython I: Introduction to GUI Programming</title><link>http://www.pyvideo.org/video/254/pycon-2010--wxpython-i--introduction-to-gui-progr</link><description>&lt;p&gt;Description&lt;/p&gt;
wxPython I: Introduction to GUI Programming

David Goodger

wxPython is an open-source graphical user interface (GUI) toolkit that runs on
multiple platforms, including Linux, Windows, and Mac OS X. By the end of this
tutorial, attendees will have built a simple form-based application from
scratch using wxPython. We will build the application step by step, discussing
the choices and rationale as we go.

</description><pubDate>Fri, 19 Feb 2010 00:00:00 -0600</pubDate><guid>http://www.pyvideo.org/video/254/pycon-2010--wxpython-i--introduction-to-gui-progr</guid><enclosure url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/254_wxpython-i-introduction-to-gui-programming.ogv" length="1303869139" type="video/ogg"></enclosure><media:group><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/254_wxpython-i-introduction-to-gui-programming.ogv" fileSize="1303869139" mime_type="video/ogg"></media:content><media:content url="http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/pycon-us-2010/254_wxpython-i-introduction-to-gui-programming.m4v" mime_type="video/mp4"></media:content></media:group><media:thumbnail url="http://a.images.blip.tv/Pycon-PyCon2010wxPythonI488.png"></media:thumbnail></item></channel></rss>
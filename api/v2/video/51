{"category": "DjangoCon 2010", "language": "English", "slug": "djangocon-2010--rethinking-the-reusable-applicati", "speakers": ["Alex Gaynor"], "tags": ["djangocon", "djangocon2010", "modularizing", "reuse", "reusing"], "related_urls": [], "id": 51, "state": 1, "title": "Rethinking the Reusable Application Paradigm", "summary": "", "description": "Rethinking the Reusable Application Paradigm\n\nPresented by Alex Gaynor\n\nFor the past few years the reusable application paradigm has been considered\none of the major selling points of Django, however the common wisdom about\nwhat it means to make an application reusable isn't really accurate. This talk\nis going to discuss ways to truly make your applications reusable across *any*\nproject.\n\nAbstract\n\nThe common wisdom about reusable application says to do things like let your\nviews take arguments for things like the form class or the template name.\nHowever, that doesn't satisfy most of the real need for extendability:\nchanging the business logic or altering models. This talk is going to look at\nways to combat these limitations:\n\n  * Class based views \n  * By making everything overidable in a view you can absolutely minimize the need to \"copy-paste\" when changing the logic of things around. \n  * As seen in the admin. \n  * Do less \n  * brabeion \n  * Provide the absolute minimum at the model layer, and only small wrappers for the business logic users can implement their own logic to control how things happen. \n  * Related to the idea of \"application frameworks\". Providing the tools for others to build their logic around various helpers. \n  * Flexibility \n  * django-taggit \n  * Provide a concrete implementation, but allow swapping out of various layers. \n  * Don't like the Tag model, swap it out, want a new intermediary model, swap it out. \n  * django-registration \n  * Providing swappable backends to change behavior. \n  * Libraries \n  * django-filter \n  * django-fixture-generator \n  * django-templatetag-sugar \n  * django-compressor \n  * Providing tools for others to build around. \n\nBy using these techniques you can develop reusable application that work\nbeyond any single use case. Of course there are cases where you don't need any\nof these, and just need something that fits \"traditional\" reusable application\nparadigm, so this talk will cover when that works as well.\n\n", "quality_notes": "", "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", "embed": "", "thumbnail_url": "http://a.images.blip.tv/Robertlofthouse-RethinkingTheReusableApplicationParadigm774.png", "duration": null, "video_ogv_length": 181734999, "video_ogv_url": null, "video_ogv_download_only": false, "video_mp4_length": null, "video_mp4_url": null, "video_mp4_download_only": false, "video_webm_length": null, "video_webm_url": null, "video_webm_download_only": false, "video_flv_length": null, "video_flv_url": "http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041.r93.cf2.rackcdn.com/djangocon-2010/51_rethinking-the-reusable-application-paradigm.flv", "video_flv_download_only": false, "source_url": "", "whiteboard": "", "recorded": null, "added": "2012-02-23T04:20:00", "updated": "2014-04-08T20:28:25.893"}
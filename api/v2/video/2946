{"category": "EuroPython 2014", "language": "English", "slug": "out-of-core-columnar-datasets", "speakers": ["Francesc Alted"], "tags": [], "related_urls": [], "id": 2946, "state": 1, "title": "Out-of-Core Columnar Datasets", "summary": "Tables are a very handy data structure to store\r\ndatasets to perform data analysis (filters, groupings, sortings,\r\nalignments...).\r\n\r\nBut it turns out that *how the tables are actually implemented* makes a large impact on how they perform.\r\n\r\nLearn what you can expect from the current tabular offerings in the Python ecosystem.", "description": "It is a fact: we just entered in the Big Data era.  More sensors, more\r\ncomputers, and being more evenly distributed throughout space and time\r\nthan ever, are forcing data analyists to navigate through oceans of\r\ndata before getting insights on what this data means.\r\n\r\nTables are a very handy and spreadly used data structure to store\r\ndatasets so as to perform data analysis (filters, groupings, sortings,\r\nalignments...).  However, the actual table implementation, and\r\nespecially, whether data in tables is stored row-wise or column-wise,\r\nwhether the data is chunked or sequential, whether data is compressed or not,\r\namong other factors, can make a lot of difference depending on the\r\nanalytic operations to be done.\r\n\r\nMy talk will provide an overview of different libraries/systems in the\r\nPython ecosystem that are designed to cope with tabular data, and how\r\nthe different implementations perform for different operations.  The\r\nlibraries or systems discussed are designed to operate either with\r\non-disk data ([PyTables] [1], [relational databases] [2], [BLZ] [3],\r\n[Blaze] [4]...) as well as in-memory data containers ([NumPy] [5],\r\n[DyND] [6], [Pandas] [7], [BLZ] [3], [Blaze] [4]...).\r\n\r\nA special emphasis will be put in the on-disk (also called\r\nout-of-core) databases, which are the most commonly used ones for\r\nhandling extremely large tables.\r\n\r\nThe hope is that, after this lecture, the audience will get a better\r\ninsight and a more informed opinion on the different solutions for\r\nhandling tabular data in the Python world, and most especially, which\r\nones adapts better to their needs.\r\n\r\n[1]: http://www.pytables.org\r\n[2]: http://en.wikipedia.org/wiki/Relational_database\r\n[3]: http://blz.pydata.org\r\n[4]: http://blaze.pydata.org\r\n[5]: http://www.numpy.org/\r\n[6]: https://github.com/ContinuumIO/dynd-python\r\n[7]: http://pandas.pydata.org/\r\n", "quality_notes": "", "copyright_text": "http://creativecommons.org/licenses/by/3.0/", "embed": "<object width=\"640\" height=\"390\"><param name=\"movie\" value=\"http://youtube.com/v/-lKV4zC1gss?version=3&amp;hl=en_US\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://youtube.com/v/-lKV4zC1gss?version=3&amp;hl=en_US\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object>", "thumbnail_url": "http://i.ytimg.com/vi/-lKV4zC1gss/hqdefault.jpg", "duration": null, "video_ogv_length": null, "video_ogv_url": "", "video_ogv_download_only": false, "video_mp4_length": null, "video_mp4_url": "", "video_mp4_download_only": false, "video_webm_length": null, "video_webm_url": "", "video_webm_download_only": false, "video_flv_length": null, "video_flv_url": "", "video_flv_download_only": false, "source_url": "http://www.youtube.com/watch?v=-lKV4zC1gss", "whiteboard": "", "recorded": "2014-07-25", "added": "2014-07-31T00:46:24.723", "updated": "2014-07-31T01:03:52.616"}
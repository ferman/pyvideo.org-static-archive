{"category": "SciPy 2014", "language": "English", "slug": "using-pynio-and-mpi-for-python-to-help-solve-a-bi", "speakers": ["David Brown"], "tags": [], "related_urls": [], "id": 2773, "state": 1, "title": "Using PyNIO and MPI for Python to help solve a big data problem for the CESM", "summary": "The Community Earth System Model produces orders of magnitude more data than earlier models, and the old data handling methods are no longer adequate. We discuss how PyNIO together with MPI for Python has provided the most efficient solution yet tested for the task of converting the raw output of the model to NetCDF files suitable both for archiving and for convenient use by scientists.", "description": "Like most climate models, the CESM (Community Earth System Model)\r\nsteps through time as a particular model scenario evolves and, at set\r\nintervals, outputs the state of all the important variables into\r\nsingle NetCDF files for each component of the model (atmosphere, ocean, land,\r\nand sea ice). Each file contains all the variables for a component at\r\na single time step. Because the data volume is large, it is\r\nimpractical to attempt to handle all the data for a complete model run\r\nas a single aggregation. Therefore, a consensus has evolved to mandate\r\nthat the data be reorganized to contain single variables over some\r\nconvenient time period. Finding a solution that can take advantage of\r\nmulti-core architectures to do the job efficiently has not been\r\neasy. Recently, in an effort to determine the best solution,\r\nresearchers at NCAR have conducted a set of benchmark tests to find\r\nthe best tool for the job. Contenders included NCO (NetCDF Operators,\r\nthe current incumbent for the task); an in-house Fortran code using\r\nthe parallel I/O library PIO; a serial Python script using PyNIO; a\r\nversion of the PyNIO script adapted to work with mpi4py in a very simple\r\nmanner; CDO; NCL; and Pagoda. Surprisingly, PyNIO parallelized with\r\nmpi4py generally outperformed the other contenders by a large margin, \r\nand will now be tested as a replacement for the existing NCO scripts. \r\nThis talk will look at the simple mpi4py and PyNIO code that achieves this result, \r\ndiscuss the reasons why the performance gain varies from case to case, and \r\nsuggest ways to improve performance in challenging cases. Along the way, \r\nPyNIO's capabilities and recent improvements will be explained. In addition, other\r\npossible contenders for this role, in particular NetCDF4-Python coupled\r\nwith mpi4py in a similar fashion, will be benchmarked using the same test suite.\r\n", "quality_notes": "", "copyright_text": "http://www.youtube.com/t/terms", "embed": "<object width=\"640\" height=\"390\"><param name=\"movie\" value=\"http://youtube.com/v/egqo6NfAEtw?version=3&amp;hl=en_US\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://youtube.com/v/egqo6NfAEtw?version=3&amp;hl=en_US\" type=\"application/x-shockwave-flash\" width=\"640\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object>", "thumbnail_url": "http://i1.ytimg.com/vi/egqo6NfAEtw/hqdefault.jpg", "duration": null, "video_ogv_length": null, "video_ogv_url": "", "video_ogv_download_only": false, "video_mp4_length": null, "video_mp4_url": "", "video_mp4_download_only": false, "video_webm_length": null, "video_webm_url": "", "video_webm_download_only": false, "video_flv_length": null, "video_flv_url": "", "video_flv_download_only": false, "source_url": "http://www.youtube.com/watch?v=egqo6NfAEtw", "whiteboard": "", "recorded": "2014-07-14", "added": "2014-07-15T22:45:37.438", "updated": "2014-07-15T23:25:46.667"}
{"category": "PyCon FR 2013", "language": "French", "slug": "vagrant-packer-et-ruby-pour-automatiser-des-buil", "speakers": ["David Cournapeau"], "tags": [], "related_urls": [], "id": 3741, "state": 1, "title": "Vagrant, packer et ruby pour automatiser des builds complexes", "summary": "Vagrant, packer et un peu de ruby pour automatiser des builds complexes.\n\nIntroduction\n\nTout le monde n'a pas la chance de ne d\u00e9pendre que de paquets 100 % python. Python est devenu un outil de choix pour le calcul num\u00e9rique, mais des paquets tels que numpy, scipy ou scikit-learn d\u00e9pendent de librairies C, C++ et m\u00eame Fortran qui d\u00e9pendent fortement des plateformes.\n\nJ'aimerais pr\u00e9senter les outils packer et vagrant comme une solution pour produire des builds 100 % reproductibles. S'appuyant sur la virtualisation, ils permettent d'appliquer les principes de reproduction non seulement pour unix, mais aussi os x et m\u00eame windows.\n\nLe concept de provisionnement, et son application au probl\u00e8me de \"packaging\"\n\nCette section pr\u00e9sentera tout d'abord la n\u00e9cessit\u00e9 de reproduction pour la compilation, et justifiera pourquoi les VM sont les outils les plus ad\u00e9quats aujourd'hui si l'on veut supporter toutes les plateformes usuelles, en particulier windows:\n\n- architectures \"3-tier\" pour le provisionnement\n- outils disponibles pour chacune des 3 couches\n- pr\u00e9sentation de vagrant et packer\n\nvagrant, un outil simple pour la r\u00e9utilisation de VM\n\nCette section commencera par illustrer les probl\u00e8mes usuels du partage des VM entre d\u00e9veloppeurs, et montrera comment vagrant peut r\u00e9soudre ces probl\u00e8mes:\n\n- le provisionnement comme solution au manque de transparence usuel avec les VMs\n- flexibilit\u00e9 et tra\u00e7abilit\u00e9 gr\u00e2ce \u00e0 la combinaison chef/puppet/salt + vagrant\n\npacker, un compl\u00e9ment \u00e0 vagrant\n\nVagrant suppose l'existence de 'base box', qui sont des images d'OS avec juste ce qu'il faut pour \"bootstrapper\" la suite du provisionnement. Packer est un outil qui permet de cr\u00e9er ses propres images:\n\n- illustration du fonctionnement de packer\n- cibler plusieurs technologies de virtualisation \u00e0 partir d' un m\u00eame template: virtualbox, vmware, mais aussi ec2.\n\nExample pour la compilation de paquets 'wheel' pour numpy/scipy\n\nCette partie sera plus didactique, et bas\u00e9 sur un exemple r\u00e9el pour compiler un wheel de numpy et scipy sur windows. L'exemple utilisera \u00e0 la fois vagrant, packer et chef.", "description": "", "quality_notes": "", "copyright_text": "", "embed": "", "thumbnail_url": "https://i.ytimg.com/vi/iTU5CRuY96I/maxresdefault.jpg", "duration": 1903, "video_ogv_length": null, "video_ogv_url": null, "video_ogv_download_only": false, "video_mp4_length": null, "video_mp4_url": null, "video_mp4_download_only": false, "video_webm_length": null, "video_webm_url": null, "video_webm_download_only": false, "video_flv_length": null, "video_flv_url": null, "video_flv_download_only": false, "source_url": "https://www.youtube.com/watch?v=iTU5CRuY96I", "whiteboard": "", "recorded": "2013-11-30", "added": "2015-07-31T17:40:39.556", "updated": "2015-07-31T17:40:39.556"}